{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs help - Print this help message. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Welcome to MkDocs"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs help - Print this help message.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"Machine_Learning/2018-11-19-tensorflow_estimator/","text":"Estimator \u6a21\u578b\u4ececheckpoint\u6062\u590d\u540e\uff0c \u4e0d\u4f1a\u8fd0\u884cinit_op \u6216\u8005\u8c03\u7528init_fn Running local_init_op tensorflow/python/training/session_manager.py prepare_session _try_run_local_init_op Dataset Feature Column loss https://stackoverflow.com/questions/47034888/how-to-choose-cross-entropy-loss-in-tensorflow input \u8f93\u5165\u65b9\u5f0f dataset generator \u8f93\u5165\u7c7b\u578b \u6570\u503c\u5217\uff0c size embedding\u5217 embedding concat learning rate \u5b66\u4e60\u901f\u7387 tf.train.exponential_decay decayed_learning_rate = learning_rate * decay_rate ^ (global_step / decay_steps) learning_rate = 0.05 decay_rate = 1.0 initializer \u521d\u59cb\u5316 tf.glorot_uniform_initializer() regularizer \u6b63\u5219\u5316 l1 tf.contrib.layers.l1_regularizer(l1_reg) l2 tf.contrib.layers.l2_regularizer(l2_reg) l1=0.1, l2=0.1 too big!!!!!!! dropout tf.layers.dropout (\u65e0) batch_normalization \u8bad\u7ec3\u9636\u6bb5\u8bbe\u7f6etraining=False\uff0c batch_normalization\u7684mean and variance don't get updated\uff0c gamma and beta still get updated. https://stackoverflow.com/questions/50047653/set-training-false-of-tf-layers-batch-normalization-when-training-will-get-a estimator train_op dnn\u4ee3\u7801\uff1a _dnn_model_fn \u63d0\u4f9btrain_op_fn \u7ed9head\uff0c train_op_fn\u4e2d\u6784\u5efa\u591a\u4e2atrain_op head \u4e2d\u8c03\u7528train_op_fn \u8fd4\u56detrain_op, 1 \u4fee\u6539canned/head.py \u53bb\u6389train_op = _append_update_ops(train_op) model_fn.py \u4e2d _TPUEstimatorSpec\u4f1a\u4fdd\u5b58train_op 1 \u4fee\u6539_check_is_tensor_or_operation\uff0c estimator train_with_estimator_spec \u4e2d while not mon_sess.should_stop(): , loss = mon_sess.run([estimator_spec.train_op, estimator_spec.loss])","title":"Tensorflow Estimator"},{"location":"Machine_Learning/2018-11-19-tensorflow_estimator/#estimator","text":"\u6a21\u578b\u4ececheckpoint\u6062\u590d\u540e\uff0c \u4e0d\u4f1a\u8fd0\u884cinit_op \u6216\u8005\u8c03\u7528init_fn Running local_init_op tensorflow/python/training/session_manager.py prepare_session _try_run_local_init_op","title":"Estimator"},{"location":"Machine_Learning/2018-11-19-tensorflow_estimator/#dataset","text":"","title":"Dataset"},{"location":"Machine_Learning/2018-11-19-tensorflow_estimator/#feature-column","text":"","title":"Feature Column"},{"location":"Machine_Learning/2018-11-19-tensorflow_estimator/#loss","text":"https://stackoverflow.com/questions/47034888/how-to-choose-cross-entropy-loss-in-tensorflow","title":"loss"},{"location":"Machine_Learning/2018-11-19-tensorflow_estimator/#input","text":"\u8f93\u5165\u65b9\u5f0f dataset generator \u8f93\u5165\u7c7b\u578b \u6570\u503c\u5217\uff0c size embedding\u5217 embedding concat","title":"input"},{"location":"Machine_Learning/2018-11-19-tensorflow_estimator/#learning-rate","text":"tf.train.exponential_decay decayed_learning_rate = learning_rate * decay_rate ^ (global_step / decay_steps) learning_rate = 0.05 decay_rate = 1.0","title":"learning rate \u5b66\u4e60\u901f\u7387"},{"location":"Machine_Learning/2018-11-19-tensorflow_estimator/#initializer","text":"tf.glorot_uniform_initializer()","title":"initializer \u521d\u59cb\u5316"},{"location":"Machine_Learning/2018-11-19-tensorflow_estimator/#regularizer","text":"l1 tf.contrib.layers.l1_regularizer(l1_reg) l2 tf.contrib.layers.l2_regularizer(l2_reg) l1=0.1, l2=0.1 too big!!!!!!!","title":"regularizer \u6b63\u5219\u5316"},{"location":"Machine_Learning/2018-11-19-tensorflow_estimator/#dropout","text":"tf.layers.dropout (\u65e0)","title":"dropout"},{"location":"Machine_Learning/2018-11-19-tensorflow_estimator/#batch_normalization","text":"\u8bad\u7ec3\u9636\u6bb5\u8bbe\u7f6etraining=False\uff0c batch_normalization\u7684mean and variance don't get updated\uff0c gamma and beta still get updated. https://stackoverflow.com/questions/50047653/set-training-false-of-tf-layers-batch-normalization-when-training-will-get-a","title":"batch_normalization"},{"location":"Machine_Learning/2018-11-19-tensorflow_estimator/#estimator-train_op","text":"dnn\u4ee3\u7801\uff1a _dnn_model_fn \u63d0\u4f9btrain_op_fn \u7ed9head\uff0c train_op_fn\u4e2d\u6784\u5efa\u591a\u4e2atrain_op head \u4e2d\u8c03\u7528train_op_fn \u8fd4\u56detrain_op, 1 \u4fee\u6539canned/head.py \u53bb\u6389train_op = _append_update_ops(train_op) model_fn.py \u4e2d _TPUEstimatorSpec\u4f1a\u4fdd\u5b58train_op 1 \u4fee\u6539_check_is_tensor_or_operation\uff0c estimator train_with_estimator_spec \u4e2d while not mon_sess.should_stop(): , loss = mon_sess.run([estimator_spec.train_op, estimator_spec.loss])","title":"estimator train_op"},{"location":"Machine_Learning/2018-11-22-vae/","text":"https://kexue.fm/search/%E5%8F%98%E5%88%86%E8%87%AA%E7%BC%96%E7%A0%81%E5%99%A8/ \u53d8\u5206\u81ea\u7f16\u7801\u5668\uff08\u4e00\uff09\uff1a\u539f\u6765\u662f\u8fd9\u4e48\u4e00\u56de\u4e8b https://kexue.fm/archives/5253 \u57fa\u4e8eCNN\u548cVAE\u7684\u4f5c\u8bd7\u673a\u5668\u4eba\uff1a\u968f\u673a\u6210\u8bd7 https://kexue.fm/archives/5332 \u57fa\u7840\u77e5\u8bc6 KL divergence\uff08KL\u6563\u5ea6\uff09\uff1a\u8ba1\u7b97\u4e24\u4e2a\u5206\u5e03\u4e4b\u95f4\u7684\u5dee\u5f02\uff0c KL\u6563\u5ea6\u503c\u8d8a\u5c0f\u4e24\u4e2a\u5206\u5e03\u8d8a\u63a5\u8fd1 Reparameterization Trick\uff08\u91cd\u53c2\u6570\u5316\u6280\u5de7\uff09\uff1a \u89e3\u51b3\u62bd\u6837\u8fc7\u7a0b\u5bfc\u81f4\u7684\u4e0d\u53ef\u5bfc\u95ee\u9898,\u4f7f\u68af\u5ea6\u80fd\u591f\u4ecedecoder\u4f20\u9012\u5230encoder\u90e8\u5206 ELBO(Evidence Lower BOund): KL\u516c\u5f0f\u4e2d\u5b58\u5728\u540e\u9a8c\u6982\u7387\u65e0\u6cd5\u76f4\u63a5\u6c42\u89e3\uff0c\u6700\u5c0f\u5316KL\u7b49\u4ef7\u4e8e\u6700\u5927\u5316ELBO VAE\uff1ahttps://zhuanlan.zhihu.com/p/34998569 \u7f16\u7801\u5668(encoder)\u7684\u8f93\u51fa\u4e3a\u9ad8\u65af\u5206\u5e03\u53c2\u6570(\u5747\u503c\u548c\u65b9\u5dee)\uff0c\u4e24\u4e2a\u5411\u91cf\u5206\u522b\u4e3a\u5747\u503c\u5411\u91cf\u548c\u65b9\u5dee\u5411\u91cf\uff0c \u6839\u636e\u5747\u503c\u548c\u65b9\u5dee\u8fdb\u884c\u91c7\u6837\u4ea7\u751f\u89e3\u7801\u5668(decoder)\u7684\u8f93\u5165\u5411\u91cf\uff0c \u4f7f\u7528KL\u6563\u5ea6\u6765\u5bf9\u5206\u5e03\u8fdb\u884c\u7ea6\u675f AE(autoencoder) VAE(variational autoencoder) CVAE(conditional variational autoencoder) GAN(generative adversarial network) KL divergence \u4eceP\u5230Q\u7684KL\u6563\u5ea6\uff1a D_{KL}(P||Q)=-\\sum p(x)log(q(x)) + \\sum p(x)log(p(x))= H(P,Q) - H(P) $H(P,Q)$ \u4e3aP\u548cQ\u7684\u4ea4\u53c9\u71b5\uff0c $H(P)$ \u4e3aP\u7684\u71b5 KL divergence || ELBO || marginal log-likelihood \u7ed9\u5b9a\u6570\u636e\u96c6$X={ x^{(i)} }^N_{i=1}$, \u635f\u5931\u51fd\u6570\u5b9a\u4e49\u4e3a$\\sum logp(x^{(i)})$, \u5bf9\u4e8e\u6bcf\u4e2a\u6570\u636e\u70b9i\uff0c logp(x^{(i)}) = - $p(z|x^{(i)})$\u7ed9\u5b9a\u6837\u672c$x^{(i)}$\u540ez\u7684\u771f\u5b9e\u5206\u5e03 - $q(z|x^{(i)})$\u7531\u795e\u7ecf\u7f51\u7edc\u7ed9\u51fa\uff0c\u53ef\u4ee5\u901a\u8fc7\u8499\u7279\u5361\u6d1b\u4f30\u8ba1\u5f97\u5230 \\begin{aligned} KL \\big(q(z|x^{(i)}) \\big\\Vert p(z|x^{(i)})\\big) &= E_{q(z|x^{(i)})} \\big[ \\log \\frac{q(z|x^{(i)})}{p(z \\vert x^{(i)})} \\big]\\\\ &= E_{q(z|x^{(i)})} \\big[ \\log \\frac{q(z|x^{(i)})p(x^{(i)})} {p(z,x^{(i)})} \\big] \\\\ &= E_{q(z|x^{(i)})} \\big[ \\log \\frac{q(z|x^{(i)})}{p(z,x^{(i)})} \\big] + \\log p(x^{(i)}) \\\\ &= - \\mathcal{L} + \\log p(x^{(i)}) \\end{aligned} \\log p(x^{(i)}) = KL \\big(q(z|x^{(i)}) \\big\\Vert p(z|x^{(i)})\\big) + \\mathcal{L} \u5176\u4e2d$\\mathcal{L}$\u5373\u4e3aELBO, \u7531\u4e8eKL\u662f\u975e\u8d1f\u7684\uff0c \u56e0\u6b64$\\log p(x^{(i)}) >= \\mathcal{L}$, ELBO\u662f\u6781\u5927\u4f3c\u7136$\\log p(x^{(i)})$\u7684\u4e0b\u754c \\begin{aligned} ELBO &=\\mathcal{L} \\\\ &= -E_{q(z|x^{(i)})} \\big[ \\log \\frac{q(z|x^{(i)})}{p(z,x^{(i)})} \\big] \\\\ &= -E_{q(z|x^{(i)})} \\big[ \\log \\frac{q(z|x^{(i)})}{p(x^{(i)}|z)p(z)} \\big] \\\\ &= -E_{q(z|x^{(i)})} \\big[ \\log \\frac{q(z|x^{(i)})}{p(z)} \\big]+ E_{q(z|x^{(i)})} \\big[ \\log p(x^{(i)} \\vert z) \\big] \\\\ &= -KL(q(z|x^{(i)}) \\Vert p(z)) + E_{q(z|x^{(i)})} \\big[ \\log p(x^{(i)} \\vert z) \\big] \\\\ &= E_{q(z|x^{(i)})} \\big[ \\log p(z) \\big] - E_{q(z|x^{(i)})} \\big[ \\log q(z |x^{(i)}) \\big] + E_{q(z|x^{(i)})} \\big[ \\log p(x^{(i)} \\vert z) \\big] \\end{aligned} ELBO \u4e09\u9879\u6c42\u89e3 - $E_{q(z|x^{(i)})} \\big[ \\log p(z) \\big]$\u6c42\u89e3\uff1a p(z) \u4e3a\u9690\u53d8\u91cfz\u7684\u5148\u9a8c\u5206\u5e03\uff0c\u5df2\u77e5\u4e3a\u9ad8\u65af\u5206\u5e03\uff0c\u8be5\u9879\u53ef\u4ee5\u6c42\u5f97\u89e3\u6790\u89e3 E_{q(z|x^{(i)})} \\big[ \\log p(z) \\big] = \\int logp(x) marginal log-likelihood - marginal \u6307\u8fb9\u7f18\u5206\u5e03\uff0c \u8fb9\u7f18\u5206\u5e03p(x)\u662f\u76f8\u5bf9\u4e8ep(x, z)\u8054\u5408\u5206\u5e03\u7684\u6982\u5ff5 - log-likelihood \u5bf9\u6570\u4f3c\u7136 $logp(x^{(i)})=\\log p(x^{(i)}) +$ KL \u6563\u5ea6\u7684\u8ba1\u7b97 \u79bb\u6563\u968f\u673a\u53d8\u91cfX\u670d\u4eceP(X), P(X)= \\begin{cases} 0.2, & \\text{X = 1} \\\\ 0.4, & \\text{X = 2} \\\\ 0.4, & \\text{X = 3} \\end{cases} \u79bb\u6563\u968f\u673a\u53d8\u91cfY\u670d\u4eceQ(Y), Q(X)= \\begin{cases} 0.2, & \\text{X = 1} \\\\ 0.4, & \\text{X = 2} \\\\ 0.4, & \\text{X = 3} \\end{cases} \u5219\u4eceP\u5230Q\u7684KL\u6563\u5ea6\u4e3a\uff1a D(P||Q)=0.2 \\times log(\\frac{0.2}{0.4}) + 0.4 \\times log(\\frac{0.4}{0.2}) + 0.4 \\times log(\\frac{0.4}{0.4}) = 0.138 \u5bf9\u4e8e\u79bb\u6563\u968f\u673a\u53d8\u91cf\uff0c\u8ba1\u7b97KL\u6563\u5ea6\u9700\u8981\u77e5\u9053\u968f\u673a\u53d8\u91cf\u7684\u53d6\u503c\u548c\u6982\u7387 $X=g(Z)$ \u4ece\u9690\u53d8\u91cfZ\u751f\u6210\u968f\u673a\u53d8\u91cfX\uff0c \u9690\u53d8\u91cfZ\u4e3an\u7ef4\u5411\u91cf\uff0c\u6bcf\u4e00\u7ef4\u5747\u670d\u4ece\u6807\u51c6\u6b63\u6001\u5206\u5e03\uff0c \u968f\u673a\u53d8\u91cfX\u4e3a\u6211\u4eec\u9700\u8981\u751f\u6210\u7684\u6570\u636e\uff0c\u4f8b\u5982\u56fe\u50cf\uff0c \u5982\u4f55\u5f97\u5230\u53d8\u6362\u51fd\u6570g\u4f7f\u5f97\u751f\u6210\u7684\u56fe\u50cfX\u548c\u771f\u5b9e\u56fe\u50cf\u5f88\u50cf\u5462\uff1f \u63cf\u8ff0\u751f\u6210\u7684\u56fe\u50cf\u662f\u5426\u4e0e\u771f\u5b9e\u56fe\u50cf\u5f88\u50cf\uff0c\u5176\u5b9e\u662f\u8bf4\u751f\u6210\u7684\u56fe\u50cf\u548c\u771f\u5b9e\u56fe\u50cf\u7684\u5206\u5e03\u662f\u5426\u4e00\u81f4\uff0c\u53ef\u4ee5\u901a\u8fc7KL\u6563\u5ea6\u6765\u63cf\u8ff0\uff0c \u4f46\u662f\u6211\u4eec\u65e0\u6cd5\u76f4\u63a5\u8ba1\u7b97KL\u6563\u5ea6\uff0c\u56e0\u4e3a\u56fe\u50cf\u771f\u5b9e\u5206\u5e03\u7684\u6982\u7387\u6211\u4eec\u65e0\u6cd5\u62ff\u5230\u3002 \u56fe\u50cf\u7528\u968f\u673a\u53d8\u91cfX\u6765\u8868\u8fbe\uff0c \u8bb0\u5176\u6982\u7387\u5206\u5e03\u4e3aP(X), P(X)\u7684\u8868\u8fbe\u5f0f\u73b0\u5728\u672a\u77e5\uff0c\u5426\u5219\u6211\u4eec\u76f4\u63a5\u53ef\u4ee5\u7531\u8868\u8fbe\u5f0f\u751f\u6210\u56fe\u50cf\uff0c \u6211\u4eec\u501f\u7528$P(X)=P(X|Z)P(Z)$ \u6765\u83b7\u5f97P(X), \u968f\u673a\u53d8\u91cfZ\u7684\u6982\u7387\u5206\u5e03P(Z)\u4e3a\u6807\u51c6\u6b63\u6001\u5206\u5e03\uff0c P\uff08X|Z) \u4e3aZ\u53d8\u6362\u5230X\u7684\u6982\u7387\u5206\u5e03, \u5bf9\u5e94vae\u4e2d\u7684\u751f\u6210\u5668 \u62df\u5408\u7684\u5206\u5e03$q(z|x_i)$\u548c\u771f\u5b9e\u7684\u5206\u5e03$p(z|x_i)$\u7684\u5dee\u8ddd\u5982\u4f55\u8861\u91cf\uff1f \\begin{aligned}&KL\\Big(N(\\mu,\\sigma^2)\\Big\\Vert N(0,1)\\Big)\\\\ =&\\int \\frac{1}{\\sqrt{2\\pi\\sigma^2}}e^{-(x-\\mu)^2/2\\sigma^2} \\left(\\log \\frac{e^{-(x-\\mu)^2/2\\sigma^2}/\\sqrt{2\\pi\\sigma^2}}{e^{-x^2/2}/\\sqrt{2\\pi}}\\right)dx\\\\ =&\\int \\frac{1}{\\sqrt{2\\pi\\sigma^2}}e^{-(x-\\mu)^2/2\\sigma^2} \\log \\left\\{\\frac{1}{\\sqrt{\\sigma^2}}\\exp\\left\\{\\frac{1}{2}\\big[x^2-(x-\\mu)^2/\\sigma^2\\big]\\right\\} \\right\\}dx\\\\ =&\\frac{1}{2}\\int \\frac{1}{\\sqrt{2\\pi\\sigma^2}}e^{-(x-\\mu)^2/2\\sigma^2} \\Big[-\\log \\sigma^2+x^2-(x-\\mu)^2/\\sigma^2 \\Big] dx\\end{aligned} \u5316\u7b80\u540e\u5f97\u5230\uff1a KL\\Big(N(\\mu,\\sigma^2)\\Big\\Vert N(0,1)\\Big)=\\frac{1}{2}\\Big(-\\log \\sigma^2+\\mu^2+\\sigma^2-1\\Big) $\\sigma^2 -\\log \\sigma^2 - 1$ \u53ef\u4ee5\u89c6\u4e3a\u8ba9$\\sigma^2$\u63a5\u8fd11\u7684\u635f\u5931\u51fd\u6570, \u50cf\u4e00\u4e2a\u5bf9\u53f7\u5f62\u72b6\u7684\u51fd\u6570 x = np.linspace(0.000001,20,100) y = x - np.log(x) - 1 plt.plot(x, y) $\\mu^2$ \u53ef\u4ee5\u89c6\u4e3a\u8ba9$\\mu$\u63a5\u8fd10\u7684\u635f\u5931\u51fd\u6570 p(x)\u4e3a\u6b63\u6001\u5206\u5e03 p(x)=\\frac{1}{\\sqrt{{2\\pi}}\\times\\sigma}e^{-\\frac{1}{2}(\\frac{x-\\mu}{\\sigma})^2} \u90a3\u4e48logp(x)\u4e3a\uff1a logp(x)=-\\frac{1}{2} \\big[ (\\frac{x-\\mu}{\\sigma})^2+ \\log \\sigma^2+\\log 2\\pi\\big] \u4ee3\u7801\u5b9e\u9a8c cvae def reparameterize(self, mean, logvar): eps = tf.random_normal(shape=mean.shape) return eps * tf.exp(logvar * .5) + mean eps \u4e3a\u6807\u51c6\u6b63\u6001\u5206\u5e03\u91c7\u6837\uff0c \u7136\u540e\u6839\u636e\u5747\u503c\u548c\u65b9\u5dee\u53d8\u6362\u6210\u65b0\u7684\u6b63\u6001\u5206\u5e03 \u5747\u503c\u4e3a\u03bc\uff0c\u65b9\u5dee\u4e3a\u03c3\u7684\u6b63\u6001\u5206\u5e03Z\u53d8\u6362\u4e3a\u6807\u51c6\u6b63\u6001\u5206\u5e03X\uff0c\u53d8\u6362\u516c\u5f0f\u5982\u4e0b\uff1a $X=\\frac{Z - \u03bc}{\u03c3}$ ; \u6807\u51c6\u6b63\u6001\u5206\u5e03X\u53d8\u6362\u4e3a\u5747\u503c\u4e3a\u03bc\uff0c\u65b9\u5dee\u4e3a\u03c3\u7684\u6b63\u6001\u5206\u5e03Z\uff0c\u53d8\u6362\u516c\u5f0f\u5982\u4e0b\uff1a $Z=X*\u03c3 + \u03bc$ def log_normal_pdf(sample, mean, logvar, raxis=1): log2pi = tf.log(2. * np.pi) return tf.reduce_sum( -.5 * ((sample - mean) ** 2. * tf.exp(-logvar) + logvar + log2pi), axis=raxis) def compute_loss(model, x): mean, logvar = model.encode(x) z = model.reparameterize(mean, logvar) x_logit = model.decode(z) cross_ent = tf.nn.sigmoid_cross_entropy_with_logits(logits=x_logit, labels=x) logpx_z = -tf.reduce_sum(cross_ent, axis=[1, 2, 3]) logpz = log_normal_pdf(z, 0., 0.) logqz_x = log_normal_pdf(z, mean, logvar) return -tf.reduce_mean(logpx_z + logpz - logqz_x) model.encode\u65b9\u6cd5\u5c06\u8f93\u5165\u56fe\u50cfx(batch_size, image_height, image_width, 1)\u53d8\u6362\u6210\u4e24\u4e2a\u5411\u91cfmean(batch_size,latent_dim)\u548clogvar(batch_size, latent_dim)\uff0c \u751f\u6210logvar\u800c\u4e0d\u662fvar\u662f\u4e3a\u4e86\u6570\u503c\u7a33\u5b9a\u6027\uff0c\u6bcf\u5e45\u56fe\u50cf\u90fd\u5bf9\u5e94\u4e00\u4e2a\u79c1\u6709\u7684mean\u548clogvar\u5411\u91cf model.reparameterize\u6839\u636emean\u548clogvar\u5206\u5e03\u53c2\u6570\uff0c\u6765\u91c7\u6837\u751f\u6210\u5411\u91cfz(batch_size, latent_dim), \u91c7\u6837\u662f\u4e3a\u4e86\u8fdb\u884c\u8499\u7279\u5361\u6d1b\u4f30\u8ba1 model.decode\u65b9\u6cd5\u5c06\u5411\u91cfz\u53d8\u6362\u4e3a\u91cd\u5efa\u56fe\u50cfx_logit(\u8fd8\u672a\u7ecf\u8fc7sigmoid) log_normal_pdf normal\u6307\u6b63\u6001\u5206\u5e03\uff0cpdf\u6307\u6982\u7387\u5bc6\u5ea6\u51fd\u6570\uff0clog_normal_pdf\u4e3a\u6982\u7387\u5bc6\u5ea6\u51fd\u6570\u53d6\u5bf9\u6570\uff0c\u7ed3\u679c\u4ecd\u7136\u662f\u4e2a\u51fd\u6570 z\u4e3a\u5747\u503c\u4e3amean\uff0c\u65b9\u5dee\u7684\u5bf9\u6570\u4e3alogvar\u7684\u91c7\u6837\u6837\u672c logpx_z\u4e3a $logP(X|Z)$\u7684\u91c7\u6837, \u56e0\u4e3a\u73b0\u5728X\u4e3a\u4e8c\u503c\u56fe\u50cf,\u670d\u4ece\u4f2f\u52aa\u5229\u5206\u5e03\uff0c\u6240\u4ee5\u8ba1\u7b97\u4ea4\u53c9\u71b5\u635f\u5931\u7684cross_ent\u8d1f\u6570\uff0c\u5982\u679c\u56fe\u50cf\u4e3a\u5b9e\u503c\uff0c\u5219\u8ba1\u7b97\u5e73\u65b9\u635f\u5931mse logpz\u4e3a $logP(Z)$ \u7684\u91c7\u6837\uff0c p(Z)\u4e3a\u6807\u51c6\u6b63\u6001\u5206\u5e03\uff0c\u56e0\u6b64mean=0,logvar=0 logqz_x\u4e3a $logQ(Z|X)$\u7684\u91c7\u6837, Q(Z|X)\u4e3a\u6b63\u6001\u5206\u5e03 logpz - logqz_x \u7684\u671f\u671b\u53ef\u4ee5\u4e0d\u901a\u8fc7\u91c7\u6837\u6765\u8fdb\u884c\u8ba1\u7b97\uff0c\u800c\u662f\u76f4\u63a5\u4f7f\u7528\u89e3\u6790\u89e3\u8fdb\u884c\u8ba1\u7b97 \u4ea4\u53c9\u71b5\u635f\u5931\u4e3a\uff1a$\\sum_{k=1}^D \\Big[- x_{(k)} \\ln \\rho_{(k)}(z) - (1-x_{(k)}) \\ln \\Big(1 -\\rho_{(k)}(z)\\Big)\\Big]$ \u5bf9\u6570\u4f3c\u7136\u4e3a\uff1a$\\ln p(x|z) = \\sum_{k=1}^D \\Big[ x_{(k)} \\ln \\rho_{(k)}(z) + (1-x_{(k)}) \\ln \\Big(1 -\\rho_{(k)}(z)\\Big)\\Big]$\u5373\u4ea4\u53c9\u71b5\u7684\u8d1f\u6570 \u76f4\u63a5\u4f7f\u7528\u89e3\u6790\u89e3\u6c42\u89e3logpz\u548clogpz_x\u7684\u671f\u671b\uff0c \u548c\u4e0a\u8fb9\u7684\u533a\u522b\u662f\u516c\u5f0f\u4e0d\u540c\uff0c\u6ca1\u6709\u4f7f\u7528\u91c7\u6837\u70b9z def compute_loss(model, x): mean, logvar = model.encode(x) z = model.reparameterize(mean, logvar) x_logit = model.decode(z) cross_ent = tf.nn.sigmoid_cross_entropy_with_logits(logits=x_logit, labels=x) logpx_z = -tf.reduce_sum(cross_ent, axis=[1, 2, 3]) logpz = tf.reduce_sum(-0.5*(tf.log(2. * np.pi) - 1 - logvar), axis=1) logqz_x = tf.reduce_sum(-0.5*(tf.log(2. * np.pi) - tf.square(mean) - tf.exp(logvar)), axis=1) return -tf.reduce_mean(logpx_z + logpz - logqz_x) KL\\Big(p(x)\\Big\\Vert q(x)\\Big) = \\int p(x)\\ln \\frac{p(x)}{q(x)} dx=\\mathbb{E}_{x\\sim p(x)}\\left[\\ln \\frac{p(x)}{q(x)}\\right]\\tag{5} \u8054\u5408\u5206\u5e03\u7684KL\u6563\u5ea6: $p(x,z)=\\tilde{p}(x)p(z|x)$ \\begin{aligned} KL\\Big(p(x,z)\\Big\\Vert q(x,z)\\Big) =& \\iint p(x,z)\\ln \\frac{p(x,z)}{q(x,z)} dxdz \\\\ =& \\int \\tilde{p}(x) \\left[\\int p(z|x)\\ln \\frac{\\tilde{p}(x)p(z|x)}{q(x,z)} dz\\right]dx\\\\ =& \\mathbb{E}_{x\\sim \\tilde{p}(x)} \\left[\\int p(z|x)\\ln \\frac{\\tilde{p}(x)p(z|x)}{q(x,z)} dz\\right] \\\\ =& \\mathbb{E}_{x\\sim \\tilde{p}(x)} \\left[\\ln \\tilde{p}(x)\\int p(z|x)dz + \\int p(z|x) \\ln p(z|x)dz - \\int p(z|x) \\ln q(x,z)dz \\right]\\\\ \\end{aligned}","title":"vae"},{"location":"Machine_Learning/2018-11-22-vae/#_1","text":"KL divergence\uff08KL\u6563\u5ea6\uff09\uff1a\u8ba1\u7b97\u4e24\u4e2a\u5206\u5e03\u4e4b\u95f4\u7684\u5dee\u5f02\uff0c KL\u6563\u5ea6\u503c\u8d8a\u5c0f\u4e24\u4e2a\u5206\u5e03\u8d8a\u63a5\u8fd1 Reparameterization Trick\uff08\u91cd\u53c2\u6570\u5316\u6280\u5de7\uff09\uff1a \u89e3\u51b3\u62bd\u6837\u8fc7\u7a0b\u5bfc\u81f4\u7684\u4e0d\u53ef\u5bfc\u95ee\u9898,\u4f7f\u68af\u5ea6\u80fd\u591f\u4ecedecoder\u4f20\u9012\u5230encoder\u90e8\u5206 ELBO(Evidence Lower BOund): KL\u516c\u5f0f\u4e2d\u5b58\u5728\u540e\u9a8c\u6982\u7387\u65e0\u6cd5\u76f4\u63a5\u6c42\u89e3\uff0c\u6700\u5c0f\u5316KL\u7b49\u4ef7\u4e8e\u6700\u5927\u5316ELBO VAE\uff1ahttps://zhuanlan.zhihu.com/p/34998569 \u7f16\u7801\u5668(encoder)\u7684\u8f93\u51fa\u4e3a\u9ad8\u65af\u5206\u5e03\u53c2\u6570(\u5747\u503c\u548c\u65b9\u5dee)\uff0c\u4e24\u4e2a\u5411\u91cf\u5206\u522b\u4e3a\u5747\u503c\u5411\u91cf\u548c\u65b9\u5dee\u5411\u91cf\uff0c \u6839\u636e\u5747\u503c\u548c\u65b9\u5dee\u8fdb\u884c\u91c7\u6837\u4ea7\u751f\u89e3\u7801\u5668(decoder)\u7684\u8f93\u5165\u5411\u91cf\uff0c \u4f7f\u7528KL\u6563\u5ea6\u6765\u5bf9\u5206\u5e03\u8fdb\u884c\u7ea6\u675f AE(autoencoder) VAE(variational autoencoder) CVAE(conditional variational autoencoder) GAN(generative adversarial network)","title":"\u57fa\u7840\u77e5\u8bc6"},{"location":"Machine_Learning/2018-11-22-vae/#kl-divergence","text":"\u4eceP\u5230Q\u7684KL\u6563\u5ea6\uff1a D_{KL}(P||Q)=-\\sum p(x)log(q(x)) + \\sum p(x)log(p(x))= H(P,Q) - H(P) $H(P,Q)$ \u4e3aP\u548cQ\u7684\u4ea4\u53c9\u71b5\uff0c $H(P)$ \u4e3aP\u7684\u71b5","title":"KL divergence"},{"location":"Machine_Learning/2018-11-22-vae/#kl-divergence-elbo-marginal-log-likelihood","text":"\u7ed9\u5b9a\u6570\u636e\u96c6$X={ x^{(i)} }^N_{i=1}$, \u635f\u5931\u51fd\u6570\u5b9a\u4e49\u4e3a$\\sum logp(x^{(i)})$, \u5bf9\u4e8e\u6bcf\u4e2a\u6570\u636e\u70b9i\uff0c logp(x^{(i)}) = - $p(z|x^{(i)})$\u7ed9\u5b9a\u6837\u672c$x^{(i)}$\u540ez\u7684\u771f\u5b9e\u5206\u5e03 - $q(z|x^{(i)})$\u7531\u795e\u7ecf\u7f51\u7edc\u7ed9\u51fa\uff0c\u53ef\u4ee5\u901a\u8fc7\u8499\u7279\u5361\u6d1b\u4f30\u8ba1\u5f97\u5230 \\begin{aligned} KL \\big(q(z|x^{(i)}) \\big\\Vert p(z|x^{(i)})\\big) &= E_{q(z|x^{(i)})} \\big[ \\log \\frac{q(z|x^{(i)})}{p(z \\vert x^{(i)})} \\big]\\\\ &= E_{q(z|x^{(i)})} \\big[ \\log \\frac{q(z|x^{(i)})p(x^{(i)})} {p(z,x^{(i)})} \\big] \\\\ &= E_{q(z|x^{(i)})} \\big[ \\log \\frac{q(z|x^{(i)})}{p(z,x^{(i)})} \\big] + \\log p(x^{(i)}) \\\\ &= - \\mathcal{L} + \\log p(x^{(i)}) \\end{aligned} \\log p(x^{(i)}) = KL \\big(q(z|x^{(i)}) \\big\\Vert p(z|x^{(i)})\\big) + \\mathcal{L} \u5176\u4e2d$\\mathcal{L}$\u5373\u4e3aELBO, \u7531\u4e8eKL\u662f\u975e\u8d1f\u7684\uff0c \u56e0\u6b64$\\log p(x^{(i)}) >= \\mathcal{L}$, ELBO\u662f\u6781\u5927\u4f3c\u7136$\\log p(x^{(i)})$\u7684\u4e0b\u754c \\begin{aligned} ELBO &=\\mathcal{L} \\\\ &= -E_{q(z|x^{(i)})} \\big[ \\log \\frac{q(z|x^{(i)})}{p(z,x^{(i)})} \\big] \\\\ &= -E_{q(z|x^{(i)})} \\big[ \\log \\frac{q(z|x^{(i)})}{p(x^{(i)}|z)p(z)} \\big] \\\\ &= -E_{q(z|x^{(i)})} \\big[ \\log \\frac{q(z|x^{(i)})}{p(z)} \\big]+ E_{q(z|x^{(i)})} \\big[ \\log p(x^{(i)} \\vert z) \\big] \\\\ &= -KL(q(z|x^{(i)}) \\Vert p(z)) + E_{q(z|x^{(i)})} \\big[ \\log p(x^{(i)} \\vert z) \\big] \\\\ &= E_{q(z|x^{(i)})} \\big[ \\log p(z) \\big] - E_{q(z|x^{(i)})} \\big[ \\log q(z |x^{(i)}) \\big] + E_{q(z|x^{(i)})} \\big[ \\log p(x^{(i)} \\vert z) \\big] \\end{aligned} ELBO \u4e09\u9879\u6c42\u89e3 - $E_{q(z|x^{(i)})} \\big[ \\log p(z) \\big]$\u6c42\u89e3\uff1a p(z) \u4e3a\u9690\u53d8\u91cfz\u7684\u5148\u9a8c\u5206\u5e03\uff0c\u5df2\u77e5\u4e3a\u9ad8\u65af\u5206\u5e03\uff0c\u8be5\u9879\u53ef\u4ee5\u6c42\u5f97\u89e3\u6790\u89e3 E_{q(z|x^{(i)})} \\big[ \\log p(z) \\big] = \\int logp(x) marginal log-likelihood - marginal \u6307\u8fb9\u7f18\u5206\u5e03\uff0c \u8fb9\u7f18\u5206\u5e03p(x)\u662f\u76f8\u5bf9\u4e8ep(x, z)\u8054\u5408\u5206\u5e03\u7684\u6982\u5ff5 - log-likelihood \u5bf9\u6570\u4f3c\u7136 $logp(x^{(i)})=\\log p(x^{(i)}) +$","title":"KL divergence || ELBO || marginal log-likelihood"},{"location":"Machine_Learning/2018-11-22-vae/#kl","text":"\u79bb\u6563\u968f\u673a\u53d8\u91cfX\u670d\u4eceP(X), P(X)= \\begin{cases} 0.2, & \\text{X = 1} \\\\ 0.4, & \\text{X = 2} \\\\ 0.4, & \\text{X = 3} \\end{cases} \u79bb\u6563\u968f\u673a\u53d8\u91cfY\u670d\u4eceQ(Y), Q(X)= \\begin{cases} 0.2, & \\text{X = 1} \\\\ 0.4, & \\text{X = 2} \\\\ 0.4, & \\text{X = 3} \\end{cases} \u5219\u4eceP\u5230Q\u7684KL\u6563\u5ea6\u4e3a\uff1a D(P||Q)=0.2 \\times log(\\frac{0.2}{0.4}) + 0.4 \\times log(\\frac{0.4}{0.2}) + 0.4 \\times log(\\frac{0.4}{0.4}) = 0.138 \u5bf9\u4e8e\u79bb\u6563\u968f\u673a\u53d8\u91cf\uff0c\u8ba1\u7b97KL\u6563\u5ea6\u9700\u8981\u77e5\u9053\u968f\u673a\u53d8\u91cf\u7684\u53d6\u503c\u548c\u6982\u7387 $X=g(Z)$ \u4ece\u9690\u53d8\u91cfZ\u751f\u6210\u968f\u673a\u53d8\u91cfX\uff0c \u9690\u53d8\u91cfZ\u4e3an\u7ef4\u5411\u91cf\uff0c\u6bcf\u4e00\u7ef4\u5747\u670d\u4ece\u6807\u51c6\u6b63\u6001\u5206\u5e03\uff0c \u968f\u673a\u53d8\u91cfX\u4e3a\u6211\u4eec\u9700\u8981\u751f\u6210\u7684\u6570\u636e\uff0c\u4f8b\u5982\u56fe\u50cf\uff0c \u5982\u4f55\u5f97\u5230\u53d8\u6362\u51fd\u6570g\u4f7f\u5f97\u751f\u6210\u7684\u56fe\u50cfX\u548c\u771f\u5b9e\u56fe\u50cf\u5f88\u50cf\u5462\uff1f \u63cf\u8ff0\u751f\u6210\u7684\u56fe\u50cf\u662f\u5426\u4e0e\u771f\u5b9e\u56fe\u50cf\u5f88\u50cf\uff0c\u5176\u5b9e\u662f\u8bf4\u751f\u6210\u7684\u56fe\u50cf\u548c\u771f\u5b9e\u56fe\u50cf\u7684\u5206\u5e03\u662f\u5426\u4e00\u81f4\uff0c\u53ef\u4ee5\u901a\u8fc7KL\u6563\u5ea6\u6765\u63cf\u8ff0\uff0c \u4f46\u662f\u6211\u4eec\u65e0\u6cd5\u76f4\u63a5\u8ba1\u7b97KL\u6563\u5ea6\uff0c\u56e0\u4e3a\u56fe\u50cf\u771f\u5b9e\u5206\u5e03\u7684\u6982\u7387\u6211\u4eec\u65e0\u6cd5\u62ff\u5230\u3002 \u56fe\u50cf\u7528\u968f\u673a\u53d8\u91cfX\u6765\u8868\u8fbe\uff0c \u8bb0\u5176\u6982\u7387\u5206\u5e03\u4e3aP(X), P(X)\u7684\u8868\u8fbe\u5f0f\u73b0\u5728\u672a\u77e5\uff0c\u5426\u5219\u6211\u4eec\u76f4\u63a5\u53ef\u4ee5\u7531\u8868\u8fbe\u5f0f\u751f\u6210\u56fe\u50cf\uff0c \u6211\u4eec\u501f\u7528$P(X)=P(X|Z)P(Z)$ \u6765\u83b7\u5f97P(X), \u968f\u673a\u53d8\u91cfZ\u7684\u6982\u7387\u5206\u5e03P(Z)\u4e3a\u6807\u51c6\u6b63\u6001\u5206\u5e03\uff0c P\uff08X|Z) \u4e3aZ\u53d8\u6362\u5230X\u7684\u6982\u7387\u5206\u5e03, \u5bf9\u5e94vae\u4e2d\u7684\u751f\u6210\u5668 \u62df\u5408\u7684\u5206\u5e03$q(z|x_i)$\u548c\u771f\u5b9e\u7684\u5206\u5e03$p(z|x_i)$\u7684\u5dee\u8ddd\u5982\u4f55\u8861\u91cf\uff1f \\begin{aligned}&KL\\Big(N(\\mu,\\sigma^2)\\Big\\Vert N(0,1)\\Big)\\\\ =&\\int \\frac{1}{\\sqrt{2\\pi\\sigma^2}}e^{-(x-\\mu)^2/2\\sigma^2} \\left(\\log \\frac{e^{-(x-\\mu)^2/2\\sigma^2}/\\sqrt{2\\pi\\sigma^2}}{e^{-x^2/2}/\\sqrt{2\\pi}}\\right)dx\\\\ =&\\int \\frac{1}{\\sqrt{2\\pi\\sigma^2}}e^{-(x-\\mu)^2/2\\sigma^2} \\log \\left\\{\\frac{1}{\\sqrt{\\sigma^2}}\\exp\\left\\{\\frac{1}{2}\\big[x^2-(x-\\mu)^2/\\sigma^2\\big]\\right\\} \\right\\}dx\\\\ =&\\frac{1}{2}\\int \\frac{1}{\\sqrt{2\\pi\\sigma^2}}e^{-(x-\\mu)^2/2\\sigma^2} \\Big[-\\log \\sigma^2+x^2-(x-\\mu)^2/\\sigma^2 \\Big] dx\\end{aligned} \u5316\u7b80\u540e\u5f97\u5230\uff1a KL\\Big(N(\\mu,\\sigma^2)\\Big\\Vert N(0,1)\\Big)=\\frac{1}{2}\\Big(-\\log \\sigma^2+\\mu^2+\\sigma^2-1\\Big) $\\sigma^2 -\\log \\sigma^2 - 1$ \u53ef\u4ee5\u89c6\u4e3a\u8ba9$\\sigma^2$\u63a5\u8fd11\u7684\u635f\u5931\u51fd\u6570, \u50cf\u4e00\u4e2a\u5bf9\u53f7\u5f62\u72b6\u7684\u51fd\u6570 x = np.linspace(0.000001,20,100) y = x - np.log(x) - 1 plt.plot(x, y) $\\mu^2$ \u53ef\u4ee5\u89c6\u4e3a\u8ba9$\\mu$\u63a5\u8fd10\u7684\u635f\u5931\u51fd\u6570 p(x)\u4e3a\u6b63\u6001\u5206\u5e03 p(x)=\\frac{1}{\\sqrt{{2\\pi}}\\times\\sigma}e^{-\\frac{1}{2}(\\frac{x-\\mu}{\\sigma})^2} \u90a3\u4e48logp(x)\u4e3a\uff1a logp(x)=-\\frac{1}{2} \\big[ (\\frac{x-\\mu}{\\sigma})^2+ \\log \\sigma^2+\\log 2\\pi\\big]","title":"KL \u6563\u5ea6\u7684\u8ba1\u7b97"},{"location":"Machine_Learning/2018-11-22-vae/#_2","text":"cvae def reparameterize(self, mean, logvar): eps = tf.random_normal(shape=mean.shape) return eps * tf.exp(logvar * .5) + mean eps \u4e3a\u6807\u51c6\u6b63\u6001\u5206\u5e03\u91c7\u6837\uff0c \u7136\u540e\u6839\u636e\u5747\u503c\u548c\u65b9\u5dee\u53d8\u6362\u6210\u65b0\u7684\u6b63\u6001\u5206\u5e03 \u5747\u503c\u4e3a\u03bc\uff0c\u65b9\u5dee\u4e3a\u03c3\u7684\u6b63\u6001\u5206\u5e03Z\u53d8\u6362\u4e3a\u6807\u51c6\u6b63\u6001\u5206\u5e03X\uff0c\u53d8\u6362\u516c\u5f0f\u5982\u4e0b\uff1a $X=\\frac{Z - \u03bc}{\u03c3}$ ; \u6807\u51c6\u6b63\u6001\u5206\u5e03X\u53d8\u6362\u4e3a\u5747\u503c\u4e3a\u03bc\uff0c\u65b9\u5dee\u4e3a\u03c3\u7684\u6b63\u6001\u5206\u5e03Z\uff0c\u53d8\u6362\u516c\u5f0f\u5982\u4e0b\uff1a $Z=X*\u03c3 + \u03bc$ def log_normal_pdf(sample, mean, logvar, raxis=1): log2pi = tf.log(2. * np.pi) return tf.reduce_sum( -.5 * ((sample - mean) ** 2. * tf.exp(-logvar) + logvar + log2pi), axis=raxis) def compute_loss(model, x): mean, logvar = model.encode(x) z = model.reparameterize(mean, logvar) x_logit = model.decode(z) cross_ent = tf.nn.sigmoid_cross_entropy_with_logits(logits=x_logit, labels=x) logpx_z = -tf.reduce_sum(cross_ent, axis=[1, 2, 3]) logpz = log_normal_pdf(z, 0., 0.) logqz_x = log_normal_pdf(z, mean, logvar) return -tf.reduce_mean(logpx_z + logpz - logqz_x) model.encode\u65b9\u6cd5\u5c06\u8f93\u5165\u56fe\u50cfx(batch_size, image_height, image_width, 1)\u53d8\u6362\u6210\u4e24\u4e2a\u5411\u91cfmean(batch_size,latent_dim)\u548clogvar(batch_size, latent_dim)\uff0c \u751f\u6210logvar\u800c\u4e0d\u662fvar\u662f\u4e3a\u4e86\u6570\u503c\u7a33\u5b9a\u6027\uff0c\u6bcf\u5e45\u56fe\u50cf\u90fd\u5bf9\u5e94\u4e00\u4e2a\u79c1\u6709\u7684mean\u548clogvar\u5411\u91cf model.reparameterize\u6839\u636emean\u548clogvar\u5206\u5e03\u53c2\u6570\uff0c\u6765\u91c7\u6837\u751f\u6210\u5411\u91cfz(batch_size, latent_dim), \u91c7\u6837\u662f\u4e3a\u4e86\u8fdb\u884c\u8499\u7279\u5361\u6d1b\u4f30\u8ba1 model.decode\u65b9\u6cd5\u5c06\u5411\u91cfz\u53d8\u6362\u4e3a\u91cd\u5efa\u56fe\u50cfx_logit(\u8fd8\u672a\u7ecf\u8fc7sigmoid) log_normal_pdf normal\u6307\u6b63\u6001\u5206\u5e03\uff0cpdf\u6307\u6982\u7387\u5bc6\u5ea6\u51fd\u6570\uff0clog_normal_pdf\u4e3a\u6982\u7387\u5bc6\u5ea6\u51fd\u6570\u53d6\u5bf9\u6570\uff0c\u7ed3\u679c\u4ecd\u7136\u662f\u4e2a\u51fd\u6570 z\u4e3a\u5747\u503c\u4e3amean\uff0c\u65b9\u5dee\u7684\u5bf9\u6570\u4e3alogvar\u7684\u91c7\u6837\u6837\u672c logpx_z\u4e3a $logP(X|Z)$\u7684\u91c7\u6837, \u56e0\u4e3a\u73b0\u5728X\u4e3a\u4e8c\u503c\u56fe\u50cf,\u670d\u4ece\u4f2f\u52aa\u5229\u5206\u5e03\uff0c\u6240\u4ee5\u8ba1\u7b97\u4ea4\u53c9\u71b5\u635f\u5931\u7684cross_ent\u8d1f\u6570\uff0c\u5982\u679c\u56fe\u50cf\u4e3a\u5b9e\u503c\uff0c\u5219\u8ba1\u7b97\u5e73\u65b9\u635f\u5931mse logpz\u4e3a $logP(Z)$ \u7684\u91c7\u6837\uff0c p(Z)\u4e3a\u6807\u51c6\u6b63\u6001\u5206\u5e03\uff0c\u56e0\u6b64mean=0,logvar=0 logqz_x\u4e3a $logQ(Z|X)$\u7684\u91c7\u6837, Q(Z|X)\u4e3a\u6b63\u6001\u5206\u5e03 logpz - logqz_x \u7684\u671f\u671b\u53ef\u4ee5\u4e0d\u901a\u8fc7\u91c7\u6837\u6765\u8fdb\u884c\u8ba1\u7b97\uff0c\u800c\u662f\u76f4\u63a5\u4f7f\u7528\u89e3\u6790\u89e3\u8fdb\u884c\u8ba1\u7b97 \u4ea4\u53c9\u71b5\u635f\u5931\u4e3a\uff1a$\\sum_{k=1}^D \\Big[- x_{(k)} \\ln \\rho_{(k)}(z) - (1-x_{(k)}) \\ln \\Big(1 -\\rho_{(k)}(z)\\Big)\\Big]$ \u5bf9\u6570\u4f3c\u7136\u4e3a\uff1a$\\ln p(x|z) = \\sum_{k=1}^D \\Big[ x_{(k)} \\ln \\rho_{(k)}(z) + (1-x_{(k)}) \\ln \\Big(1 -\\rho_{(k)}(z)\\Big)\\Big]$\u5373\u4ea4\u53c9\u71b5\u7684\u8d1f\u6570 \u76f4\u63a5\u4f7f\u7528\u89e3\u6790\u89e3\u6c42\u89e3logpz\u548clogpz_x\u7684\u671f\u671b\uff0c \u548c\u4e0a\u8fb9\u7684\u533a\u522b\u662f\u516c\u5f0f\u4e0d\u540c\uff0c\u6ca1\u6709\u4f7f\u7528\u91c7\u6837\u70b9z def compute_loss(model, x): mean, logvar = model.encode(x) z = model.reparameterize(mean, logvar) x_logit = model.decode(z) cross_ent = tf.nn.sigmoid_cross_entropy_with_logits(logits=x_logit, labels=x) logpx_z = -tf.reduce_sum(cross_ent, axis=[1, 2, 3]) logpz = tf.reduce_sum(-0.5*(tf.log(2. * np.pi) - 1 - logvar), axis=1) logqz_x = tf.reduce_sum(-0.5*(tf.log(2. * np.pi) - tf.square(mean) - tf.exp(logvar)), axis=1) return -tf.reduce_mean(logpx_z + logpz - logqz_x) KL\\Big(p(x)\\Big\\Vert q(x)\\Big) = \\int p(x)\\ln \\frac{p(x)}{q(x)} dx=\\mathbb{E}_{x\\sim p(x)}\\left[\\ln \\frac{p(x)}{q(x)}\\right]\\tag{5} \u8054\u5408\u5206\u5e03\u7684KL\u6563\u5ea6: $p(x,z)=\\tilde{p}(x)p(z|x)$ \\begin{aligned} KL\\Big(p(x,z)\\Big\\Vert q(x,z)\\Big) =& \\iint p(x,z)\\ln \\frac{p(x,z)}{q(x,z)} dxdz \\\\ =& \\int \\tilde{p}(x) \\left[\\int p(z|x)\\ln \\frac{\\tilde{p}(x)p(z|x)}{q(x,z)} dz\\right]dx\\\\ =& \\mathbb{E}_{x\\sim \\tilde{p}(x)} \\left[\\int p(z|x)\\ln \\frac{\\tilde{p}(x)p(z|x)}{q(x,z)} dz\\right] \\\\ =& \\mathbb{E}_{x\\sim \\tilde{p}(x)} \\left[\\ln \\tilde{p}(x)\\int p(z|x)dz + \\int p(z|x) \\ln p(z|x)dz - \\int p(z|x) \\ln q(x,z)dz \\right]\\\\ \\end{aligned}","title":"\u4ee3\u7801\u5b9e\u9a8c"},{"location":"Machine_Learning/2018-11-27-unsupervised learning/","text":"Unsupervised Deep Embedding for Clustering Analysis (DEC mnist acc:84.3%) Variational Deep Embedding:An Unsupervised and Generative Approach toClustering (VaDE mnist acc:94.46%)","title":"Unsupervised Clustering"},{"location":"Machine_Learning/2018-12-03-tensorflow_test/","text":"import tensorflow as tf x = tf.Variable(0.0) y = tf.constant(1.0) loss = y-x opt_op = tf.train.GradientDescentOptimizer(learning_rate=0.1) train_op = opt_op.minimize(loss) with tf.Session() as sess: sess.run(tf.global_variables_initializer()) for i in range(10): _, loss, x = sess.run([train_op, loss, x]) print(\"step:{}, loss:{}, x:{}\".format(i, loss, x))","title":"tensorflow test"},{"location":"Machine_Learning/2018-12-05-vade/","text":"\u9ad8\u65af\u6df7\u5408\u6a21\u578bGMM \u9ad8\u65af\u5206\u5e03\u5305\u62ec\u4e00\u5143\u9ad8\u65af\u5206\u5e03\u548c\u591a\u5143\u9ad8\u65af\u5206\u5e03 \u9ad8\u65af\u6df7\u5408\u6a21\u578b\u6307\u591a\u4e2a\u9ad8\u65af\u5206\u5e03\u7684\u7ec4\u5408 \u9ad8\u65af\u6df7\u5408\u5206\u5e03\u6d89\u53ca\u7684\u53c2\u6570: 1. \u9ad8\u65af\u5206\u5e03\u4e2dx\u7684\u7ef4\u5ea6\uff0c 2. \u591a\u5c11\u4e2a\u9ad8\u65af\u5206\u5e03 \u5229\u7528\u9ad8\u65af\u6df7\u5408\u6a21\u578b\uff0c\u4e3a\u67d0\u4e2a\u7c7b\u522b\u751f\u6210\u6570\u636e 1. \u9009\u62e9\u4e00\u4e2a\u7c7b\u522bc\uff0c \u9009\u4e2d\u7b2cc\u4e2a\u9ad8\u65af\u5206\u5e03$N(\\mu_c, \\sigma^2_c)$ 2. \u7528\u8be5\u591a\u5143\u9ad8\u65af\u5206\u5e03$N(\\mu_c, \\sigma^2_c)$\u91c7\u6837\u751f\u6210\u6f5c\u5728\u53d8\u91cfz\uff0c \u8ba1\u7b97\u8be5\u6f5c\u5728\u53d8\u91cf\u5c5e\u4e8e\u8be5\u7c7b\u522b\u7684\u540e\u9a8c\u6982\u7387\uff0c \u82e5\u6982\u7387\u4e0d\u591f\u5927\uff0c\u53ef\u4ee5\u91cd\u590d\u6b64\u6b65\u9aa4 3. \u4f7f\u7528z\u5e26\u5165\u5230\u751f\u6210\u6a21\u578b(\u89e3\u7801\u5668)\u4e2d\u5f97\u5230\u6837\u672cx\uff0c \u8be5\u6837\u672c\u5c5e\u4e8e\u7c7b\u522bc\u7684\u6982\u7387\u5373\u6b65\u9aa4\u4e8c\u4e2d\u7684\u540e\u9a8c\u6982\u7387 z_mean, z_logvar = model.encode(x) z = model.reparameterize(z_mean, z_logvar) \u83b7\u53d6vae\u7684\u9690\u53d8\u91cfz\uff0c vae\u7684\u9690\u53d8\u91cfz\u662f\u9ad8\u65af\u6df7\u5408\u6a21\u578b\u4e2d\u7684x\uff0c \u8ba1\u7b97\u9690\u53d8\u91cfz\u5c5e\u4e8e\u5404\u4e2a\u7c7b\u7684\u6982\u7387 p_c_z = tf.exp(tf.reduce_sum(tf.log(theta_p) - 0.5 * tf.log(2 * np.pi * c_var) - tf.square(z - c_mean)/(2 * c_var), axis=1) ) + 1e-10 # (batch_size, n_centroid) q_c_x = p_c_z/tf.reduce_sum(p_c_z, axis=-1, keepdims=True) #(batch_size, n_centroid) p_c_z\u7684\u8ba1\u7b97\uff0c \u5c06z\u5e26\u5165\u5230\u9ad8\u65af\u6df7\u5408\u6a21\u578b\u4e2d\uff0c \u9ad8\u65af\u6df7\u5408\u6a21\u578b\u4e2d\u7684\u6bcf\u4e2a\u591a\u5143\u9ad8\u65af\u5206\u5e03\u8fd9\u91cc\u662f\u6309\u7167\u5404\u7ef4\u5ea6\u4e0d\u76f8\u5173\u8fdb\u884c\u8ba1\u7b97\u7684(\u53d8\u6210\u6982\u7387\u4e58\u79ef\uff0c\u5728exp\u91cc\u53d8\u6210\u6c42\u548c)\uff0c \u628atheta_p\u5373\u9ad8\u65af\u6df7\u5408\u6a21\u578b\u4e2d\u6bcf\u4e2a\u9ad8\u65af\u5206\u5e03\u524d\u7684\u7cfb\u6570\u63d0\u5230exp\u91cc\u8fdb\u884c\u8ba1\u7b97\u3002 \\begin{aligned} f(x) &=\\theta*\\frac{1}{\\sqrt{{2\\pi}}\\times\\sigma}e^{\\frac{1}{2}(\\frac{x-\\mu}{\\sigma})^2} \\\\ &= e^{\\Big[log\\theta - log(\\sqrt{{2\\pi}}\\times\\sigma) - \\frac{1}{2}(\\frac{x-\\mu}{\\sigma})^2 \\Big]} \\end{aligned} q_c_x: shape\u4e3a(batch_size, n_centroid)\uff0c \u6bcf\u4e2a\u6837\u672cx\u5c5e\u4e8e\u5404\u4e2a\u7c7b\u7684\u6982\u7387\uff0c z\uff1a shape\u4e3a(batch_size, latent_dim, n_centroid) c_mean: shape\u4e3a(batch_size, latent_dim, n_centroid) \u591a\u5143\u9ad8\u65af\u5206\u5e03\u63a8\u5bfc\u548c\u8ba1\u7b97\uff1a https://zhuanlan.zhihu.com/p/36522776 vae \\begin{aligned} ELBO &=\\mathcal{L} \\\\ &= E_{q(z|x^{(i)})} \\big[ \\log p(x^{(i)} \\vert z) \\big] \\\\ &+ E_{q(z|x^{(i)})} \\big[ \\log p(z) \\big] \\\\ &- E_{q(z|x^{(i)})} \\big[ \\log q(z |x^{(i)}) \\big] \\end{aligned} vade \\begin{aligned} ELBO &=\\mathcal{L} \\\\ &= E_{q(z,c|x^{(i)})} \\big[ \\log p(x^{(i)} \\vert z) \\big] \\\\ &+ E_{q(z,c|x^{(i)})} \\big[ \\log p(z|c) \\big] \\\\ &+ E_{q(z,c|x^{(i)})} \\big[ \\log p(c) \\big] \\\\ &- E_{q(z,c|x^{(i)})} \\big[ \\log q(z|x^{(i)}) \\big] \\\\ &- E_{q(z,c|x^{(i)})} \\big[ \\log q(c|x^{(i)}) \\big] \\\\ \\end{aligned} $q(c|x^{(i)})$ \u6c42\u89e3 q(c|x) = E_{q(z|x^{(i)})}[p(c|z])] $E_{q(z,c|x^{(i)})} \\big[ \\log p(z|c) \\big]$\u6c42\u89e3 \\begin{aligned} E_{q(z,c|x^{(i)})} \\big[ \\log p(z|c) \\big] &= \\int \\sum_{c=1}^{K} q(c|x)q(z|x) \\log p(z|c)dz \\\\ &= \\sum_{c=1}^{K} [q(c|x) \\int q(z|x) \\log p(z|c)dz] \\\\ &= \\end{aligned} $E_{q(z,c|x^{(i)})} \\big[ \\log p(c) \\big]$\u6c42\u89e3 \\begin{aligned} E_{q(z,c|x^{(i)})} \\big[ \\log p(z|c) \\big] &= \\int \\sum_{c=1}^{K} q(z|x)q(c|x) \\log p(c)dz \\\\ &= \\int q(z|x) \\sum_{c=1}^{K} \\big[q(c|x) \\log p(c)]dz \\\\ &= \\sum_{c=1}^{K} \\big[q(c|x) \\log p(c)] \\end{aligned}","title":"vade"},{"location":"Machine_Learning/2018-12-05-vade/#gmm","text":"\u9ad8\u65af\u5206\u5e03\u5305\u62ec\u4e00\u5143\u9ad8\u65af\u5206\u5e03\u548c\u591a\u5143\u9ad8\u65af\u5206\u5e03 \u9ad8\u65af\u6df7\u5408\u6a21\u578b\u6307\u591a\u4e2a\u9ad8\u65af\u5206\u5e03\u7684\u7ec4\u5408 \u9ad8\u65af\u6df7\u5408\u5206\u5e03\u6d89\u53ca\u7684\u53c2\u6570: 1. \u9ad8\u65af\u5206\u5e03\u4e2dx\u7684\u7ef4\u5ea6\uff0c 2. \u591a\u5c11\u4e2a\u9ad8\u65af\u5206\u5e03 \u5229\u7528\u9ad8\u65af\u6df7\u5408\u6a21\u578b\uff0c\u4e3a\u67d0\u4e2a\u7c7b\u522b\u751f\u6210\u6570\u636e 1. \u9009\u62e9\u4e00\u4e2a\u7c7b\u522bc\uff0c \u9009\u4e2d\u7b2cc\u4e2a\u9ad8\u65af\u5206\u5e03$N(\\mu_c, \\sigma^2_c)$ 2. \u7528\u8be5\u591a\u5143\u9ad8\u65af\u5206\u5e03$N(\\mu_c, \\sigma^2_c)$\u91c7\u6837\u751f\u6210\u6f5c\u5728\u53d8\u91cfz\uff0c \u8ba1\u7b97\u8be5\u6f5c\u5728\u53d8\u91cf\u5c5e\u4e8e\u8be5\u7c7b\u522b\u7684\u540e\u9a8c\u6982\u7387\uff0c \u82e5\u6982\u7387\u4e0d\u591f\u5927\uff0c\u53ef\u4ee5\u91cd\u590d\u6b64\u6b65\u9aa4 3. \u4f7f\u7528z\u5e26\u5165\u5230\u751f\u6210\u6a21\u578b(\u89e3\u7801\u5668)\u4e2d\u5f97\u5230\u6837\u672cx\uff0c \u8be5\u6837\u672c\u5c5e\u4e8e\u7c7b\u522bc\u7684\u6982\u7387\u5373\u6b65\u9aa4\u4e8c\u4e2d\u7684\u540e\u9a8c\u6982\u7387 z_mean, z_logvar = model.encode(x) z = model.reparameterize(z_mean, z_logvar) \u83b7\u53d6vae\u7684\u9690\u53d8\u91cfz\uff0c vae\u7684\u9690\u53d8\u91cfz\u662f\u9ad8\u65af\u6df7\u5408\u6a21\u578b\u4e2d\u7684x\uff0c \u8ba1\u7b97\u9690\u53d8\u91cfz\u5c5e\u4e8e\u5404\u4e2a\u7c7b\u7684\u6982\u7387 p_c_z = tf.exp(tf.reduce_sum(tf.log(theta_p) - 0.5 * tf.log(2 * np.pi * c_var) - tf.square(z - c_mean)/(2 * c_var), axis=1) ) + 1e-10 # (batch_size, n_centroid) q_c_x = p_c_z/tf.reduce_sum(p_c_z, axis=-1, keepdims=True) #(batch_size, n_centroid) p_c_z\u7684\u8ba1\u7b97\uff0c \u5c06z\u5e26\u5165\u5230\u9ad8\u65af\u6df7\u5408\u6a21\u578b\u4e2d\uff0c \u9ad8\u65af\u6df7\u5408\u6a21\u578b\u4e2d\u7684\u6bcf\u4e2a\u591a\u5143\u9ad8\u65af\u5206\u5e03\u8fd9\u91cc\u662f\u6309\u7167\u5404\u7ef4\u5ea6\u4e0d\u76f8\u5173\u8fdb\u884c\u8ba1\u7b97\u7684(\u53d8\u6210\u6982\u7387\u4e58\u79ef\uff0c\u5728exp\u91cc\u53d8\u6210\u6c42\u548c)\uff0c \u628atheta_p\u5373\u9ad8\u65af\u6df7\u5408\u6a21\u578b\u4e2d\u6bcf\u4e2a\u9ad8\u65af\u5206\u5e03\u524d\u7684\u7cfb\u6570\u63d0\u5230exp\u91cc\u8fdb\u884c\u8ba1\u7b97\u3002 \\begin{aligned} f(x) &=\\theta*\\frac{1}{\\sqrt{{2\\pi}}\\times\\sigma}e^{\\frac{1}{2}(\\frac{x-\\mu}{\\sigma})^2} \\\\ &= e^{\\Big[log\\theta - log(\\sqrt{{2\\pi}}\\times\\sigma) - \\frac{1}{2}(\\frac{x-\\mu}{\\sigma})^2 \\Big]} \\end{aligned} q_c_x: shape\u4e3a(batch_size, n_centroid)\uff0c \u6bcf\u4e2a\u6837\u672cx\u5c5e\u4e8e\u5404\u4e2a\u7c7b\u7684\u6982\u7387\uff0c z\uff1a shape\u4e3a(batch_size, latent_dim, n_centroid) c_mean: shape\u4e3a(batch_size, latent_dim, n_centroid) \u591a\u5143\u9ad8\u65af\u5206\u5e03\u63a8\u5bfc\u548c\u8ba1\u7b97\uff1a https://zhuanlan.zhihu.com/p/36522776 vae \\begin{aligned} ELBO &=\\mathcal{L} \\\\ &= E_{q(z|x^{(i)})} \\big[ \\log p(x^{(i)} \\vert z) \\big] \\\\ &+ E_{q(z|x^{(i)})} \\big[ \\log p(z) \\big] \\\\ &- E_{q(z|x^{(i)})} \\big[ \\log q(z |x^{(i)}) \\big] \\end{aligned} vade \\begin{aligned} ELBO &=\\mathcal{L} \\\\ &= E_{q(z,c|x^{(i)})} \\big[ \\log p(x^{(i)} \\vert z) \\big] \\\\ &+ E_{q(z,c|x^{(i)})} \\big[ \\log p(z|c) \\big] \\\\ &+ E_{q(z,c|x^{(i)})} \\big[ \\log p(c) \\big] \\\\ &- E_{q(z,c|x^{(i)})} \\big[ \\log q(z|x^{(i)}) \\big] \\\\ &- E_{q(z,c|x^{(i)})} \\big[ \\log q(c|x^{(i)}) \\big] \\\\ \\end{aligned} $q(c|x^{(i)})$ \u6c42\u89e3 q(c|x) = E_{q(z|x^{(i)})}[p(c|z])] $E_{q(z,c|x^{(i)})} \\big[ \\log p(z|c) \\big]$\u6c42\u89e3 \\begin{aligned} E_{q(z,c|x^{(i)})} \\big[ \\log p(z|c) \\big] &= \\int \\sum_{c=1}^{K} q(c|x)q(z|x) \\log p(z|c)dz \\\\ &= \\sum_{c=1}^{K} [q(c|x) \\int q(z|x) \\log p(z|c)dz] \\\\ &= \\end{aligned} $E_{q(z,c|x^{(i)})} \\big[ \\log p(c) \\big]$\u6c42\u89e3 \\begin{aligned} E_{q(z,c|x^{(i)})} \\big[ \\log p(z|c) \\big] &= \\int \\sum_{c=1}^{K} q(z|x)q(c|x) \\log p(c)dz \\\\ &= \\int q(z|x) \\sum_{c=1}^{K} \\big[q(c|x) \\log p(c)]dz \\\\ &= \\sum_{c=1}^{K} \\big[q(c|x) \\log p(c)] \\end{aligned}","title":"\u9ad8\u65af\u6df7\u5408\u6a21\u578bGMM"},{"location":"Machine_Learning/2019-03-01-data input/","text":"Date Input \u6309\u5217\u8f93\u5165","title":"data input"},{"location":"Machine_Learning/2019-03-01-data input/#date-input","text":"\u6309\u5217\u8f93\u5165","title":"Date Input"},{"location":"Machine_Learning/2019-06-20-tensorflow/","text":"layout: post title: \"tensorflow\" subtitle: \"tensorflow\" date: 2019-06-20 15:58:24 author: \"none\" header-img: \"img/posts/default_post.jpg\" catalog: true tags: - tag REGISTER_OP REGISTER_OP \u672c\u8d28\u5b9a\u4e49\u4e86\u4e00\u4e2a::tensorflow::register_op::OpDefBuilderReceiver\u7c7b\u7684\u5bf9\u8c61\uff0c \u8fd9\u4e2a\u5bf9\u8c61\u662f\u4e00\u4e2a\u5168\u5c40\u53d8\u91cf\uff0c\u8be5\u5bf9\u8c61\u7684\u6784\u9020\u53c2\u6570\u4e3a\u4e00\u4e2a\u6a21\u677f\u7c7b::tensorflow::register_op::OpDefBuilderWrapper \u751f\u6210\u7684\u5bf9\u8c61\uff0c REGISTER_OP \u6700\u7ec8\u751f\u6210\u4e86\u4e24\u4e2a\u5bf9\u8c61\uff0c\u5206\u522b\u4e3aOpDefBuilderReceiver\u7c7b\u548cOpDefBuilderWrapper\u6a21\u677f\u7c7b\u7684\u5bf9\u8c61\uff0cOpDefBuilderReceiver\u7c7b\u5728\u8d4b\u503c\u7b26\u53f7(=)\u7684\u53f3\u8fb9\uff0cOpDefBuilderWrapper\u6a21\u677f\u7c7b\u5bf9\u8c61\u5728\u8d4b\u503c\u7b26\u53f7(=)\u7684\u5de6\u8fb9\uff0c REGISTER_OP\u5b8f\u540e\u53ef\u4ee5\u7ee7\u7eed\u8c03\u7528OpDefBuilderWrapper\u6a21\u677f\u7c7b\u7684\u65b9\u6cd5\uff0c\u5982Input\uff0cAttr\u7b49 tensorflow\\core\\framework\\op.h #define REGISTER_OP(name) REGISTER_OP_UNIQ_HELPER(__COUNTER__, name) #define REGISTER_OP_UNIQ_HELPER(ctr, name) REGISTER_OP_UNIQ(ctr, name) #define REGISTER_OP_UNIQ(ctr, name) \\ static ::tensorflow::register_op::OpDefBuilderReceiver register_op##ctr \\ TF_ATTRIBUTE_UNUSED = \\ ::tensorflow::register_op::OpDefBuilderWrapper<SHOULD_REGISTER_OP( \\ name)>(name) TF_ATTRIBUTE_UNUSED \u4fee\u9970\u53d8\u91cf\uff0c\u5f53\u53d8\u91cf\u672a\u88ab\u4f7f\u7528\u65f6\uff0c\u7f16\u8bd1\u5668\u4e0d\u9700\u8981\u7ed9\u51fa\u8b66\u544a\u4fe1\u606f tensorflow\\core\\platform\\macros.h #if (defined(__GNUC__) || defined(__APPLE__)) && !defined(SWIG) #define TF_ATTRIBUTE_UNUSED __attribute__((unused)) #elif defined(_MSC_VER) #define TF_ATTRIBUTE_UNUSED OpDefBuilderReceiver ::tensorflow::register_op::OpDefBuilderReceiver \u7c7b\u5bf9\u8c61\u5728\u6784\u9020\u65f6\uff0c\u4f1a\u8c03\u7528OpRegistry::Global() \u83b7\u53d6\u5230\u4e00\u4e2aOpRegistry\u7c7b\u5bf9\u8c61\u7684\u6307\u9488, \u7136\u540e\u8c03\u7528\u5176Register\u65b9\u6cd5\u3002OpRegistry\u7c7b\u5bf9\u8c61\u8d1f\u8d23\u6536\u96c6\u6240\u6709\u6ce8\u518c\u7684op tensorflow\\core\\framework\\op.h struct OpDefBuilderReceiver { // To call OpRegistry::Global()->Register(...), used by the // REGISTER_OP macro below. // Note: These are implicitly converting constructors. OpDefBuilderReceiver( const OpDefBuilderWrapper<true>& wrapper); // NOLINT(runtime/explicit) constexpr OpDefBuilderReceiver(const OpDefBuilderWrapper<false>&) { } // NOLINT(runtime/explicit) }; tensorflow\\core\\framework\\op.cc namespace register_op { OpDefBuilderReceiver::OpDefBuilderReceiver( const OpDefBuilderWrapper<true>& wrapper) { OpRegistry::Global()->Register( [wrapper](OpRegistrationData* op_reg_data) -> Status { return wrapper.builder().Finalize(op_reg_data); }); } } // namespace register_op OpDefBuilderWrapper OpDefBuilderWrapper\u662f\u4e00\u4e2a\u6a21\u677f\u7c7b\uff0c\u5176\u6a21\u677f\u53c2\u6570\u4e3atrue\u6216false\uff0c \u901a\u8fc7\u6a21\u677f\u53c2\u6570\u6765\u63a7\u5236op\u662f\u5426\u8fdb\u884c\u6ce8\u518c tensorflow\\core\\framework\\op.h // Template specialization that forwards all calls to the contained builder. template <> class OpDefBuilderWrapper<true> { public: explicit OpDefBuilderWrapper(const char name[]) : builder_(name) {} OpDefBuilderWrapper<true>& Attr(string spec) { builder_.Attr(std::move(spec)); return *this; } OpDefBuilderWrapper<true>& Input(string spec) { builder_.Input(std::move(spec)); return *this; } OpDefBuilderWrapper<true>& Output(string spec) { builder_.Output(std::move(spec)); return *this; } OpDefBuilderWrapper<true>& SetIsCommutative() { builder_.SetIsCommutative(); return *this; } OpDefBuilderWrapper<true>& SetIsAggregate() { builder_.SetIsAggregate(); return *this; } OpDefBuilderWrapper<true>& SetIsStateful() { builder_.SetIsStateful(); return *this; } OpDefBuilderWrapper<true>& SetAllowsUninitializedInput() { builder_.SetAllowsUninitializedInput(); return *this; } OpDefBuilderWrapper<true>& Deprecated(int version, string explanation) { builder_.Deprecated(version, std::move(explanation)); return *this; } OpDefBuilderWrapper<true>& Doc(string text) { builder_.Doc(std::move(text)); return *this; } OpDefBuilderWrapper<true>& SetShapeFn( Status (*fn)(shape_inference::InferenceContext*)) { builder_.SetShapeFn(fn); return *this; } const ::tensorflow::OpDefBuilder& builder() const { return builder_; } private: mutable ::tensorflow::OpDefBuilder builder_; }; OpDefBuilder REGISTER_OP().Input().Attr() \u8c03\u7528\u8fc7\u7a0b\u4e2dInput\uff0cAttr\u7b49\u51fd\u6570\u7684\u53c2\u6570\u7531OpDefBuilder\u7c7b\u5bf9\u8c61\u8d1f\u8d23\u5b58\u50a8\uff0c \u6bcf\u4e2aOpDefBuilder\u7c7b\u5bf9\u8c61\u5305\u542b\u4e00\u4e2aOpRegistrationData\u5bf9\u8c61\uff0c\u8c03\u7528REGISTER_OP().SetShapeFn()\u65f6\u4f1a\u66f4\u65b0OpShapeInferenceFn\u5230OpRegistrationData\u5bf9\u8c61\u4e2d\uff0c \u8fd9\u4e2a\u6570\u636e\u4f1a\u5728\u968f\u540e OpDefBuilder\u7c7b\u7684Finalize\u65b9\u6cd5\u8c03\u7528\u65f6\u4f1a\u901a\u8fc7\u53c2\u6570\u6307\u9488\u7684\u65b9\u5f0f\u62f7\u8d1dOpRegistrationData\u4e2d\u7684\u6570\u636e\u5230\u5916\u90e8 tensorflow\\core\\framework\\op_def_builder.h // Builder class passed to the REGISTER_OP() macro. class OpDefBuilder { public: // Constructs an OpDef with just the name field set. explicit OpDefBuilder(string op_name); // Adds an attr to this OpDefBuilder (and returns *this). The spec has // format \"<name>:<type>\" or \"<name>:<type>=<default>\" // where <name> matches regexp [a-zA-Z][a-zA-Z0-9_]* // (by convention only using capital letters for attrs that can be inferred) // <type> can be: // \"string\", \"int\", \"float\", \"bool\", \"type\", \"shape\", or \"tensor\" // \"numbertype\", \"realnumbertype\", \"quantizedtype\" // (meaning \"type\" with a restriction on valid values) // \"{int32,int64}\" or {realnumbertype,quantizedtype,string}\" // (meaning \"type\" with a restriction containing unions of value types) // \"{\\\"foo\\\", \\\"bar\\n baz\\\"}\", or \"{'foo', 'bar\\n baz'}\" // (meaning \"string\" with a restriction on valid values) // \"list(string)\", ..., \"list(tensor)\", \"list(numbertype)\", ... // (meaning lists of the above types) // \"int >= 2\" (meaning \"int\" with a restriction on valid values) // \"list(string) >= 2\", \"list(int) >= 2\" // (meaning \"list(string)\" / \"list(int)\" with length at least 2) // <default>, if included, should use the Proto text format // of <type>. For lists use [a, b, c] format. // // Note that any attr specifying the length of an input or output will // get a default minimum of 1 unless the >= # syntax is used. // // TODO(josh11b): Perhaps support restrictions and defaults as optional // extra arguments to Attr() instead of encoding them in the spec string. // TODO(josh11b): Would like to have better dtype handling for tensor attrs: // * Ability to say the type of an input/output matches the type of // the tensor. // * Ability to restrict the type of the tensor like the existing // restrictions for type attrs. // Perhaps by linking the type of the tensor to a type attr? OpDefBuilder& Attr(string spec); // Adds an input or output to this OpDefBuilder (and returns *this). // The spec has form \"<name>:<type-expr>\" or \"<name>:Ref(<type-expr>)\" // where <name> matches regexp [a-z][a-z0-9_]* and <type-expr> can be: // * For a single tensor: <type> // * For a sequence of tensors with the same type: <number>*<type> // * For a sequence of tensors with different types: <type-list> // Where: // <type> is either one of \"float\", \"int32\", \"string\", ... // or the name of an attr (see above) with type \"type\". // <number> is the name of an attr with type \"int\". // <type-list> is the name of an attr with type \"list(type)\". // TODO(josh11b): Indicate Ref() via an optional argument instead of // in the spec? // TODO(josh11b): SparseInput() and SparseOutput() matching the Python // handling? OpDefBuilder& Input(string spec); OpDefBuilder& Output(string spec); // Turns on the indicated boolean flag in this OpDefBuilder (and // returns *this). OpDefBuilder& SetIsCommutative(); OpDefBuilder& SetIsAggregate(); OpDefBuilder& SetIsStateful(); OpDefBuilder& SetAllowsUninitializedInput(); // Deprecate the op at a certain GraphDef version. OpDefBuilder& Deprecated(int version, string explanation); // Adds docs to this OpDefBuilder (and returns *this). // Docs have the format: // <1-line summary> // <rest of the description> // <name>: <description of name> // <name>: <description of name> // <if long, indent the description on subsequent lines> // Where <name> is the name of an attr, input, or output. Please // wrap docs at 72 columns so that it may be indented in the // generated output. For tensor inputs or outputs (not attrs), you // may start the description with an \"=\" (like name:= <description>) // to suppress the automatically-generated type documentation in // generated output. #ifndef TF_LEAN_BINARY OpDefBuilder& Doc(string text); #else OpDefBuilder& Doc(string text) { return *this; } #endif // Sets the shape function to be used for shape inference. // // Note that currently (October 2016), python code still requires a // RegisterShape call to invoke this; see call_cpp_shape_fn in // python/framework/common_shapes.py OpDefBuilder& SetShapeFn(OpShapeInferenceFn fn); // Sets op_reg_data->op_def to the requested OpDef and // op_reg_data->shape_inference_fn to the requested shape inference function, // or returns an error. // Must be called after all of the above methods. // // Note that OpDefBuilder only reports parsing errors. You should also // call ValidateOpDef() to detect other problems. Status Finalize(OpRegistrationData* op_reg_data) const; private: friend class FunctionDefHelper; // Adds control output to this OpDefBuilder (and returns *this). // The <name> must be a valid node name (matches regexp // [a-zA-Z][a-zA-Z0-9_]*). Named control output can only exist for functions. OpDefBuilder& ControlOutput(string name); OpDef* op_def() { return &op_reg_data_.op_def; } OpRegistrationData op_reg_data_; std::vector<string> attrs_; std::vector<string> inputs_; std::vector<string> outputs_; std::vector<string> control_outputs_; string doc_; std::vector<string> errors_; }; OpRegistry OpRegistry\u7c7b\u7684Global\u65b9\u6cd5\uff0c\u4f7f\u7528singleton\u5355\u4f8b\u6a21\u5f0f\u521b\u5efa\u4e86\u4e00\u4e2aOpRegistry\u7c7b\u5bf9\u8c61 void OpRegistry::Register(const OpRegistrationDataFactory& op_data_factory) { mutex_lock lock(mu_); if (initialized_) { TF_QCHECK_OK(RegisterAlreadyLocked(op_data_factory)); } else { deferred_.push_back(op_data_factory); } } OpRegistry\u7c7b\u7684Register\u65b9\u6cd5\uff0c\u5176\u53c2\u6570\u4e3astd::function \u7c7b\u578b\uff0c\u6ce8\u518cOP\u65f6\u4f1a\u4f7f\u7528lambda\u51fd\u6570\u5305\u88f9OpDefBuilder\u7684Finalize\u65b9\u6cd5\u4f5c\u4e3aRegister\u65b9\u6cd5\u7684\u53c2\u6570 Status OpRegistry::RegisterAlreadyLocked( const OpRegistrationDataFactory& op_data_factory) const { std::unique_ptr<OpRegistrationData> op_reg_data(new OpRegistrationData); Status s = op_data_factory(op_reg_data.get()); if (s.ok()) { s = ValidateOpDef(op_reg_data->op_def); if (s.ok() && !gtl::InsertIfNotPresent(&registry_, op_reg_data->op_def.name(), op_reg_data.get())) { s = errors::AlreadyExists(\"Op with name \", op_reg_data->op_def.name()); } } Status watcher_status = s; if (watcher_) { watcher_status = watcher_(s, op_reg_data->op_def); } if (s.ok()) { op_reg_data.release(); } else { op_reg_data.reset(); } return watcher_status; } OpRegistry::Register\u7684\u65b9\u6cd5\u8c03\u7528\u65f6\u6216\u8005\u8c03\u7528\u540e\uff0c\u6700\u7ec8\u90fd\u4f1a\u8c03\u7528\u5230RegisterAlreadyLocked\u65b9\u6cd5\uff0c\u8be5\u4f1a\u5148\u6784\u9020\u4e00\u4e2aOpRegistrationData\uff0c \u7136\u540e\u5c06\u5176\u4f5c\u4e3a\u53c2\u6570\u8c03\u7528OpRegistry::Register\u63a5\u6536\u7684lambda\u51fd\u6570 \u8c03\u7528lambda\u51fd\u6570\uff0c\u5373\u8c03\u7528OpDefBuilder\u7684Finalize\u65b9\u6cd5\uff0c\u5728\u8be5\u65b9\u6cd5\u4e2d\uff0c 1) \u4f1a\u5c06OpDefBuilder\u7c7b\u5bf9\u8c61\u7684OpRegistrationData\u6210\u5458\u62f7\u8d1d\u7ed9OpRegistry::Register\u65b9\u6cd5\u4e2d\u7684OpRegistrationData\u5bf9\u8c61\uff08\u66f4\u65b0\u7684\u662f OpShapeInferenceFn), 2) \u7136\u540e\u8c03\u7528FinalizeAttr\uff0cFinalizeInputOrOutput\u7b49\u65b9\u6cd5\u66f4\u65b0OpDef\u7ed9OpRegistry::Register\u65b9\u6cd5\u4e2d\u7684OpRegistrationData\u5bf9\u8c61 // registry_ \u5b58\u50a8\u6ce8\u518c\u7684OP mutable std::unordered_map<string, const OpRegistrationData*> registry_ GUARDED_BY(mu_); // OpRegistry::RegisterAlreadyLocked\u65b9\u6cd5\u5411registry_\u4e2d\u63d2\u5165OP\u6570\u636e if (s.ok() && !gtl::InsertIfNotPresent(&registry_, op_reg_data->op_def.name(), op_reg_data.get())) { s = errors::AlreadyExists(\"Op with name \", op_reg_data->op_def.name()); } gtl::InsertIfNotPresent\u65b9\u6cd5\u4f1a\u5b8c\u6210\u6700\u7ec8\u7684\u6ce8\u518c typedef std::function<Status(const Status&, const OpDef&)> Watcher; \u5728\u68c0\u67e5OpDef\u6709\u6548\uff0c\u4e14\u8be5op\u6ca1\u6709\u6ce8\u518c\u540e\uff0c\u4f1a\u4ee5OpDef\u4e3a\u53c2\u6570\u8c03\u7528watcher_\u51fd\u6570 class OpRegistry : public OpRegistryInterface { public: typedef std::function<Status(OpRegistrationData*)> OpRegistrationDataFactory; void Register(const OpRegistrationDataFactory& op_data_factory); } tensorflow\\core\\framework\\op.h // Users that want to look up an OpDef by type name should take an // OpRegistryInterface. Functions accepting a // (const) OpRegistryInterface* may call LookUp() from multiple threads. class OpRegistryInterface { public: virtual ~OpRegistryInterface(); // Returns an error status and sets *op_reg_data to nullptr if no OpDef is // registered under that name, otherwise returns the registered OpDef. // Caller must not delete the returned pointer. virtual Status LookUp(const string& op_type_name, const OpRegistrationData** op_reg_data) const = 0; // Shorthand for calling LookUp to get the OpDef. Status LookUpOpDef(const string& op_type_name, const OpDef** op_def) const; }; // The standard implementation of OpRegistryInterface, along with a // global singleton used for registering ops via the REGISTER // macros below. Thread-safe. // // Example registration: // OpRegistry::Global()->Register( // [](OpRegistrationData* op_reg_data)->Status { // // Populate *op_reg_data here. // return Status::OK(); // }); class OpRegistry : public OpRegistryInterface { public: typedef std::function<Status(OpRegistrationData*)> OpRegistrationDataFactory; OpRegistry(); ~OpRegistry() override; void Register(const OpRegistrationDataFactory& op_data_factory); Status LookUp(const string& op_type_name, const OpRegistrationData** op_reg_data) const override; // Fills *ops with all registered OpDefs (except those with names // starting with '_' if include_internal == false) sorted in // ascending alphabetical order. void Export(bool include_internal, OpList* ops) const; // Returns ASCII-format OpList for all registered OpDefs (except // those with names starting with '_' if include_internal == false). string DebugString(bool include_internal) const; // A singleton available at startup. static OpRegistry* Global(); // Get all registered ops. void GetRegisteredOps(std::vector<OpDef>* op_defs); // Get all `OpRegistrationData`s. void GetOpRegistrationData(std::vector<OpRegistrationData>* op_data); // Watcher, a function object. // The watcher, if set by SetWatcher(), is called every time an op is // registered via the Register function. The watcher is passed the Status // obtained from building and adding the OpDef to the registry, and the OpDef // itself if it was successfully built. A watcher returns a Status which is in // turn returned as the final registration status. typedef std::function<Status(const Status&, const OpDef&)> Watcher; // An OpRegistry object has only one watcher. This interface is not thread // safe, as different clients are free to set the watcher any time. // Clients are expected to atomically perform the following sequence of // operations : // SetWatcher(a_watcher); // Register some ops; // op_registry->ProcessRegistrations(); // SetWatcher(nullptr); // Returns a non-OK status if a non-null watcher is over-written by another // non-null watcher. Status SetWatcher(const Watcher& watcher); // Process the current list of deferred registrations. Note that calls to // Export, LookUp and DebugString would also implicitly process the deferred // registrations. Returns the status of the first failed op registration or // Status::OK() otherwise. Status ProcessRegistrations() const; // Defer the registrations until a later call to a function that processes // deferred registrations are made. Normally, registrations that happen after // calls to Export, LookUp, ProcessRegistrations and DebugString are processed // immediately. Call this to defer future registrations. void DeferRegistrations(); // Clear the registrations that have been deferred. void ClearDeferredRegistrations(); private: // Ensures that all the functions in deferred_ get called, their OpDef's // registered, and returns with deferred_ empty. Returns true the first // time it is called. Prints a fatal log if any op registration fails. bool MustCallDeferred() const EXCLUSIVE_LOCKS_REQUIRED(mu_); // Calls the functions in deferred_ and registers their OpDef's // It returns the Status of the first failed op registration or Status::OK() // otherwise. Status CallDeferred() const EXCLUSIVE_LOCKS_REQUIRED(mu_); // Add 'def' to the registry with additional data 'data'. On failure, or if // there is already an OpDef with that name registered, returns a non-okay // status. Status RegisterAlreadyLocked(const OpRegistrationDataFactory& op_data_factory) const EXCLUSIVE_LOCKS_REQUIRED(mu_); Status LookUpSlow(const string& op_type_name, const OpRegistrationData** op_reg_data) const; mutable mutex mu_; // Functions in deferred_ may only be called with mu_ held. mutable std::vector<OpRegistrationDataFactory> deferred_ GUARDED_BY(mu_); // Values are owned. mutable std::unordered_map<string, const OpRegistrationData*> registry_ GUARDED_BY(mu_); mutable bool initialized_ GUARDED_BY(mu_); // Registry watcher. mutable Watcher watcher_ GUARDED_BY(mu_); }; OpRegistrationData OpRegistrationData\u7ed3\u6784\u4f53\u4e2d\u5305\u542bOpDef\u548cOpShapeInferenceFn OpDef \u5305\u542battr\uff0cinput\uff0couput\uff0cdoc\u7b49op\u6ce8\u518c\u65f6\u4f20\u5165\u7684\u4fe1\u606f OpShapeInferenceFn \u5305\u542b\u7684\u662fshape\u63a8\u65ad\u51fd\u6570 tensorflow\\core\\framework\\op_def_builder.h struct OpRegistrationData { public: OpRegistrationData() {} OpRegistrationData(const OpDef& def) : op_def(def) {} OpRegistrationData(const OpDef& def, const OpShapeInferenceFn& fn, bool is_function = false) : op_def(def), shape_inference_fn(fn), is_function_op(is_function) {} OpDef op_def; OpShapeInferenceFn shape_inference_fn; bool is_function_op = false; }; OpDef OpDef \u4f7f\u7528proto3\u534f\u8bae\u8fdb\u884c\u5b9a\u4e49 tensorflow\\core\\framework\\op_def.proto tensorflow/core/framework/op_def.pb.h NodeDef tensorflow/core/framework/node_def.proto tensorflow/core/framework/node_def.pb.h GraphDef tensorflow\\core\\framework\\graph.proto tensorflow/core/framework/graph.pb.h class GraphDefBuilder tensorflow\\core\\graph\\graph_def_builder.h LoadLibrary tensorflow\\core\\framework\\load_library.cc Variable # tensorflow\\python\\ops\\variables.py @tf_export(\"Variable\", v1=[]) class Variable(six.with_metaclass(VariableMetaclass, trackable.Trackable)): Tensor # tensorflow\\python\\framework\\ops.py @tf_export(\"Tensor\") class Tensor(_TensorLike):","title":"2019 06 20 tensorflow"},{"location":"Machine_Learning/2019-06-20-tensorflow/#register_op","text":"REGISTER_OP \u672c\u8d28\u5b9a\u4e49\u4e86\u4e00\u4e2a::tensorflow::register_op::OpDefBuilderReceiver\u7c7b\u7684\u5bf9\u8c61\uff0c \u8fd9\u4e2a\u5bf9\u8c61\u662f\u4e00\u4e2a\u5168\u5c40\u53d8\u91cf\uff0c\u8be5\u5bf9\u8c61\u7684\u6784\u9020\u53c2\u6570\u4e3a\u4e00\u4e2a\u6a21\u677f\u7c7b::tensorflow::register_op::OpDefBuilderWrapper \u751f\u6210\u7684\u5bf9\u8c61\uff0c REGISTER_OP \u6700\u7ec8\u751f\u6210\u4e86\u4e24\u4e2a\u5bf9\u8c61\uff0c\u5206\u522b\u4e3aOpDefBuilderReceiver\u7c7b\u548cOpDefBuilderWrapper\u6a21\u677f\u7c7b\u7684\u5bf9\u8c61\uff0cOpDefBuilderReceiver\u7c7b\u5728\u8d4b\u503c\u7b26\u53f7(=)\u7684\u53f3\u8fb9\uff0cOpDefBuilderWrapper\u6a21\u677f\u7c7b\u5bf9\u8c61\u5728\u8d4b\u503c\u7b26\u53f7(=)\u7684\u5de6\u8fb9\uff0c REGISTER_OP\u5b8f\u540e\u53ef\u4ee5\u7ee7\u7eed\u8c03\u7528OpDefBuilderWrapper\u6a21\u677f\u7c7b\u7684\u65b9\u6cd5\uff0c\u5982Input\uff0cAttr\u7b49 tensorflow\\core\\framework\\op.h #define REGISTER_OP(name) REGISTER_OP_UNIQ_HELPER(__COUNTER__, name) #define REGISTER_OP_UNIQ_HELPER(ctr, name) REGISTER_OP_UNIQ(ctr, name) #define REGISTER_OP_UNIQ(ctr, name) \\ static ::tensorflow::register_op::OpDefBuilderReceiver register_op##ctr \\ TF_ATTRIBUTE_UNUSED = \\ ::tensorflow::register_op::OpDefBuilderWrapper<SHOULD_REGISTER_OP( \\ name)>(name) TF_ATTRIBUTE_UNUSED \u4fee\u9970\u53d8\u91cf\uff0c\u5f53\u53d8\u91cf\u672a\u88ab\u4f7f\u7528\u65f6\uff0c\u7f16\u8bd1\u5668\u4e0d\u9700\u8981\u7ed9\u51fa\u8b66\u544a\u4fe1\u606f tensorflow\\core\\platform\\macros.h #if (defined(__GNUC__) || defined(__APPLE__)) && !defined(SWIG) #define TF_ATTRIBUTE_UNUSED __attribute__((unused)) #elif defined(_MSC_VER) #define TF_ATTRIBUTE_UNUSED","title":"REGISTER_OP"},{"location":"Machine_Learning/2019-06-20-tensorflow/#opdefbuilderreceiver","text":"::tensorflow::register_op::OpDefBuilderReceiver \u7c7b\u5bf9\u8c61\u5728\u6784\u9020\u65f6\uff0c\u4f1a\u8c03\u7528OpRegistry::Global() \u83b7\u53d6\u5230\u4e00\u4e2aOpRegistry\u7c7b\u5bf9\u8c61\u7684\u6307\u9488, \u7136\u540e\u8c03\u7528\u5176Register\u65b9\u6cd5\u3002OpRegistry\u7c7b\u5bf9\u8c61\u8d1f\u8d23\u6536\u96c6\u6240\u6709\u6ce8\u518c\u7684op tensorflow\\core\\framework\\op.h struct OpDefBuilderReceiver { // To call OpRegistry::Global()->Register(...), used by the // REGISTER_OP macro below. // Note: These are implicitly converting constructors. OpDefBuilderReceiver( const OpDefBuilderWrapper<true>& wrapper); // NOLINT(runtime/explicit) constexpr OpDefBuilderReceiver(const OpDefBuilderWrapper<false>&) { } // NOLINT(runtime/explicit) }; tensorflow\\core\\framework\\op.cc namespace register_op { OpDefBuilderReceiver::OpDefBuilderReceiver( const OpDefBuilderWrapper<true>& wrapper) { OpRegistry::Global()->Register( [wrapper](OpRegistrationData* op_reg_data) -> Status { return wrapper.builder().Finalize(op_reg_data); }); } } // namespace register_op","title":"OpDefBuilderReceiver"},{"location":"Machine_Learning/2019-06-20-tensorflow/#opdefbuilderwrapper","text":"OpDefBuilderWrapper\u662f\u4e00\u4e2a\u6a21\u677f\u7c7b\uff0c\u5176\u6a21\u677f\u53c2\u6570\u4e3atrue\u6216false\uff0c \u901a\u8fc7\u6a21\u677f\u53c2\u6570\u6765\u63a7\u5236op\u662f\u5426\u8fdb\u884c\u6ce8\u518c tensorflow\\core\\framework\\op.h // Template specialization that forwards all calls to the contained builder. template <> class OpDefBuilderWrapper<true> { public: explicit OpDefBuilderWrapper(const char name[]) : builder_(name) {} OpDefBuilderWrapper<true>& Attr(string spec) { builder_.Attr(std::move(spec)); return *this; } OpDefBuilderWrapper<true>& Input(string spec) { builder_.Input(std::move(spec)); return *this; } OpDefBuilderWrapper<true>& Output(string spec) { builder_.Output(std::move(spec)); return *this; } OpDefBuilderWrapper<true>& SetIsCommutative() { builder_.SetIsCommutative(); return *this; } OpDefBuilderWrapper<true>& SetIsAggregate() { builder_.SetIsAggregate(); return *this; } OpDefBuilderWrapper<true>& SetIsStateful() { builder_.SetIsStateful(); return *this; } OpDefBuilderWrapper<true>& SetAllowsUninitializedInput() { builder_.SetAllowsUninitializedInput(); return *this; } OpDefBuilderWrapper<true>& Deprecated(int version, string explanation) { builder_.Deprecated(version, std::move(explanation)); return *this; } OpDefBuilderWrapper<true>& Doc(string text) { builder_.Doc(std::move(text)); return *this; } OpDefBuilderWrapper<true>& SetShapeFn( Status (*fn)(shape_inference::InferenceContext*)) { builder_.SetShapeFn(fn); return *this; } const ::tensorflow::OpDefBuilder& builder() const { return builder_; } private: mutable ::tensorflow::OpDefBuilder builder_; };","title":"OpDefBuilderWrapper"},{"location":"Machine_Learning/2019-06-20-tensorflow/#opdefbuilder","text":"REGISTER_OP().Input().Attr() \u8c03\u7528\u8fc7\u7a0b\u4e2dInput\uff0cAttr\u7b49\u51fd\u6570\u7684\u53c2\u6570\u7531OpDefBuilder\u7c7b\u5bf9\u8c61\u8d1f\u8d23\u5b58\u50a8\uff0c \u6bcf\u4e2aOpDefBuilder\u7c7b\u5bf9\u8c61\u5305\u542b\u4e00\u4e2aOpRegistrationData\u5bf9\u8c61\uff0c\u8c03\u7528REGISTER_OP().SetShapeFn()\u65f6\u4f1a\u66f4\u65b0OpShapeInferenceFn\u5230OpRegistrationData\u5bf9\u8c61\u4e2d\uff0c \u8fd9\u4e2a\u6570\u636e\u4f1a\u5728\u968f\u540e OpDefBuilder\u7c7b\u7684Finalize\u65b9\u6cd5\u8c03\u7528\u65f6\u4f1a\u901a\u8fc7\u53c2\u6570\u6307\u9488\u7684\u65b9\u5f0f\u62f7\u8d1dOpRegistrationData\u4e2d\u7684\u6570\u636e\u5230\u5916\u90e8 tensorflow\\core\\framework\\op_def_builder.h // Builder class passed to the REGISTER_OP() macro. class OpDefBuilder { public: // Constructs an OpDef with just the name field set. explicit OpDefBuilder(string op_name); // Adds an attr to this OpDefBuilder (and returns *this). The spec has // format \"<name>:<type>\" or \"<name>:<type>=<default>\" // where <name> matches regexp [a-zA-Z][a-zA-Z0-9_]* // (by convention only using capital letters for attrs that can be inferred) // <type> can be: // \"string\", \"int\", \"float\", \"bool\", \"type\", \"shape\", or \"tensor\" // \"numbertype\", \"realnumbertype\", \"quantizedtype\" // (meaning \"type\" with a restriction on valid values) // \"{int32,int64}\" or {realnumbertype,quantizedtype,string}\" // (meaning \"type\" with a restriction containing unions of value types) // \"{\\\"foo\\\", \\\"bar\\n baz\\\"}\", or \"{'foo', 'bar\\n baz'}\" // (meaning \"string\" with a restriction on valid values) // \"list(string)\", ..., \"list(tensor)\", \"list(numbertype)\", ... // (meaning lists of the above types) // \"int >= 2\" (meaning \"int\" with a restriction on valid values) // \"list(string) >= 2\", \"list(int) >= 2\" // (meaning \"list(string)\" / \"list(int)\" with length at least 2) // <default>, if included, should use the Proto text format // of <type>. For lists use [a, b, c] format. // // Note that any attr specifying the length of an input or output will // get a default minimum of 1 unless the >= # syntax is used. // // TODO(josh11b): Perhaps support restrictions and defaults as optional // extra arguments to Attr() instead of encoding them in the spec string. // TODO(josh11b): Would like to have better dtype handling for tensor attrs: // * Ability to say the type of an input/output matches the type of // the tensor. // * Ability to restrict the type of the tensor like the existing // restrictions for type attrs. // Perhaps by linking the type of the tensor to a type attr? OpDefBuilder& Attr(string spec); // Adds an input or output to this OpDefBuilder (and returns *this). // The spec has form \"<name>:<type-expr>\" or \"<name>:Ref(<type-expr>)\" // where <name> matches regexp [a-z][a-z0-9_]* and <type-expr> can be: // * For a single tensor: <type> // * For a sequence of tensors with the same type: <number>*<type> // * For a sequence of tensors with different types: <type-list> // Where: // <type> is either one of \"float\", \"int32\", \"string\", ... // or the name of an attr (see above) with type \"type\". // <number> is the name of an attr with type \"int\". // <type-list> is the name of an attr with type \"list(type)\". // TODO(josh11b): Indicate Ref() via an optional argument instead of // in the spec? // TODO(josh11b): SparseInput() and SparseOutput() matching the Python // handling? OpDefBuilder& Input(string spec); OpDefBuilder& Output(string spec); // Turns on the indicated boolean flag in this OpDefBuilder (and // returns *this). OpDefBuilder& SetIsCommutative(); OpDefBuilder& SetIsAggregate(); OpDefBuilder& SetIsStateful(); OpDefBuilder& SetAllowsUninitializedInput(); // Deprecate the op at a certain GraphDef version. OpDefBuilder& Deprecated(int version, string explanation); // Adds docs to this OpDefBuilder (and returns *this). // Docs have the format: // <1-line summary> // <rest of the description> // <name>: <description of name> // <name>: <description of name> // <if long, indent the description on subsequent lines> // Where <name> is the name of an attr, input, or output. Please // wrap docs at 72 columns so that it may be indented in the // generated output. For tensor inputs or outputs (not attrs), you // may start the description with an \"=\" (like name:= <description>) // to suppress the automatically-generated type documentation in // generated output. #ifndef TF_LEAN_BINARY OpDefBuilder& Doc(string text); #else OpDefBuilder& Doc(string text) { return *this; } #endif // Sets the shape function to be used for shape inference. // // Note that currently (October 2016), python code still requires a // RegisterShape call to invoke this; see call_cpp_shape_fn in // python/framework/common_shapes.py OpDefBuilder& SetShapeFn(OpShapeInferenceFn fn); // Sets op_reg_data->op_def to the requested OpDef and // op_reg_data->shape_inference_fn to the requested shape inference function, // or returns an error. // Must be called after all of the above methods. // // Note that OpDefBuilder only reports parsing errors. You should also // call ValidateOpDef() to detect other problems. Status Finalize(OpRegistrationData* op_reg_data) const; private: friend class FunctionDefHelper; // Adds control output to this OpDefBuilder (and returns *this). // The <name> must be a valid node name (matches regexp // [a-zA-Z][a-zA-Z0-9_]*). Named control output can only exist for functions. OpDefBuilder& ControlOutput(string name); OpDef* op_def() { return &op_reg_data_.op_def; } OpRegistrationData op_reg_data_; std::vector<string> attrs_; std::vector<string> inputs_; std::vector<string> outputs_; std::vector<string> control_outputs_; string doc_; std::vector<string> errors_; };","title":"OpDefBuilder"},{"location":"Machine_Learning/2019-06-20-tensorflow/#opregistry","text":"OpRegistry\u7c7b\u7684Global\u65b9\u6cd5\uff0c\u4f7f\u7528singleton\u5355\u4f8b\u6a21\u5f0f\u521b\u5efa\u4e86\u4e00\u4e2aOpRegistry\u7c7b\u5bf9\u8c61 void OpRegistry::Register(const OpRegistrationDataFactory& op_data_factory) { mutex_lock lock(mu_); if (initialized_) { TF_QCHECK_OK(RegisterAlreadyLocked(op_data_factory)); } else { deferred_.push_back(op_data_factory); } } OpRegistry\u7c7b\u7684Register\u65b9\u6cd5\uff0c\u5176\u53c2\u6570\u4e3astd::function \u7c7b\u578b\uff0c\u6ce8\u518cOP\u65f6\u4f1a\u4f7f\u7528lambda\u51fd\u6570\u5305\u88f9OpDefBuilder\u7684Finalize\u65b9\u6cd5\u4f5c\u4e3aRegister\u65b9\u6cd5\u7684\u53c2\u6570 Status OpRegistry::RegisterAlreadyLocked( const OpRegistrationDataFactory& op_data_factory) const { std::unique_ptr<OpRegistrationData> op_reg_data(new OpRegistrationData); Status s = op_data_factory(op_reg_data.get()); if (s.ok()) { s = ValidateOpDef(op_reg_data->op_def); if (s.ok() && !gtl::InsertIfNotPresent(&registry_, op_reg_data->op_def.name(), op_reg_data.get())) { s = errors::AlreadyExists(\"Op with name \", op_reg_data->op_def.name()); } } Status watcher_status = s; if (watcher_) { watcher_status = watcher_(s, op_reg_data->op_def); } if (s.ok()) { op_reg_data.release(); } else { op_reg_data.reset(); } return watcher_status; } OpRegistry::Register\u7684\u65b9\u6cd5\u8c03\u7528\u65f6\u6216\u8005\u8c03\u7528\u540e\uff0c\u6700\u7ec8\u90fd\u4f1a\u8c03\u7528\u5230RegisterAlreadyLocked\u65b9\u6cd5\uff0c\u8be5\u4f1a\u5148\u6784\u9020\u4e00\u4e2aOpRegistrationData\uff0c \u7136\u540e\u5c06\u5176\u4f5c\u4e3a\u53c2\u6570\u8c03\u7528OpRegistry::Register\u63a5\u6536\u7684lambda\u51fd\u6570 \u8c03\u7528lambda\u51fd\u6570\uff0c\u5373\u8c03\u7528OpDefBuilder\u7684Finalize\u65b9\u6cd5\uff0c\u5728\u8be5\u65b9\u6cd5\u4e2d\uff0c 1) \u4f1a\u5c06OpDefBuilder\u7c7b\u5bf9\u8c61\u7684OpRegistrationData\u6210\u5458\u62f7\u8d1d\u7ed9OpRegistry::Register\u65b9\u6cd5\u4e2d\u7684OpRegistrationData\u5bf9\u8c61\uff08\u66f4\u65b0\u7684\u662f OpShapeInferenceFn), 2) \u7136\u540e\u8c03\u7528FinalizeAttr\uff0cFinalizeInputOrOutput\u7b49\u65b9\u6cd5\u66f4\u65b0OpDef\u7ed9OpRegistry::Register\u65b9\u6cd5\u4e2d\u7684OpRegistrationData\u5bf9\u8c61 // registry_ \u5b58\u50a8\u6ce8\u518c\u7684OP mutable std::unordered_map<string, const OpRegistrationData*> registry_ GUARDED_BY(mu_); // OpRegistry::RegisterAlreadyLocked\u65b9\u6cd5\u5411registry_\u4e2d\u63d2\u5165OP\u6570\u636e if (s.ok() && !gtl::InsertIfNotPresent(&registry_, op_reg_data->op_def.name(), op_reg_data.get())) { s = errors::AlreadyExists(\"Op with name \", op_reg_data->op_def.name()); } gtl::InsertIfNotPresent\u65b9\u6cd5\u4f1a\u5b8c\u6210\u6700\u7ec8\u7684\u6ce8\u518c typedef std::function<Status(const Status&, const OpDef&)> Watcher; \u5728\u68c0\u67e5OpDef\u6709\u6548\uff0c\u4e14\u8be5op\u6ca1\u6709\u6ce8\u518c\u540e\uff0c\u4f1a\u4ee5OpDef\u4e3a\u53c2\u6570\u8c03\u7528watcher_\u51fd\u6570 class OpRegistry : public OpRegistryInterface { public: typedef std::function<Status(OpRegistrationData*)> OpRegistrationDataFactory; void Register(const OpRegistrationDataFactory& op_data_factory); } tensorflow\\core\\framework\\op.h // Users that want to look up an OpDef by type name should take an // OpRegistryInterface. Functions accepting a // (const) OpRegistryInterface* may call LookUp() from multiple threads. class OpRegistryInterface { public: virtual ~OpRegistryInterface(); // Returns an error status and sets *op_reg_data to nullptr if no OpDef is // registered under that name, otherwise returns the registered OpDef. // Caller must not delete the returned pointer. virtual Status LookUp(const string& op_type_name, const OpRegistrationData** op_reg_data) const = 0; // Shorthand for calling LookUp to get the OpDef. Status LookUpOpDef(const string& op_type_name, const OpDef** op_def) const; }; // The standard implementation of OpRegistryInterface, along with a // global singleton used for registering ops via the REGISTER // macros below. Thread-safe. // // Example registration: // OpRegistry::Global()->Register( // [](OpRegistrationData* op_reg_data)->Status { // // Populate *op_reg_data here. // return Status::OK(); // }); class OpRegistry : public OpRegistryInterface { public: typedef std::function<Status(OpRegistrationData*)> OpRegistrationDataFactory; OpRegistry(); ~OpRegistry() override; void Register(const OpRegistrationDataFactory& op_data_factory); Status LookUp(const string& op_type_name, const OpRegistrationData** op_reg_data) const override; // Fills *ops with all registered OpDefs (except those with names // starting with '_' if include_internal == false) sorted in // ascending alphabetical order. void Export(bool include_internal, OpList* ops) const; // Returns ASCII-format OpList for all registered OpDefs (except // those with names starting with '_' if include_internal == false). string DebugString(bool include_internal) const; // A singleton available at startup. static OpRegistry* Global(); // Get all registered ops. void GetRegisteredOps(std::vector<OpDef>* op_defs); // Get all `OpRegistrationData`s. void GetOpRegistrationData(std::vector<OpRegistrationData>* op_data); // Watcher, a function object. // The watcher, if set by SetWatcher(), is called every time an op is // registered via the Register function. The watcher is passed the Status // obtained from building and adding the OpDef to the registry, and the OpDef // itself if it was successfully built. A watcher returns a Status which is in // turn returned as the final registration status. typedef std::function<Status(const Status&, const OpDef&)> Watcher; // An OpRegistry object has only one watcher. This interface is not thread // safe, as different clients are free to set the watcher any time. // Clients are expected to atomically perform the following sequence of // operations : // SetWatcher(a_watcher); // Register some ops; // op_registry->ProcessRegistrations(); // SetWatcher(nullptr); // Returns a non-OK status if a non-null watcher is over-written by another // non-null watcher. Status SetWatcher(const Watcher& watcher); // Process the current list of deferred registrations. Note that calls to // Export, LookUp and DebugString would also implicitly process the deferred // registrations. Returns the status of the first failed op registration or // Status::OK() otherwise. Status ProcessRegistrations() const; // Defer the registrations until a later call to a function that processes // deferred registrations are made. Normally, registrations that happen after // calls to Export, LookUp, ProcessRegistrations and DebugString are processed // immediately. Call this to defer future registrations. void DeferRegistrations(); // Clear the registrations that have been deferred. void ClearDeferredRegistrations(); private: // Ensures that all the functions in deferred_ get called, their OpDef's // registered, and returns with deferred_ empty. Returns true the first // time it is called. Prints a fatal log if any op registration fails. bool MustCallDeferred() const EXCLUSIVE_LOCKS_REQUIRED(mu_); // Calls the functions in deferred_ and registers their OpDef's // It returns the Status of the first failed op registration or Status::OK() // otherwise. Status CallDeferred() const EXCLUSIVE_LOCKS_REQUIRED(mu_); // Add 'def' to the registry with additional data 'data'. On failure, or if // there is already an OpDef with that name registered, returns a non-okay // status. Status RegisterAlreadyLocked(const OpRegistrationDataFactory& op_data_factory) const EXCLUSIVE_LOCKS_REQUIRED(mu_); Status LookUpSlow(const string& op_type_name, const OpRegistrationData** op_reg_data) const; mutable mutex mu_; // Functions in deferred_ may only be called with mu_ held. mutable std::vector<OpRegistrationDataFactory> deferred_ GUARDED_BY(mu_); // Values are owned. mutable std::unordered_map<string, const OpRegistrationData*> registry_ GUARDED_BY(mu_); mutable bool initialized_ GUARDED_BY(mu_); // Registry watcher. mutable Watcher watcher_ GUARDED_BY(mu_); };","title":"OpRegistry"},{"location":"Machine_Learning/2019-06-20-tensorflow/#opregistrationdata","text":"OpRegistrationData\u7ed3\u6784\u4f53\u4e2d\u5305\u542bOpDef\u548cOpShapeInferenceFn OpDef \u5305\u542battr\uff0cinput\uff0couput\uff0cdoc\u7b49op\u6ce8\u518c\u65f6\u4f20\u5165\u7684\u4fe1\u606f OpShapeInferenceFn \u5305\u542b\u7684\u662fshape\u63a8\u65ad\u51fd\u6570 tensorflow\\core\\framework\\op_def_builder.h struct OpRegistrationData { public: OpRegistrationData() {} OpRegistrationData(const OpDef& def) : op_def(def) {} OpRegistrationData(const OpDef& def, const OpShapeInferenceFn& fn, bool is_function = false) : op_def(def), shape_inference_fn(fn), is_function_op(is_function) {} OpDef op_def; OpShapeInferenceFn shape_inference_fn; bool is_function_op = false; };","title":"OpRegistrationData"},{"location":"Machine_Learning/2019-06-20-tensorflow/#opdef","text":"OpDef \u4f7f\u7528proto3\u534f\u8bae\u8fdb\u884c\u5b9a\u4e49 tensorflow\\core\\framework\\op_def.proto tensorflow/core/framework/op_def.pb.h","title":"OpDef"},{"location":"Machine_Learning/2019-06-20-tensorflow/#nodedef","text":"tensorflow/core/framework/node_def.proto tensorflow/core/framework/node_def.pb.h","title":"NodeDef"},{"location":"Machine_Learning/2019-06-20-tensorflow/#graphdef","text":"tensorflow\\core\\framework\\graph.proto tensorflow/core/framework/graph.pb.h class GraphDefBuilder tensorflow\\core\\graph\\graph_def_builder.h","title":"GraphDef"},{"location":"Machine_Learning/2019-06-20-tensorflow/#loadlibrary","text":"tensorflow\\core\\framework\\load_library.cc","title":"LoadLibrary"},{"location":"Machine_Learning/2019-06-20-tensorflow/#variable","text":"# tensorflow\\python\\ops\\variables.py @tf_export(\"Variable\", v1=[]) class Variable(six.with_metaclass(VariableMetaclass, trackable.Trackable)):","title":"Variable"},{"location":"Machine_Learning/2019-06-20-tensorflow/#tensor","text":"# tensorflow\\python\\framework\\ops.py @tf_export(\"Tensor\") class Tensor(_TensorLike):","title":"Tensor"},{"location":"Machine_Learning/2019-06-21-tensorflow_eager/","text":"layout: post title: \"tensorflow_eager\" subtitle: \"tensorflow_eager\" date: 2019-06-21 14:22:49 author: \"none\" header-img: \"img/posts/default_post.jpg\" catalog: true tags: - tag pywrap_tensorflow # tensorflow\\__init__.py from tensorflow.python import pywrap_tensorflow # tensorflow\\python\\__init__.py from tensorflow.python import pywrap_tensorflow # tensorflow\\python\\pywrap_tensorflow.py from tensorflow.python.pywrap_tensorflow_internal import * swig \u6839\u636e*.i\u6587\u4ef6\u751f\u6210 1. pywrap_tensorflow_internal.cc\u6587\u4ef6\uff1a \u5305\u88f9c api\uff0c \u751f\u6210\u52a8\u6001\u94fe\u63a5\u5e93.so 2. pywrap_tensorflow_internal.py\u6587\u4ef6\uff1a python\u7f16\u7a0b\u7684\u63a5\u53e3\u6587\u4ef6, \u52a0\u8f7d\u52a8\u6001\u94fe\u63a5\u5e93 \u4f8b\u5982\u4f7f\u7528swig\u5c06c\u6e90\u6587\u4ef6\u4e2d\u7684TFE_Py_Execute\u51fd\u6570\u7ed9python\u4f7f\u7528 // tensorflow\\python\\tensorflow.i %include \"tensorflow/python/pywrap_tfe.i\" // tensorflow\\python\\pywrap_tfe.i %{ #include \"tensorflow/python/eager/pywrap_tfe.h\" %} // \u76f8\u5e94\u7684swig\u8bed\u6cd5\uff0c\u6620\u5c04python\u548cc\u7684\u7c7b\u578b TFE_Py_Execute\u51fd\u6570\u7684\u5b9e\u73b0\u5982\u4e0b\uff1a // tensorflow\\python\\eager\\pywrap_tfe.h void TFE_Py_Execute(TFE_Context* ctx, const char* device_name, const char* op_name, TFE_InputTensorHandles* inputs, PyObject* attrs, TFE_OutputTensorHandles* outputs, TF_Status* out_status); // tensorflow\\python\\eager\\pywrap_tfe_src.cc void TFE_Py_Execute(TFE_Context* ctx, const char* device_name, const char* op_name, TFE_InputTensorHandles* inputs, PyObject* attrs, TFE_OutputTensorHandles* outputs, TF_Status* out_status) { TFE_Op* op = TFE_NewOp(ctx, op_name, out_status); if (TF_GetCode(out_status) != TF_OK) return; TFE_OpSetDevice(op, device_name, out_status); if (TF_GetCode(out_status) == TF_OK) { for (int i = 0; i < inputs->size() && TF_GetCode(out_status) == TF_OK; ++i) { TFE_OpAddInput(op, inputs->at(i), out_status); } } if (TF_GetCode(out_status) == TF_OK) { SetOpAttrs(ctx, op, attrs, 0, out_status); } Py_BEGIN_ALLOW_THREADS; if (TF_GetCode(out_status) == TF_OK) { int num_outputs = outputs->size(); TFE_Execute(op, outputs->data(), &num_outputs, out_status); outputs->resize(num_outputs); } if (TF_GetCode(out_status) != TF_OK) { TF_SetStatus(out_status, TF_GetCode(out_status), tensorflow::strings::StrCat(TF_Message(out_status), \" [Op:\", op_name, \"]\") .c_str()); } TFE_DeleteOp(op); Py_END_ALLOW_THREADS; } \u5728python\u7aef\uff0c\u53ef\u4ee5\u4f7f\u7528\u5982\u4e0b\u4ee3\u7801\u8c03\u7528c api\u4e2d\u7684TFE_Py_Execute\u51fd\u6570 # tensorflow\\python\\eager\\execute.py tensors = pywrap_tensorflow.TFE_Py_Execute(ctx._handle, device_name, op_name, inputs, attrs, num_outputs) TFE_NewOp: c api, \u51fd\u6570 TFE_Op: c api internal\uff0c \u7ed3\u6784\u4f53 EagerOperation: c++, \u7c7b // tensorflow\\c\\eager\\c_api.cc TFE_Op* TFE_NewOp(TFE_Context* ctx, const char* op_or_function_name, TF_Status* status) { const char* name = op_or_function_name; // Shorthand const tensorflow::AttrTypeMap* types; bool is_function = false; status->status = tensorflow::AttrTypeMapForOp(name, &types, &is_function); if (!status->status.ok()) { return nullptr; } if (!is_function) { const tensorflow::OpDef* op_def; status->status = tensorflow::OpDefForOp(op_or_function_name, &op_def); if (!status->status.ok()) { return nullptr; } return new TFE_Op(ctx, name, false, types, new TFE_OpInferenceContext(op_def)); } if (!ctx->context->FindFunctionByName(name)) { status->status = tensorflow::errors::NotFound( \"'\", name, \"' is neither a type of a primitive operation nor a name \" \"of a function registered in binary running on \", tensorflow::port::Hostname(), \". Make sure the operation or function is \" \"registered in the binary running in this process.\"); return nullptr; } return new TFE_Op(ctx, name, true, types, nullptr); } // tensorflow\\c\\eager\\c_api_internal.h struct TFE_Op { TFE_Op(TFE_Context* ctx, const char* op, bool is_function, const tensorflow::AttrTypeMap* t, TFE_OpInferenceContext* inference_ctx) : operation(ctx->context, op, is_function, t), inference_ctx(inference_ctx) {} tensorflow::EagerOperation operation; std::unique_ptr<TFE_OpInferenceContext> inference_ctx; }; EagerOperation tensorflow\\core\\common_runtime\\eager\\eager_operation.h EagerTensor EagerTensor\u4e3apython\u7c7b\uff0c \u5728_EagerTensorBase\u7c7b\u7684\u57fa\u7840\u4e0a\u7ecf\u8fc7c api\u5904\u7406\u751f\u6210 # tensorflow\\python\\framework\\ops.py from tensorflow.python import pywrap_tensorflow as c_api # TODO(agarwal): consider getting rid of this. class _EagerTensorBase(Tensor): \"\"\"Base class for EagerTensor.\"\"\" # This call creates an EagerTensor class, as a subclass of _EagerTensorBase, and # registers it with the current module. EagerTensor = c_api.TFE_Py_InitEagerTensor(_EagerTensorBase) eager context tensorflow\\python\\eager\\context.py def _create_context(): global _context with _context_lock: if _context is None: _context = Context() def context(): \"\"\"Returns a singleton context object.\"\"\" if _context is None: _create_context() return _context enable_eager_execution tensorflow\\python\\framework\\ops.py @tf_export(v1=[\"enable_eager_execution\"]) def enable_eager_execution(config=None, device_policy=None, execution_mode=None): _api_usage_gauge.get_cell().set(True) if context.default_execution_mode != context.EAGER_MODE: return enable_eager_execution_internal( config=config, device_policy=device_policy, execution_mode=execution_mode, server_def=None)","title":"2019 06 21 tensorflow eager"},{"location":"Machine_Learning/2019-06-21-tensorflow_eager/#pywrap_tensorflow","text":"# tensorflow\\__init__.py from tensorflow.python import pywrap_tensorflow # tensorflow\\python\\__init__.py from tensorflow.python import pywrap_tensorflow # tensorflow\\python\\pywrap_tensorflow.py from tensorflow.python.pywrap_tensorflow_internal import * swig \u6839\u636e*.i\u6587\u4ef6\u751f\u6210 1. pywrap_tensorflow_internal.cc\u6587\u4ef6\uff1a \u5305\u88f9c api\uff0c \u751f\u6210\u52a8\u6001\u94fe\u63a5\u5e93.so 2. pywrap_tensorflow_internal.py\u6587\u4ef6\uff1a python\u7f16\u7a0b\u7684\u63a5\u53e3\u6587\u4ef6, \u52a0\u8f7d\u52a8\u6001\u94fe\u63a5\u5e93 \u4f8b\u5982\u4f7f\u7528swig\u5c06c\u6e90\u6587\u4ef6\u4e2d\u7684TFE_Py_Execute\u51fd\u6570\u7ed9python\u4f7f\u7528 // tensorflow\\python\\tensorflow.i %include \"tensorflow/python/pywrap_tfe.i\" // tensorflow\\python\\pywrap_tfe.i %{ #include \"tensorflow/python/eager/pywrap_tfe.h\" %} // \u76f8\u5e94\u7684swig\u8bed\u6cd5\uff0c\u6620\u5c04python\u548cc\u7684\u7c7b\u578b TFE_Py_Execute\u51fd\u6570\u7684\u5b9e\u73b0\u5982\u4e0b\uff1a // tensorflow\\python\\eager\\pywrap_tfe.h void TFE_Py_Execute(TFE_Context* ctx, const char* device_name, const char* op_name, TFE_InputTensorHandles* inputs, PyObject* attrs, TFE_OutputTensorHandles* outputs, TF_Status* out_status); // tensorflow\\python\\eager\\pywrap_tfe_src.cc void TFE_Py_Execute(TFE_Context* ctx, const char* device_name, const char* op_name, TFE_InputTensorHandles* inputs, PyObject* attrs, TFE_OutputTensorHandles* outputs, TF_Status* out_status) { TFE_Op* op = TFE_NewOp(ctx, op_name, out_status); if (TF_GetCode(out_status) != TF_OK) return; TFE_OpSetDevice(op, device_name, out_status); if (TF_GetCode(out_status) == TF_OK) { for (int i = 0; i < inputs->size() && TF_GetCode(out_status) == TF_OK; ++i) { TFE_OpAddInput(op, inputs->at(i), out_status); } } if (TF_GetCode(out_status) == TF_OK) { SetOpAttrs(ctx, op, attrs, 0, out_status); } Py_BEGIN_ALLOW_THREADS; if (TF_GetCode(out_status) == TF_OK) { int num_outputs = outputs->size(); TFE_Execute(op, outputs->data(), &num_outputs, out_status); outputs->resize(num_outputs); } if (TF_GetCode(out_status) != TF_OK) { TF_SetStatus(out_status, TF_GetCode(out_status), tensorflow::strings::StrCat(TF_Message(out_status), \" [Op:\", op_name, \"]\") .c_str()); } TFE_DeleteOp(op); Py_END_ALLOW_THREADS; } \u5728python\u7aef\uff0c\u53ef\u4ee5\u4f7f\u7528\u5982\u4e0b\u4ee3\u7801\u8c03\u7528c api\u4e2d\u7684TFE_Py_Execute\u51fd\u6570 # tensorflow\\python\\eager\\execute.py tensors = pywrap_tensorflow.TFE_Py_Execute(ctx._handle, device_name, op_name, inputs, attrs, num_outputs) TFE_NewOp: c api, \u51fd\u6570 TFE_Op: c api internal\uff0c \u7ed3\u6784\u4f53 EagerOperation: c++, \u7c7b // tensorflow\\c\\eager\\c_api.cc TFE_Op* TFE_NewOp(TFE_Context* ctx, const char* op_or_function_name, TF_Status* status) { const char* name = op_or_function_name; // Shorthand const tensorflow::AttrTypeMap* types; bool is_function = false; status->status = tensorflow::AttrTypeMapForOp(name, &types, &is_function); if (!status->status.ok()) { return nullptr; } if (!is_function) { const tensorflow::OpDef* op_def; status->status = tensorflow::OpDefForOp(op_or_function_name, &op_def); if (!status->status.ok()) { return nullptr; } return new TFE_Op(ctx, name, false, types, new TFE_OpInferenceContext(op_def)); } if (!ctx->context->FindFunctionByName(name)) { status->status = tensorflow::errors::NotFound( \"'\", name, \"' is neither a type of a primitive operation nor a name \" \"of a function registered in binary running on \", tensorflow::port::Hostname(), \". Make sure the operation or function is \" \"registered in the binary running in this process.\"); return nullptr; } return new TFE_Op(ctx, name, true, types, nullptr); } // tensorflow\\c\\eager\\c_api_internal.h struct TFE_Op { TFE_Op(TFE_Context* ctx, const char* op, bool is_function, const tensorflow::AttrTypeMap* t, TFE_OpInferenceContext* inference_ctx) : operation(ctx->context, op, is_function, t), inference_ctx(inference_ctx) {} tensorflow::EagerOperation operation; std::unique_ptr<TFE_OpInferenceContext> inference_ctx; };","title":"pywrap_tensorflow"},{"location":"Machine_Learning/2019-06-21-tensorflow_eager/#eageroperation","text":"tensorflow\\core\\common_runtime\\eager\\eager_operation.h","title":"EagerOperation"},{"location":"Machine_Learning/2019-06-21-tensorflow_eager/#eagertensor","text":"EagerTensor\u4e3apython\u7c7b\uff0c \u5728_EagerTensorBase\u7c7b\u7684\u57fa\u7840\u4e0a\u7ecf\u8fc7c api\u5904\u7406\u751f\u6210 # tensorflow\\python\\framework\\ops.py from tensorflow.python import pywrap_tensorflow as c_api # TODO(agarwal): consider getting rid of this. class _EagerTensorBase(Tensor): \"\"\"Base class for EagerTensor.\"\"\" # This call creates an EagerTensor class, as a subclass of _EagerTensorBase, and # registers it with the current module. EagerTensor = c_api.TFE_Py_InitEagerTensor(_EagerTensorBase)","title":"EagerTensor"},{"location":"Machine_Learning/2019-06-21-tensorflow_eager/#eager-context","text":"tensorflow\\python\\eager\\context.py def _create_context(): global _context with _context_lock: if _context is None: _context = Context() def context(): \"\"\"Returns a singleton context object.\"\"\" if _context is None: _create_context() return _context","title":"eager context"},{"location":"Machine_Learning/2019-06-21-tensorflow_eager/#enable_eager_execution","text":"tensorflow\\python\\framework\\ops.py @tf_export(v1=[\"enable_eager_execution\"]) def enable_eager_execution(config=None, device_policy=None, execution_mode=None): _api_usage_gauge.get_cell().set(True) if context.default_execution_mode != context.EAGER_MODE: return enable_eager_execution_internal( config=config, device_policy=device_policy, execution_mode=execution_mode, server_def=None)","title":"enable_eager_execution"},{"location":"Machine_Learning/2019-11-19-keras tensorflow/","text":"keras session \u5f53\u8bbe\u7f6elog_device_placement=True\u65f6 import tensorflow as tf import tensorflow.keras.backend as K config = tf.ConfigProto() config.gpu_options.allow_growth = True # dynamically grow the memory used on the GPU config.log_device_placement = True # to log device placement (on which device the operation ran) # (nothing gets printed in Jupyter, only if you run it standalone)config.allow_soft_placement = True # to log device placement (on which device the operation ran) sess = tf.Session(config=config) K.set_session(sess) # set this TensorFlow session as the default session for Keras keras compile class Model(Netword) https://github.com/keras-team/keras/blob/master/keras/engine/training.py model compile \u88ab\u8c03\u7528\u65f6\uff0c\u4e3b\u8981\u5b8c\u6210loss function\uff0c optimizer\uff0c metrics\u90e8\u5206\u7684\u5b9a\u4e49 \u4ec5\u4ec5\u4f7f\u7528model\u8fdb\u884cpredict\u65f6\uff0c \u4e0d\u9700\u8981\u8fdb\u884ccompile \u5f53\u6539\u53d8\u53d8\u91cftrainable\u72b6\u6001\u540e\u518d\u6b21\u8fdb\u884c\u8bad\u7ec3\u4e4b\u524d\uff0c \u4e5f\u9700\u8981\u8fdb\u884ccompile keras fit_generator, train_on_batch https://github.com/keras-team/keras/blob/master/keras/engine/training_generator.py fit_generator \u5185\u90e8\u8c03\u7528\u7684\u662ftrain_on_batch\u5b8c\u6210batch\u6570\u636e\u7684\u8bad\u7ec3 fit_generator, train_on_batch\u7684\u65f6\u5019\uff0c \u5f53self.train_function\u4e3aNone\u65f6\uff08\u5373\u7b2c\u4e00\u6b21train_on_batch\u65f6\uff09\uff0c \u4f1a\u5728_make_train_function\u4e2d\u8c03\u7528optimizer\u7684get_updates\uff0c \u5b9a\u4e49\u53d8\u91cf\u7684\u68af\u5ea6\u66f4\u65b0\u53c2\u6570 train_on_batch _make_train_function # \u4eceoptimizer\u4e2d\u83b7\u5f97\u68af\u5ea6\u66f4\u65b0op\uff0c \u6784\u5efaKeras function\uff0c train_function outputs = self.train_function(ins) #\u4f7f\u7528train_function, \u628a\u8f93\u5165\u53d8\u6210\u8f93\u51fa keras \u53d8\u91cf\u5171\u4eab keras\u662f\u901a\u8fc7\u9762\u5411\u5bf9\u8c61\u6765\u5171\u4eab\u53d8\u91cf\u7684\uff0c \u5728\u5bf9\u8c61\u7684build\u65b9\u6cd5\u4e2d\u5b9a\u4e49\u53d8\u91cf(\u4f7f\u7528tf.Variable\u800c\u4e0d\u662ftf.get_variable), \u5728\u5bf9\u8c61\u7684call\u65b9\u6cd5\u4e2d\u4f7f\u7528\u53d8\u91cf keras batch \u8bad\u7ec3 keras Input x = Input(shape=(2,), dtype='string') y = x model = tf.keras.models.Model(x, y) sess = tf.Session() with sess.as_default(): sess.run(tf.global_variables_initializer()) print(sess.run(y, feed_dict={x:[[1,-5]]})) ret = model.predict(data) https://stackoverflow.com/questions/38972380/keras-how-to-use-fit-generator-with-multiple-outputs-of-different-type x = Convolution2D(8, 5, 5, subsample=(1, 1))(image_input) x = Activation('relu')(x) x = Flatten()(x) x = Dense(50, W_regularizer=l2(0.0001))(x) x = Activation('relu')(x) output1 = Dense(1, activation='linear', name='output1')(x) output2 = Dense(1, activation='linear', name='output2')(x) model = Model(input=image_input, output=[output1, output2]) model.compile(optimizer='adam', loss={'output1': 'mean_squared_error', 'output2': 'mean_squared_error'}) batch_generator(x, y, batch_size): ....transform images ....generate batch batch of size: batch_size yield(X_batch, {'output1': y1, 'output2': y2} )) model.fit_generator(batch_generator(X_train, y_train, batch_size)) keras embedding \u8f93\u5165\u5230Embedding\u5c42\u7684id\u7d22\u5f15\u9700\u8981\u5728[0, input_dim) \u533a\u95f4\u5185 keras GPU keras gpu \u5185\u5b58\u4f7f\u7528\u5927\u5c0f\u9650\u5236 import tensorflow as tf from keras.backend.tensorflow_backend import set_session config = tf.ConfigProto() config.gpu_options.allow_growth = True # dynamically grow the memory used on the GPU config.log_device_placement = True # to log device placement (on which device the operation ran) # (nothing gets printed in Jupyter, only if you run it standalone) sess = tf.Session(config=config) set_session(sess) # set this TensorFlow session as the default session for Keras keras multi GPU https://keras.io/utils/#multi_gpu_model \u6a21\u578b\u80fd\u591f\u5728GPU\u4e0a\u653e\u4e0b\uff0c \u4f7f\u7528\u6570\u636e\u5e76\u884c \u4f7f\u7528multi_gpu_model\u6784\u5efa keras layers keras layers \u7684call\u65b9\u6cd5\u5fc5\u987b\u542b\u6709inputs\u53c2\u6570\uff0c inputs\u53c2\u6570\u4e3akeras tensor\u6216\u8005keras tensor list\uff0c keras tensor\u5305\u542b_keras_history\u5c5e\u6027\uff0c Layer\u7c7b\u7684__call__\u65b9\u6cd5\u8c03\u7528\u5b50\u7c7b\u7684call\u65b9\u6cd5\u540e\uff0c \u4f1a\u6839\u636einputs\u91cc\u7684_keras_history\u4e3a\u5b50\u7c7b\u8fd4\u56de\u7684tensor\u6dfb\u52a0_keras_history. model weights keras/engine/base_layer.py add_weight\u65b9\u6cd5\u4f7f\u7528K.variable\u5b9a\u4e49\u53d8\u91cf\uff0c regularizer\u53c2\u6570\u63a7\u5236\u662f\u5426\u4f7f\u7528\u6b63\u5219\u5316 for layer in model.layers: print(\"weights:\", layer.get_weights())","title":"Tensorflow Keras"},{"location":"Machine_Learning/2019-11-19-keras tensorflow/#keras-session","text":"\u5f53\u8bbe\u7f6elog_device_placement=True\u65f6 import tensorflow as tf import tensorflow.keras.backend as K config = tf.ConfigProto() config.gpu_options.allow_growth = True # dynamically grow the memory used on the GPU config.log_device_placement = True # to log device placement (on which device the operation ran) # (nothing gets printed in Jupyter, only if you run it standalone)config.allow_soft_placement = True # to log device placement (on which device the operation ran) sess = tf.Session(config=config) K.set_session(sess) # set this TensorFlow session as the default session for Keras","title":"keras session"},{"location":"Machine_Learning/2019-11-19-keras tensorflow/#keras-compile","text":"class Model(Netword) https://github.com/keras-team/keras/blob/master/keras/engine/training.py model compile \u88ab\u8c03\u7528\u65f6\uff0c\u4e3b\u8981\u5b8c\u6210loss function\uff0c optimizer\uff0c metrics\u90e8\u5206\u7684\u5b9a\u4e49 \u4ec5\u4ec5\u4f7f\u7528model\u8fdb\u884cpredict\u65f6\uff0c \u4e0d\u9700\u8981\u8fdb\u884ccompile \u5f53\u6539\u53d8\u53d8\u91cftrainable\u72b6\u6001\u540e\u518d\u6b21\u8fdb\u884c\u8bad\u7ec3\u4e4b\u524d\uff0c \u4e5f\u9700\u8981\u8fdb\u884ccompile","title":"keras compile"},{"location":"Machine_Learning/2019-11-19-keras tensorflow/#keras-fit_generator-train_on_batch","text":"https://github.com/keras-team/keras/blob/master/keras/engine/training_generator.py fit_generator \u5185\u90e8\u8c03\u7528\u7684\u662ftrain_on_batch\u5b8c\u6210batch\u6570\u636e\u7684\u8bad\u7ec3 fit_generator, train_on_batch\u7684\u65f6\u5019\uff0c \u5f53self.train_function\u4e3aNone\u65f6\uff08\u5373\u7b2c\u4e00\u6b21train_on_batch\u65f6\uff09\uff0c \u4f1a\u5728_make_train_function\u4e2d\u8c03\u7528optimizer\u7684get_updates\uff0c \u5b9a\u4e49\u53d8\u91cf\u7684\u68af\u5ea6\u66f4\u65b0\u53c2\u6570 train_on_batch _make_train_function # \u4eceoptimizer\u4e2d\u83b7\u5f97\u68af\u5ea6\u66f4\u65b0op\uff0c \u6784\u5efaKeras function\uff0c train_function outputs = self.train_function(ins) #\u4f7f\u7528train_function, \u628a\u8f93\u5165\u53d8\u6210\u8f93\u51fa","title":"keras fit_generator, train_on_batch"},{"location":"Machine_Learning/2019-11-19-keras tensorflow/#keras","text":"keras\u662f\u901a\u8fc7\u9762\u5411\u5bf9\u8c61\u6765\u5171\u4eab\u53d8\u91cf\u7684\uff0c \u5728\u5bf9\u8c61\u7684build\u65b9\u6cd5\u4e2d\u5b9a\u4e49\u53d8\u91cf(\u4f7f\u7528tf.Variable\u800c\u4e0d\u662ftf.get_variable), \u5728\u5bf9\u8c61\u7684call\u65b9\u6cd5\u4e2d\u4f7f\u7528\u53d8\u91cf","title":"keras \u53d8\u91cf\u5171\u4eab"},{"location":"Machine_Learning/2019-11-19-keras tensorflow/#keras-batch","text":"","title":"keras batch \u8bad\u7ec3"},{"location":"Machine_Learning/2019-11-19-keras tensorflow/#keras-input","text":"x = Input(shape=(2,), dtype='string') y = x model = tf.keras.models.Model(x, y) sess = tf.Session() with sess.as_default(): sess.run(tf.global_variables_initializer()) print(sess.run(y, feed_dict={x:[[1,-5]]})) ret = model.predict(data) https://stackoverflow.com/questions/38972380/keras-how-to-use-fit-generator-with-multiple-outputs-of-different-type x = Convolution2D(8, 5, 5, subsample=(1, 1))(image_input) x = Activation('relu')(x) x = Flatten()(x) x = Dense(50, W_regularizer=l2(0.0001))(x) x = Activation('relu')(x) output1 = Dense(1, activation='linear', name='output1')(x) output2 = Dense(1, activation='linear', name='output2')(x) model = Model(input=image_input, output=[output1, output2]) model.compile(optimizer='adam', loss={'output1': 'mean_squared_error', 'output2': 'mean_squared_error'}) batch_generator(x, y, batch_size): ....transform images ....generate batch batch of size: batch_size yield(X_batch, {'output1': y1, 'output2': y2} )) model.fit_generator(batch_generator(X_train, y_train, batch_size))","title":"keras Input"},{"location":"Machine_Learning/2019-11-19-keras tensorflow/#keras-embedding","text":"\u8f93\u5165\u5230Embedding\u5c42\u7684id\u7d22\u5f15\u9700\u8981\u5728[0, input_dim) \u533a\u95f4\u5185","title":"keras embedding"},{"location":"Machine_Learning/2019-11-19-keras tensorflow/#keras-gpu","text":"","title":"keras GPU"},{"location":"Machine_Learning/2019-11-19-keras tensorflow/#keras-gpu_1","text":"import tensorflow as tf from keras.backend.tensorflow_backend import set_session config = tf.ConfigProto() config.gpu_options.allow_growth = True # dynamically grow the memory used on the GPU config.log_device_placement = True # to log device placement (on which device the operation ran) # (nothing gets printed in Jupyter, only if you run it standalone) sess = tf.Session(config=config) set_session(sess) # set this TensorFlow session as the default session for Keras","title":"keras gpu \u5185\u5b58\u4f7f\u7528\u5927\u5c0f\u9650\u5236"},{"location":"Machine_Learning/2019-11-19-keras tensorflow/#keras-multi-gpu","text":"https://keras.io/utils/#multi_gpu_model \u6a21\u578b\u80fd\u591f\u5728GPU\u4e0a\u653e\u4e0b\uff0c \u4f7f\u7528\u6570\u636e\u5e76\u884c \u4f7f\u7528multi_gpu_model\u6784\u5efa","title":"keras multi GPU"},{"location":"Machine_Learning/2019-11-19-keras tensorflow/#keras-layers","text":"keras layers \u7684call\u65b9\u6cd5\u5fc5\u987b\u542b\u6709inputs\u53c2\u6570\uff0c inputs\u53c2\u6570\u4e3akeras tensor\u6216\u8005keras tensor list\uff0c keras tensor\u5305\u542b_keras_history\u5c5e\u6027\uff0c Layer\u7c7b\u7684__call__\u65b9\u6cd5\u8c03\u7528\u5b50\u7c7b\u7684call\u65b9\u6cd5\u540e\uff0c \u4f1a\u6839\u636einputs\u91cc\u7684_keras_history\u4e3a\u5b50\u7c7b\u8fd4\u56de\u7684tensor\u6dfb\u52a0_keras_history.","title":"keras layers"},{"location":"Machine_Learning/2019-11-19-keras tensorflow/#model-weights","text":"keras/engine/base_layer.py add_weight\u65b9\u6cd5\u4f7f\u7528K.variable\u5b9a\u4e49\u53d8\u91cf\uff0c regularizer\u53c2\u6570\u63a7\u5236\u662f\u5426\u4f7f\u7528\u6b63\u5219\u5316 for layer in model.layers: print(\"weights:\", layer.get_weights())","title":"model weights"},{"location":"algorithm/2018-12-11-binary tree/","text":"226. Invert Binary Tree \u4f7f\u7528\u6808 /** * Definition for a binary tree node. * struct TreeNode { * int val; * TreeNode *left; * TreeNode *right; * TreeNode(int x) : val(x), left(NULL), right(NULL) {} * }; */ class Solution { public: TreeNode* invertTree(TreeNode* root) { if(root == nullptr) return nullptr; stack<TreeNode*> stk; stk.push(root); while(!stk.empty()) { TreeNode* p = stk.top(); stk.pop(); if(p) { stk.push(p->left); stk.push(p->right); swap(p->left, p->right); } } return root; } }; \u4f7f\u7528\u961f\u5217 class Solution { public: TreeNode* invertTree(TreeNode* root) { if(root == nullptr) return nullptr; queue<TreeNode*> q; q.push(root); while(!q.empty()) { TreeNode* p = q.front(); q.pop(); if(p->left != nullptr) q.push(p->left); if(p->right != nullptr) q.push(p->right); swap(p->left, p->right); } return root; } };","title":"jekyll blog"},{"location":"algorithm/2018-12-11-binary tree/#226-invert-binary-tree","text":"\u4f7f\u7528\u6808 /** * Definition for a binary tree node. * struct TreeNode { * int val; * TreeNode *left; * TreeNode *right; * TreeNode(int x) : val(x), left(NULL), right(NULL) {} * }; */ class Solution { public: TreeNode* invertTree(TreeNode* root) { if(root == nullptr) return nullptr; stack<TreeNode*> stk; stk.push(root); while(!stk.empty()) { TreeNode* p = stk.top(); stk.pop(); if(p) { stk.push(p->left); stk.push(p->right); swap(p->left, p->right); } } return root; } }; \u4f7f\u7528\u961f\u5217 class Solution { public: TreeNode* invertTree(TreeNode* root) { if(root == nullptr) return nullptr; queue<TreeNode*> q; q.push(root); while(!q.empty()) { TreeNode* p = q.front(); q.pop(); if(p->left != nullptr) q.push(p->left); if(p->right != nullptr) q.push(p->right); swap(p->left, p->right); } return root; } };","title":"226. Invert Binary Tree"},{"location":"android/2019-04-21-scrcpy/","text":"title soaringsoul 2019-04-21 21:26:13 https://github.com/Genymobile/scrcpy https://www.jianshu.com/p/06f4b8919991 client(\u7535\u8111\u7aef) scrcpy bin\u6587\u4ef6 libav (FFmpeg): \u89c6\u9891\u6d41\u89e3\u7801decode SDL: cross-platform UI api, \u6e90\u7801: scrcpy/app main thread - \u4e8b\u4ef6\u5faa\u73af\uff0c \u5904\u7406SDL_Event stream thread - \u89e3\u7801\u89c6\u9891\uff0c \u81ea\u5b9a\u4e49EVENT_NEW_FRAME\u4e8b\u4ef6\uff0cpush SDL_Event\u901a\u77e5\u4e3b\u7ebf\u7a0b\u66f4\u65b0 controller thread - \u53d1\u9001\u63a7\u5236\u4fe1\u606f\u5230\u624b\u673a\u7aef\uff0c control_event \u9f20\u6807\u79fb\u52a8\u4e8b\u4ef6 SDL_MOUSEMOTION\uff0c input_manager_process_mouse_motion server(\u624b\u673a\u7aef) \u6e90\u7801scrcpy/server DesktopConnection - \u8d1f\u8d23\u548cPC\u7aef\u5efa\u7acb\u7f51\u7edc\u8fde\u63a5 ScreenEncoder - \u8d1f\u8d23\u7f16\u7801\u89c6\u9891\u6d41 EventController - \u7ebf\u7a0b\u8d1f\u8d23\u4f20\u9012\u63a7\u5236\u4fe1\u606f main thread - encoding and streaming the video to the client; controller thread - \u63a5\u53d7\u63a7\u5236\u4e8b\u4ef6 ScreenEncoder MediaFormat \u8bbe\u7f6e\u683c\u5f0f MediaCodec DesktopConnection tunnelForward = true, \u624b\u673a\u7aef\u4f5c\u4e3a\u7f51\u7edc\u670d\u52a1\u7aef\uff0c\u7535\u8111\u7aef\u4f5c\u4e3a\u7f51\u7edc\u5ba2\u6237\u7aef tunnelForward = false, \u624b\u673a\u7aef\u4f5c\u4e3a\u7f51\u7edc\u5ba2\u6237\u7aef\uff0c\u7535\u8111\u7aef\u4f5c\u4e3a\u7f51\u7edc\u670d\u52a1\u7aef \u4f18\u5148\u4f7f\u7528adb reverse(\u5bf9\u5e94tunnelForward = false)\uff0c \u5982\u679c\u5931\u8d25\u5219\u4f7f\u7528adb forward(\u5bf9\u5e94tunnel_forward=true) \u624b\u673a\u7aef\u5f00\u53d1 \u624b\u52a8\u5b89\u88c5\u548c\u542f\u52a8 \u8fdb\u5165server\u76ee\u5f55\uff0c \u7f16\u8bd1\u751f\u6210apk\u6587\u4ef6 adb push build/outputs/apk/debug/server-debug.apk /data/local/tmp/ adb shell \"CLASSPATH=/data/local/tmp/server-debug.apk app_process / com.genymobile.scrcpy.Server 0 8000000 false - false\" build prebuilt-deps: ffmpeg sdl adb app: scrcpy bin\u6587\u4ef6\u6e90\u7801 server: scrcpy-server.jar scrcpy \u624b\u673a\u7aef \u4f7f\u7528android app\u65b9\u5f0f\u5f00\u53d1\uff1a \u751f\u6210IBinder\u65f6\u8fd4\u56de\u4e3anull\uff0c \u9519\u8bef\u539f\u56e0\uff1a E/SurfaceFlinger: Permission Denial: can't access SurfaceFlinger pid=4202, uid=10095 private static IBinder createDisplay() { return SurfaceControl.createDisplay(\"scrcpy\", true); } \u4f7f\u7528android java\u65b9\u6cd5\u5f00\u53d1\uff1a \u65e0\u6743\u9650\u95ee\u9898\uff0c \u4f46\u662f\u65e0\u6cd5\u83b7\u5f97Context\uff0c\u65e0\u6cd5\u5efa\u7acbActivity\u548cService","title":"2019 04 21 scrcpy"},{"location":"android/2019-04-21-scrcpy/#client","text":"scrcpy bin\u6587\u4ef6 libav (FFmpeg): \u89c6\u9891\u6d41\u89e3\u7801decode SDL: cross-platform UI api, \u6e90\u7801: scrcpy/app main thread - \u4e8b\u4ef6\u5faa\u73af\uff0c \u5904\u7406SDL_Event stream thread - \u89e3\u7801\u89c6\u9891\uff0c \u81ea\u5b9a\u4e49EVENT_NEW_FRAME\u4e8b\u4ef6\uff0cpush SDL_Event\u901a\u77e5\u4e3b\u7ebf\u7a0b\u66f4\u65b0 controller thread - \u53d1\u9001\u63a7\u5236\u4fe1\u606f\u5230\u624b\u673a\u7aef\uff0c control_event \u9f20\u6807\u79fb\u52a8\u4e8b\u4ef6 SDL_MOUSEMOTION\uff0c input_manager_process_mouse_motion","title":"client(\u7535\u8111\u7aef)"},{"location":"android/2019-04-21-scrcpy/#server","text":"\u6e90\u7801scrcpy/server DesktopConnection - \u8d1f\u8d23\u548cPC\u7aef\u5efa\u7acb\u7f51\u7edc\u8fde\u63a5 ScreenEncoder - \u8d1f\u8d23\u7f16\u7801\u89c6\u9891\u6d41 EventController - \u7ebf\u7a0b\u8d1f\u8d23\u4f20\u9012\u63a7\u5236\u4fe1\u606f main thread - encoding and streaming the video to the client; controller thread - \u63a5\u53d7\u63a7\u5236\u4e8b\u4ef6 ScreenEncoder MediaFormat \u8bbe\u7f6e\u683c\u5f0f MediaCodec DesktopConnection tunnelForward = true, \u624b\u673a\u7aef\u4f5c\u4e3a\u7f51\u7edc\u670d\u52a1\u7aef\uff0c\u7535\u8111\u7aef\u4f5c\u4e3a\u7f51\u7edc\u5ba2\u6237\u7aef tunnelForward = false, \u624b\u673a\u7aef\u4f5c\u4e3a\u7f51\u7edc\u5ba2\u6237\u7aef\uff0c\u7535\u8111\u7aef\u4f5c\u4e3a\u7f51\u7edc\u670d\u52a1\u7aef \u4f18\u5148\u4f7f\u7528adb reverse(\u5bf9\u5e94tunnelForward = false)\uff0c \u5982\u679c\u5931\u8d25\u5219\u4f7f\u7528adb forward(\u5bf9\u5e94tunnel_forward=true)","title":"server(\u624b\u673a\u7aef)"},{"location":"android/2019-04-21-scrcpy/#_1","text":"\u624b\u52a8\u5b89\u88c5\u548c\u542f\u52a8 \u8fdb\u5165server\u76ee\u5f55\uff0c \u7f16\u8bd1\u751f\u6210apk\u6587\u4ef6 adb push build/outputs/apk/debug/server-debug.apk /data/local/tmp/ adb shell \"CLASSPATH=/data/local/tmp/server-debug.apk app_process / com.genymobile.scrcpy.Server 0 8000000 false - false\"","title":"\u624b\u673a\u7aef\u5f00\u53d1"},{"location":"android/2019-04-21-scrcpy/#build","text":"prebuilt-deps: ffmpeg sdl adb app: scrcpy bin\u6587\u4ef6\u6e90\u7801 server: scrcpy-server.jar","title":"build"},{"location":"android/2019-04-21-scrcpy/#scrcpy","text":"\u4f7f\u7528android app\u65b9\u5f0f\u5f00\u53d1\uff1a \u751f\u6210IBinder\u65f6\u8fd4\u56de\u4e3anull\uff0c \u9519\u8bef\u539f\u56e0\uff1a E/SurfaceFlinger: Permission Denial: can't access SurfaceFlinger pid=4202, uid=10095 private static IBinder createDisplay() { return SurfaceControl.createDisplay(\"scrcpy\", true); } \u4f7f\u7528android java\u65b9\u6cd5\u5f00\u53d1\uff1a \u65e0\u6743\u9650\u95ee\u9898\uff0c \u4f46\u662f\u65e0\u6cd5\u83b7\u5f97Context\uff0c\u65e0\u6cd5\u5efa\u7acbActivity\u548cService","title":"scrcpy \u624b\u673a\u7aef"},{"location":"android/2019-05-11-android/","text":"layout: post title: \"android\" subtitle: \"android\" date: 2019-05-11 10:51:40 author: \"none\" header-img: \"img/posts/default_post.jpg\" catalog: true tags: - tag application \u5e94\u7528\u4ec0\u4e48\u5468\u671f\u5185\u4ec5\u5141\u8bb8\u4e00\u6b21 service \u8c03\u7528\u987a\u5e8f onCreate onStartCommand service debug android\u4ee3\u7801\u4e2d\u6dfb\u52a0 android.os.Debug.waitForDebugger(); \u4f7f\u7528app_process\u542f\u52a8java\u8fdb\u7a0b\uff08\u8fdb\u7a0b\u548cshell\u7528\u6237\u6743\u9650\u76f8\u540c\uff09 adb shell \"CLASSPATH=/data/local/tmp/server-debug.apk app_process / com.genymobile.scrcpy.Server 0 8000000 false - false\" \u4f7f\u7528am start \u542f\u52a8apk\uff0capk\u9700\u8981\u5df2\u5b89\u88c5 adb shell \"am start -n com.genymobile.scrcpy/com.genymobile.scrcpy.Server\" \u542f\u52a8service adb shell am start-foreground-service -n com.genymobile.scrcpy/.MouseService adb shell am start-service -n com.genymobile.scrcpy/.MouseService \u5728service\u4e2d\u663e\u793a\u60ac\u6d6e\u7a97 \u539f\u751fjava\u7ebf\u7a0b\u4e2d\u8bbf\u95eeandroid \u76f8\u5173\u63a5\u53e3 Activity, Service\u7684\u542f\u52a8\u65b9\u6cd5startActivity, startService\u4f9d\u8d56Intent\u548cContext ActivityManager\uff0c ServiceManager \u539f\u751f\u7ebf\u7a0b\u4e2d\u83b7\u53d6android\u7684service private final ServiceManager serviceManager = new ServiceManager(); DisplayInfo displayInfo = serviceManager.getDisplayManager().getDisplayInfo(); serviceManager.getInputManager().injectInputEvent(inputEvent, mode); serviceManager.getWindowManager().registerRotationWatcher(rotationWatcher); serviceManager.getStatusBarManager().expandNotificationsPanel(); \u7cfb\u7edf\u670d\u52a1 \u7cfb\u7edf\u8fdb\u7a0bsystem_server\uff0c \u4e3a\u6240\u6709\u5e94\u7528\u63d0\u4f9b\u670d\u52a1 ActivityManagerService WindowManagerService \u8fdb\u7a0b\u95f4\u901a\u4fe1(Binder)","title":"2019 05 11 android"},{"location":"android/2019-05-11-android/#app_processjavashell","text":"adb shell \"CLASSPATH=/data/local/tmp/server-debug.apk app_process / com.genymobile.scrcpy.Server 0 8000000 false - false\"","title":"\u4f7f\u7528app_process\u542f\u52a8java\u8fdb\u7a0b\uff08\u8fdb\u7a0b\u548cshell\u7528\u6237\u6743\u9650\u76f8\u540c\uff09"},{"location":"android/2019-05-11-android/#am-start-apkapk","text":"adb shell \"am start -n com.genymobile.scrcpy/com.genymobile.scrcpy.Server\"","title":"\u4f7f\u7528am start \u542f\u52a8apk\uff0capk\u9700\u8981\u5df2\u5b89\u88c5"},{"location":"android/2019-05-11-android/#service","text":"adb shell am start-foreground-service -n com.genymobile.scrcpy/.MouseService adb shell am start-service -n com.genymobile.scrcpy/.MouseService \u5728service\u4e2d\u663e\u793a\u60ac\u6d6e\u7a97","title":"\u542f\u52a8service"},{"location":"android/2019-05-11-android/#javaandroid","text":"Activity, Service\u7684\u542f\u52a8\u65b9\u6cd5startActivity, startService\u4f9d\u8d56Intent\u548cContext ActivityManager\uff0c ServiceManager \u539f\u751f\u7ebf\u7a0b\u4e2d\u83b7\u53d6android\u7684service private final ServiceManager serviceManager = new ServiceManager(); DisplayInfo displayInfo = serviceManager.getDisplayManager().getDisplayInfo(); serviceManager.getInputManager().injectInputEvent(inputEvent, mode); serviceManager.getWindowManager().registerRotationWatcher(rotationWatcher); serviceManager.getStatusBarManager().expandNotificationsPanel();","title":"\u539f\u751fjava\u7ebf\u7a0b\u4e2d\u8bbf\u95eeandroid \u76f8\u5173\u63a5\u53e3"},{"location":"android/2019-05-11-android/#_1","text":"\u7cfb\u7edf\u8fdb\u7a0bsystem_server\uff0c \u4e3a\u6240\u6709\u5e94\u7528\u63d0\u4f9b\u670d\u52a1 ActivityManagerService WindowManagerService","title":"\u7cfb\u7edf\u670d\u52a1"},{"location":"android/2019-05-11-android/#binder","text":"","title":"\u8fdb\u7a0b\u95f4\u901a\u4fe1(Binder)"},{"location":"bigdata/2019-06-04-hive/","text":"layout: post title: \"hive\" subtitle: \"hive\" date: 2019-06-04 15:48:34 author: \"none\" header-img: \"img/posts/default_post.jpg\" catalog: true tags: - tag hive -e \" ; \" show databases use <database> show tables show partitions <table> desc formatted <table> desc formatted <database>.<table>","title":"2019 06 04 hive"},{"location":"cpp/2019-04-17-build_system/","text":"Makefile \u9690\u542b\u89c4\u5219 %.o:%.cpp @echo \"[^[[1;32;40mBUILD^[[0m][Target:'^[[1;32;40m$<^[[0m']\" @$(CXX) $(CXXFLAGS) $(INC_DIR) -c $< -o $@ eg: $< \u8868\u793amain.cpp $@ \u8868\u793amain.o \u81ea\u52a8\u53d8\u91cf $@ \u76ee\u6807 $< \u89c4\u5219\u7684\u7b2c\u4e00\u4e2a\u4f9d\u8d56\u76ee\u6807 \u4f7f\u7528shell\u547d\u4ee4\u627e\u5230cpp\u6587\u4ef6 $(shell find . -name \"*.cpp\") \u5c06 .cpp\u6587\u4ef6\u66ff\u6362\u6210 .o\u6587\u4ef6 $(patsubst %.cpp,%.o, $(cpp_files))","title":"\ufffd\ufffd\ufffd\ufffd"},{"location":"cpp/2019-04-17-build_system/#makefile","text":"","title":"Makefile"},{"location":"cpp/2019-04-17-build_system/#_1","text":"%.o:%.cpp @echo \"[^[[1;32;40mBUILD^[[0m][Target:'^[[1;32;40m$<^[[0m']\" @$(CXX) $(CXXFLAGS) $(INC_DIR) -c $< -o $@ eg: $< \u8868\u793amain.cpp $@ \u8868\u793amain.o","title":"\u9690\u542b\u89c4\u5219"},{"location":"cpp/2019-04-17-build_system/#_2","text":"$@ \u76ee\u6807 $< \u89c4\u5219\u7684\u7b2c\u4e00\u4e2a\u4f9d\u8d56\u76ee\u6807","title":"\u81ea\u52a8\u53d8\u91cf"},{"location":"cpp/2019-04-17-regress_test/","text":"\ufffd\ufffd\ufffd\ufffd soaringsoul 2019-04-17 16:22:51 \u56de\u5f52\u6d4b\u8bd5 master master_test (master\u5206\u652f\u7684\u6d4b\u8bd5\u73af\u5883) dev dev_test (dev \u5206\u652f\u7684\u6d4b\u8bd5\u73af\u5883) master_test \u548c dev_test \u5747\u5408\u5e76 \u9884\u4e0a\u7ebf\u6d4b\u8bd5 \u62f7\u8d1d\u7ebf\u4e0a\u771f\u5b9e\u6d41\u91cf\u5230\u6d4b\u8bd5\u670d\u52a1\u5668 \u89c2\u5bdf\u6307\u6807 qps\uff0c \u8d85\u65f6\u60c5\u51b5","title":"2019 04 17 regress test"},{"location":"cpp/2019-04-17-regress_test/#_1","text":"master master_test (master\u5206\u652f\u7684\u6d4b\u8bd5\u73af\u5883) dev dev_test (dev \u5206\u652f\u7684\u6d4b\u8bd5\u73af\u5883) master_test \u548c dev_test \u5747\u5408\u5e76","title":"\u56de\u5f52\u6d4b\u8bd5"},{"location":"cpp/2019-04-17-regress_test/#_2","text":"\u62f7\u8d1d\u7ebf\u4e0a\u771f\u5b9e\u6d41\u91cf\u5230\u6d4b\u8bd5\u670d\u52a1\u5668 \u89c2\u5bdf\u6307\u6807 qps\uff0c \u8d85\u65f6\u60c5\u51b5","title":"\u9884\u4e0a\u7ebf\u6d4b\u8bd5"},{"location":"cpp/2019-04-18-project/","text":"enum \u548c enum class enum class \u5e26\u6709\u4f5c\u7528\u57df\uff0c \u8f6c\u6362\u4e3aint\u65f6\u9700\u8981\u4f7f\u7528static_cast () cast dynamic_cast \u4f7f\u7528\u573a\u666f\uff1a \u5c06\u57fa\u7c7b\u6307\u9488\u8f6c\u4e3a\u6d3e\u751f\u7c7b\u6307\u9488\uff0c\u4fbf\u4e8e\u8c03\u7528\u6d3e\u751f\u7c7b\u7279\u6709\u65b9\u6cd5 \u5728\u8fd0\u884c\u65f6\u53bb\u505a\u8f6c\u6362\u800c\u975e\u7f16\u8bd1\u65f6, \u8f6c\u6362\u4e0d\u6210\u529f\u5219\u8fd4\u56deNULL Base* b = new Derived(); b->Func(); // \u5b89\u5168\u8f6c\u6362 Derived* d = dynamic_cast<Derived*>(b); if (d != NULL) { d->NewFunc(); } static_cast \u4f7f\u7528\u573a\u666f\uff1a void\u6307\u9488\u8f6c\u4e3a\u5176\u4ed6\u7c7b\u578b\u6307\u9488\uff0c \u6d3e\u751f\u7c7b\u6307\u9488\u8f6c\u6362\u4e3a\u57fa\u7c7b\u6307\u9488 \u907f\u514d\u4f7f\u7528static_cast\u5c06\u57fa\u7c7b\u6307\u9488\u8f6c\u6362\u4e3a\u6d3e\u751f\u7c7b\u6307\u9488\uff0c\u56e0\u4e3a\u65e0\u8fd0\u884c\u65f6\u7c7b\u578b\u68c0\u67e5\uff0c\u4e0d\u5b89\u5168 static_cast < type-id > ( expression ) const_cast \u4f7f\u7528\u573a\u666f\uff1a \u79fb\u9664const\u5c5e\u6027 std::string value; char* name = const_cast<char*>(value.c_str()), malloc malloc (multi-threaded heap uses critical sections) new scalable_malloc https://andylin02.iteye.com/blog/724095 \u7f13\u5b58\u8fb9\u754c\u5bf9\u9f50\uff0c\u9632\u6b62\u591a\u7ebf\u7a0b\u9891\u7e41\u5bfc\u81f4\u7684\u7f13\u5b58\u5237\u65b0 new \u548c new (std::nothrow) new \u5728\u5185\u5b58\u5206\u914d\u5931\u8d25\u65f6\uff0c\u4f1a\u629b\u51fa\u5f02\u5e38\u7c7b\u578bstd::bad_alloc\u3002 new (std::nothrow) \u5728\u5185\u5b58\u5206\u914d\u5931\u8d25\u65f6\uff0c\u4e0d\u4f1a\u629b\u51fa\u5f02\u5e38\uff0c\u800c\u662f\u8fd4\u56deNULL Task * ptask = new (std::nothrow) Task; \u865a\u51fd\u6570\u548c\u7eaf\u865a\u51fd\u6570 \u7eaf\u865a\u51fd\u6570\uff0c \u57fa\u7c7b\u4e0d\u80fd\u5b9e\u4f8b\u5316 \u865a\u51fd\u6570\uff0c \u57fa\u7c7b\u6307\u9488\u591a\u6001 \u6d3e\u751f\u7c7b\u8c03\u7528\u57fa\u7c7b\u7684\u865a\u51fd\u6570\uff0c\u5728\u6d3e\u751f\u7c7b\u4e2d\u4f7f\u7528\u57fa\u7c7b\u7684\u57df\u8bbf\u95ee\u7b26\u53f7\u5373\u53ef\u8c03\u7528\u57fa\u7c7b\u7684\u865a\u51fd\u6570 \u79fb\u52a8\u6784\u9020\u548c\u62f7\u8d1d\u6784\u9020 https://zh.cppreference.com/w/cpp/language/move_constructor \u7f16\u8bd1\u5668\u81ea\u52a8\u751f\u6210\u79fb\u52a8\u6784\u9020\u51fd\u6570\u7684\u6761\u4ef6\uff1a \u6ca1\u6709\u7528\u6237\u58f0\u660e\u7684\u590d\u5236\u6784\u9020\u51fd\u6570\uff1b \u6ca1\u6709\u7528\u6237\u58f0\u660e\u7684\u590d\u5236\u8d4b\u503c\u8fd0\u7b97\u7b26\uff1b \u6ca1\u6709\u7528\u6237\u58f0\u660e\u7684\u79fb\u52a8\u8d4b\u503c\u8fd0\u7b97\u7b26\uff1b \u6ca1\u6709\u7528\u6237\u58f0\u660e\u7684\u6790\u6784\u51fd\u6570\uff1b \u7f16\u8bd1\u5668\u6ca1\u6709\u81ea\u52a8\u751f\u6210\u79fb\u52a8\u6784\u9020\u51fd\u6570\u65f6\uff0c \u53c2\u6570\u4e3a\u53f3\u503c\u65f6\u6216\u4f7f\u7528std::move\u8f6c\u6362\u53c2\u6570\uff0c\u4ecd\u7136\u4f1a\u8c03\u7528\u62f7\u8d1d\u6784\u9020 RVO\u548cNRVO RVO\uff08\u8fd4\u56de\u503c\u4f18\u5316\uff09 NRVO(\u5177\u540d\u8fd4\u56de\u503c\u4f18\u5316) \u8fd4\u56de\u503c\u4f1a\u4f18\u5148\u5339\u914d\u79fb\u52a8\u6784\u9020\u8fdb\u884c\u8fd4\u56de \u51fd\u6570\u91cd\u8f7d \u51fd\u6570\u540d \u8fd4\u56de\u503c \u53c2\u6570\u5217\u8868 const \u4ec5\u5f53const\u53c2\u6570\u662f\u4e00\u4e2a\u5f15\u7528\u6216\u6307\u9488\u65f6\uff0cC++\u624d\u5141\u8bb8\u57fa\u4e8econst\u7c7b\u578b\u8fdb\u884c\u51fd\u6570\u91cd\u8f7d #include<iostream> using namespace std; void fun(const int i) { cout << \"fun(const int) called \"; } void fun(int i) { cout << \"fun(int ) called \" ; } int main() { const int i = 10; fun(i); return 0; } error: redefinition of \u2018void fun(int)\u2019 json JSON String Escape https://www.freeformatter.com/json-escape.html#ad-output Json Parser Online http://json.parser.online.fr/ redis # --raw \u663e\u793a\u4e2d\u6587\u95ee\u9898 redis-cli -h <ip> -p <port> -a <password> --raw # \u67e5\u770bredis\u4fe1\u606f info \u54c8\u5e0c\u8868 key \u8868\u793a\u4e00\u4e2a\u54c8\u5e0c\u8868 # \u5199\u64cd\u4f5c\uff1a HSET\u5199\u5165\u5355\u4e2a\u57df\uff0c HMSET\u5199\u5165\u591a\u4e2a\u57df HSET key field value HMSET key field value [field value \u2026] # \u8bfb\u64cd\u4f5c\uff1aHGET\u8bfb\u51fa\u5355\u4e2a\u57df\uff0c HMGET\u8bfb\u51fa\u591a\u4e2a\u57df\uff0c HGETALL\u8bfb\u51fa\u6240\u6709\u57df HGET key field HMGET key field [field \u2026] HGETALL key # \u54c8\u5e0c\u8868key\u4e2d\u57df\u7684\u4e2a\u6570 HLEN key redis \u6a21\u5f0f \u4e3b\u4ece\u6a21\u5f0f Redis Sentinel (\u54e8\u5175\u6a21\u5f0f) Redis Sentinel \u672c\u8eab\u4e5f\u662fredis\uff0c \u53ef\u4ee5\u901a\u8fc7redis-cli\u8fdb\u884c\u8fde\u63a5\uff0c \u4f46\u5176\u4e0a\u5b58\u50a8\u7684\u662fredis\u4e3b\u4ece\u914d\u7f6e\u4fe1\u606f\uff0c\u4e00\u822c\u4e0d\u5b58\u50a8\u751f\u4ea7\u6570\u636e # \u83b7\u53d6sentinel\u6709\u591a\u5c11\u4e2amaster\uff0c \u53ca\u6bcf\u4e2amaster\u7684\u540d\u79f0\uff0c \u6bcf\u4e2amaster\u5bf9\u5e94\u4e00\u4e2aredis\u4e3b\u4ece\u670d\u52a1 INFO Sentinel # \u83b7\u53d6master_name\u5bf9\u5e94\u7684redis\u4e3b\u4ece\u670d\u52a1\u7684master\u4e3b\u673aip\u548c\u7aef\u53e3 SENTINEL get-master-addr-by-name <master_name> # \u83b7\u53d6master_name\u5bf9\u5e94\u7684redis\u4e3b\u4ece\u670d\u52a1\u7684slaves\u7684\u4ece\u673aip\u548c\u7aef\u53e3(\u53ef\u80fd\u6709\u591a\u4e2a) SENTINEL slaves <master_name> kafka topic(\u4e3b\u9898) partition(\u5206\u533a) \u4e00\u4e2abroker\u4e0a\u53ef\u4ee5\u5b58\u50a8\u591a\u4e2a\u5206\u533a\u7684\u6570\u636e\uff0c \u6bcf\u4e2a\u5206\u533a\u5bf9\u5e94\u4e00\u4e2a\u6587\u4ef6\u5939\uff0c \u6bcf\u4e2apartition\u4e0a\u5b58\u5728\u591a\u4e2asegment\uff0c \u6bcf\u4e2asegment\u5bf9\u5e94\u4e24\u4e2a\u6587\u4ef6\uff08\u6570\u636e\u6587\u4ef6\u548c\u7d22\u5f15\u6587\u4ef6\uff09 consumer group(\u6d88\u8d39\u7ec4) \u6bcf\u4e2a\u6d88\u8d39\u7ec4\u80fd consumer(\u6d88\u8d39\u8005) \u4e00\u4e2a\u6d88\u8d39\u7ec4\u91cc\u6d88\u8d39\u8005\u5408\u4f5c\u6d88\u8d39\u4fe1\u606f \u4e00\u4e2a\u6d88\u8d39\u8005\u53ef\u4ee5\u6d88\u8d39\u591a\u4e2a\u5206\u533a \u6d88\u8d39\u8005\u7684\u6570\u76ee\u9700\u8981\u5c0f\u4e8e\u7b49\u4e8e\u5206\u533a\u6570\uff0c\u5426\u5219\u4f1a\u6709\u6d88\u8d39\u8005\u7a7a\u95f2 \u4e00\u4e2a\u7ebf\u7a0b\u53ea\u80fd\u6709\u4e00\u4e2a\u6d88\u8d39\u8005\uff0c \u6d88\u8d39\u8005\u4e0d\u662f\u7ebf\u7a0b\u5b89\u5168\u7684 \u67e5\u770btopic\u4fe1\u606f bin/kafka-topics.sh --bootstrap-server localhost:9092 --describe --topic my-replicated-topic \u7248\u672c\u7ba1\u7406\uff0c \u914d\u7f6e\u91cd\u52a0\u8f7d tensorflow_serving/core/source.h Source \u6570\u636e\u65b0\u7248\u672c\u76d1\u63a7","title":"\ufffd\ufffd\ufffd\ufffd"},{"location":"cpp/2019-04-18-project/#enum-enum-class","text":"enum class \u5e26\u6709\u4f5c\u7528\u57df\uff0c \u8f6c\u6362\u4e3aint\u65f6\u9700\u8981\u4f7f\u7528static_cast ()","title":"enum \u548c enum class"},{"location":"cpp/2019-04-18-project/#cast","text":"dynamic_cast \u4f7f\u7528\u573a\u666f\uff1a \u5c06\u57fa\u7c7b\u6307\u9488\u8f6c\u4e3a\u6d3e\u751f\u7c7b\u6307\u9488\uff0c\u4fbf\u4e8e\u8c03\u7528\u6d3e\u751f\u7c7b\u7279\u6709\u65b9\u6cd5 \u5728\u8fd0\u884c\u65f6\u53bb\u505a\u8f6c\u6362\u800c\u975e\u7f16\u8bd1\u65f6, \u8f6c\u6362\u4e0d\u6210\u529f\u5219\u8fd4\u56deNULL Base* b = new Derived(); b->Func(); // \u5b89\u5168\u8f6c\u6362 Derived* d = dynamic_cast<Derived*>(b); if (d != NULL) { d->NewFunc(); } static_cast \u4f7f\u7528\u573a\u666f\uff1a void\u6307\u9488\u8f6c\u4e3a\u5176\u4ed6\u7c7b\u578b\u6307\u9488\uff0c \u6d3e\u751f\u7c7b\u6307\u9488\u8f6c\u6362\u4e3a\u57fa\u7c7b\u6307\u9488 \u907f\u514d\u4f7f\u7528static_cast\u5c06\u57fa\u7c7b\u6307\u9488\u8f6c\u6362\u4e3a\u6d3e\u751f\u7c7b\u6307\u9488\uff0c\u56e0\u4e3a\u65e0\u8fd0\u884c\u65f6\u7c7b\u578b\u68c0\u67e5\uff0c\u4e0d\u5b89\u5168 static_cast < type-id > ( expression ) const_cast \u4f7f\u7528\u573a\u666f\uff1a \u79fb\u9664const\u5c5e\u6027 std::string value; char* name = const_cast<char*>(value.c_str()),","title":"cast"},{"location":"cpp/2019-04-18-project/#malloc","text":"malloc (multi-threaded heap uses critical sections) new scalable_malloc https://andylin02.iteye.com/blog/724095 \u7f13\u5b58\u8fb9\u754c\u5bf9\u9f50\uff0c\u9632\u6b62\u591a\u7ebf\u7a0b\u9891\u7e41\u5bfc\u81f4\u7684\u7f13\u5b58\u5237\u65b0","title":"malloc"},{"location":"cpp/2019-04-18-project/#new-new-stdnothrow","text":"new \u5728\u5185\u5b58\u5206\u914d\u5931\u8d25\u65f6\uff0c\u4f1a\u629b\u51fa\u5f02\u5e38\u7c7b\u578bstd::bad_alloc\u3002 new (std::nothrow) \u5728\u5185\u5b58\u5206\u914d\u5931\u8d25\u65f6\uff0c\u4e0d\u4f1a\u629b\u51fa\u5f02\u5e38\uff0c\u800c\u662f\u8fd4\u56deNULL Task * ptask = new (std::nothrow) Task;","title":"new \u548c new (std::nothrow)"},{"location":"cpp/2019-04-18-project/#_1","text":"\u7eaf\u865a\u51fd\u6570\uff0c \u57fa\u7c7b\u4e0d\u80fd\u5b9e\u4f8b\u5316 \u865a\u51fd\u6570\uff0c \u57fa\u7c7b\u6307\u9488\u591a\u6001 \u6d3e\u751f\u7c7b\u8c03\u7528\u57fa\u7c7b\u7684\u865a\u51fd\u6570\uff0c\u5728\u6d3e\u751f\u7c7b\u4e2d\u4f7f\u7528\u57fa\u7c7b\u7684\u57df\u8bbf\u95ee\u7b26\u53f7\u5373\u53ef\u8c03\u7528\u57fa\u7c7b\u7684\u865a\u51fd\u6570","title":"\u865a\u51fd\u6570\u548c\u7eaf\u865a\u51fd\u6570"},{"location":"cpp/2019-04-18-project/#_2","text":"https://zh.cppreference.com/w/cpp/language/move_constructor \u7f16\u8bd1\u5668\u81ea\u52a8\u751f\u6210\u79fb\u52a8\u6784\u9020\u51fd\u6570\u7684\u6761\u4ef6\uff1a \u6ca1\u6709\u7528\u6237\u58f0\u660e\u7684\u590d\u5236\u6784\u9020\u51fd\u6570\uff1b \u6ca1\u6709\u7528\u6237\u58f0\u660e\u7684\u590d\u5236\u8d4b\u503c\u8fd0\u7b97\u7b26\uff1b \u6ca1\u6709\u7528\u6237\u58f0\u660e\u7684\u79fb\u52a8\u8d4b\u503c\u8fd0\u7b97\u7b26\uff1b \u6ca1\u6709\u7528\u6237\u58f0\u660e\u7684\u6790\u6784\u51fd\u6570\uff1b \u7f16\u8bd1\u5668\u6ca1\u6709\u81ea\u52a8\u751f\u6210\u79fb\u52a8\u6784\u9020\u51fd\u6570\u65f6\uff0c \u53c2\u6570\u4e3a\u53f3\u503c\u65f6\u6216\u4f7f\u7528std::move\u8f6c\u6362\u53c2\u6570\uff0c\u4ecd\u7136\u4f1a\u8c03\u7528\u62f7\u8d1d\u6784\u9020","title":"\u79fb\u52a8\u6784\u9020\u548c\u62f7\u8d1d\u6784\u9020"},{"location":"cpp/2019-04-18-project/#_4","text":"\u51fd\u6570\u540d \u8fd4\u56de\u503c \u53c2\u6570\u5217\u8868 const \u4ec5\u5f53const\u53c2\u6570\u662f\u4e00\u4e2a\u5f15\u7528\u6216\u6307\u9488\u65f6\uff0cC++\u624d\u5141\u8bb8\u57fa\u4e8econst\u7c7b\u578b\u8fdb\u884c\u51fd\u6570\u91cd\u8f7d #include<iostream> using namespace std; void fun(const int i) { cout << \"fun(const int) called \"; } void fun(int i) { cout << \"fun(int ) called \" ; } int main() { const int i = 10; fun(i); return 0; } error: redefinition of \u2018void fun(int)\u2019","title":"\u51fd\u6570\u91cd\u8f7d"},{"location":"cpp/2019-04-18-project/#json","text":"JSON String Escape https://www.freeformatter.com/json-escape.html#ad-output Json Parser Online http://json.parser.online.fr/","title":"json"},{"location":"cpp/2019-04-18-project/#redis","text":"# --raw \u663e\u793a\u4e2d\u6587\u95ee\u9898 redis-cli -h <ip> -p <port> -a <password> --raw # \u67e5\u770bredis\u4fe1\u606f info","title":"redis"},{"location":"cpp/2019-04-18-project/#_5","text":"key \u8868\u793a\u4e00\u4e2a\u54c8\u5e0c\u8868 # \u5199\u64cd\u4f5c\uff1a HSET\u5199\u5165\u5355\u4e2a\u57df\uff0c HMSET\u5199\u5165\u591a\u4e2a\u57df HSET key field value HMSET key field value [field value \u2026] # \u8bfb\u64cd\u4f5c\uff1aHGET\u8bfb\u51fa\u5355\u4e2a\u57df\uff0c HMGET\u8bfb\u51fa\u591a\u4e2a\u57df\uff0c HGETALL\u8bfb\u51fa\u6240\u6709\u57df HGET key field HMGET key field [field \u2026] HGETALL key # \u54c8\u5e0c\u8868key\u4e2d\u57df\u7684\u4e2a\u6570 HLEN key","title":"\u54c8\u5e0c\u8868"},{"location":"cpp/2019-04-18-project/#redis_1","text":"\u4e3b\u4ece\u6a21\u5f0f Redis Sentinel (\u54e8\u5175\u6a21\u5f0f) Redis Sentinel \u672c\u8eab\u4e5f\u662fredis\uff0c \u53ef\u4ee5\u901a\u8fc7redis-cli\u8fdb\u884c\u8fde\u63a5\uff0c \u4f46\u5176\u4e0a\u5b58\u50a8\u7684\u662fredis\u4e3b\u4ece\u914d\u7f6e\u4fe1\u606f\uff0c\u4e00\u822c\u4e0d\u5b58\u50a8\u751f\u4ea7\u6570\u636e # \u83b7\u53d6sentinel\u6709\u591a\u5c11\u4e2amaster\uff0c \u53ca\u6bcf\u4e2amaster\u7684\u540d\u79f0\uff0c \u6bcf\u4e2amaster\u5bf9\u5e94\u4e00\u4e2aredis\u4e3b\u4ece\u670d\u52a1 INFO Sentinel # \u83b7\u53d6master_name\u5bf9\u5e94\u7684redis\u4e3b\u4ece\u670d\u52a1\u7684master\u4e3b\u673aip\u548c\u7aef\u53e3 SENTINEL get-master-addr-by-name <master_name> # \u83b7\u53d6master_name\u5bf9\u5e94\u7684redis\u4e3b\u4ece\u670d\u52a1\u7684slaves\u7684\u4ece\u673aip\u548c\u7aef\u53e3(\u53ef\u80fd\u6709\u591a\u4e2a) SENTINEL slaves <master_name>","title":"redis \u6a21\u5f0f"},{"location":"cpp/2019-04-18-project/#kafka","text":"topic(\u4e3b\u9898) partition(\u5206\u533a) \u4e00\u4e2abroker\u4e0a\u53ef\u4ee5\u5b58\u50a8\u591a\u4e2a\u5206\u533a\u7684\u6570\u636e\uff0c \u6bcf\u4e2a\u5206\u533a\u5bf9\u5e94\u4e00\u4e2a\u6587\u4ef6\u5939\uff0c \u6bcf\u4e2apartition\u4e0a\u5b58\u5728\u591a\u4e2asegment\uff0c \u6bcf\u4e2asegment\u5bf9\u5e94\u4e24\u4e2a\u6587\u4ef6\uff08\u6570\u636e\u6587\u4ef6\u548c\u7d22\u5f15\u6587\u4ef6\uff09 consumer group(\u6d88\u8d39\u7ec4) \u6bcf\u4e2a\u6d88\u8d39\u7ec4\u80fd consumer(\u6d88\u8d39\u8005) \u4e00\u4e2a\u6d88\u8d39\u7ec4\u91cc\u6d88\u8d39\u8005\u5408\u4f5c\u6d88\u8d39\u4fe1\u606f \u4e00\u4e2a\u6d88\u8d39\u8005\u53ef\u4ee5\u6d88\u8d39\u591a\u4e2a\u5206\u533a \u6d88\u8d39\u8005\u7684\u6570\u76ee\u9700\u8981\u5c0f\u4e8e\u7b49\u4e8e\u5206\u533a\u6570\uff0c\u5426\u5219\u4f1a\u6709\u6d88\u8d39\u8005\u7a7a\u95f2 \u4e00\u4e2a\u7ebf\u7a0b\u53ea\u80fd\u6709\u4e00\u4e2a\u6d88\u8d39\u8005\uff0c \u6d88\u8d39\u8005\u4e0d\u662f\u7ebf\u7a0b\u5b89\u5168\u7684","title":"kafka"},{"location":"cpp/2019-04-18-project/#_7","text":"tensorflow_serving/core/source.h Source \u6570\u636e\u65b0\u7248\u672c\u76d1\u63a7","title":"\u7248\u672c\u7ba1\u7406\uff0c \u914d\u7f6e\u91cd\u52a0\u8f7d"},{"location":"cpp/2019-04-22-time/","text":"layout: post title: \"title\" subtitle: \"time\" date: 2019-04-22 15:52:12 author: \"soaringsoul\" header-img: \"img/posts/default_post.jpg\" catalog: true tags: - tag sleep ifdef _WIN32 #include <windows.h> void sleep(unsigned milliseconds) { Sleep(milliseconds); } else #include <unistd.h> void sleep(unsigned milliseconds) { usleep(milliseconds * 1000); // takes microseconds } endif std::chrono::milliseconds timespan(111605); // or whatever std::this_thread::sleep_for(timespan); \u83b7\u53d6\u5f53\u524d\u65f6\u95f4 #include <sys/time.h> struct timeval { time_t tv_sec; /* seconds */ suseconds_t tv_usec; /* microseconds */ }; int gettimeofday (struct timeval * tv, struct timezone * tz); #include <time.h> #include <sys/time.h> struct timeval tv; gettimeofday(&tv, NULL); return tv.tv_sec * 1000 + tv.tv_usec / 1000; time_t time(time_t *t); // \u83b7\u53d6\u4eceUNIX\u5143\u5e74\u5f00\u59cb\u8ba1\u6570\u7684\u79d2\u6570 struct tm *gmtime_r(const time_t *timep, struct tm *result); //\u4e0d\u4f1a\u8003\u8651\u673a\u5668\u6240\u5728\u65f6\u533a\uff0cGMT\u65f6\u95f4 struct tm *localtime_r(const time_t *timep, struct tm *result); // \u4f1a\u8003\u8651\u673a\u5668\u6240\u5728\u65f6\u533a/etc/timezone, \u7531\u4e8e\u9700\u8981\u5904\u7406\u65f6\u533a\uff0c\u901f\u5ea6\u4f1a\u6bd4gmtime_r\u6162\uff0c \u53ef\u4ee5\u5728\u8c03\u7528gmtime_r\u524d\u624b\u52a8\u52a0\u4e0a\u65f6\u533a\u504f\u79fb\u79d2\u6570(eg \u5317\u4eac\u65f6\u95f4: 8*60*60) struct tm { int tm_sec; /* Seconds (0-60) */ int tm_min; /* Minutes (0-59) */ int tm_hour; /* Hours (0-23) */ int tm_mday; /* Day of the month (1-31) */ int tm_mon; /* Month (0-11) */ int tm_year; /* Year - 1900 */ int tm_wday; /* Day of the week (0-6, Sunday = 0) */ int tm_yday; /* Day in the year (0-365, 1 Jan = 0) */ int tm_isdst; /* Daylight saving time */ }; time_t *timep \u4e3a\u65e5\u5386\u65f6\u95f4(calendar time), \u65e5\u5386\u65f6\u95f4\u6307\u8ddd\u79bb1970-01-01 00:00:00 +0000 (UTC)\u7684\u79d2\u6570 time_t local_time = time(NULL); struct tm stime; //tm\u7ed3\u6784\u6307\u9488 localtime_r(&local_time, &stime); //\u83b7\u53d6\u5f53\u5730\u65e5\u671f\u548c\u65f6\u95f4 // \u7ebf\u7a0b\u4e0d\u5b89\u5168 #include <time.h> time_t local_time = time(NULL); struct tm* stime = localtime(&local_time); std::localtime (\u975e\u7ebf\u7a0b\u5b89\u5168) std::localtime is not thread-safe because it uses a static buffer (shared between threads) localtime_r \uff08\u7ebf\u7a0b\u5b89\u5168) \u65f6\u95f4\u683c\u5f0f\u5316 size_t strftime(char *s, size_t max, const char *format, const struct tm *tm); char *strptime(const char *s, const char *format, struct tm *tm);","title":"2019 04 22 time"},{"location":"cpp/2019-04-22-time/#sleep","text":"","title":"sleep"},{"location":"cpp/2019-04-22-time/#ifdef-_win32","text":"#include <windows.h> void sleep(unsigned milliseconds) { Sleep(milliseconds); }","title":"ifdef _WIN32"},{"location":"cpp/2019-04-22-time/#else","text":"#include <unistd.h> void sleep(unsigned milliseconds) { usleep(milliseconds * 1000); // takes microseconds }","title":"else"},{"location":"cpp/2019-04-22-time/#endif","text":"std::chrono::milliseconds timespan(111605); // or whatever std::this_thread::sleep_for(timespan);","title":"endif"},{"location":"cpp/2019-04-22-time/#_1","text":"#include <sys/time.h> struct timeval { time_t tv_sec; /* seconds */ suseconds_t tv_usec; /* microseconds */ }; int gettimeofday (struct timeval * tv, struct timezone * tz); #include <time.h> #include <sys/time.h> struct timeval tv; gettimeofday(&tv, NULL); return tv.tv_sec * 1000 + tv.tv_usec / 1000; time_t time(time_t *t); // \u83b7\u53d6\u4eceUNIX\u5143\u5e74\u5f00\u59cb\u8ba1\u6570\u7684\u79d2\u6570 struct tm *gmtime_r(const time_t *timep, struct tm *result); //\u4e0d\u4f1a\u8003\u8651\u673a\u5668\u6240\u5728\u65f6\u533a\uff0cGMT\u65f6\u95f4 struct tm *localtime_r(const time_t *timep, struct tm *result); // \u4f1a\u8003\u8651\u673a\u5668\u6240\u5728\u65f6\u533a/etc/timezone, \u7531\u4e8e\u9700\u8981\u5904\u7406\u65f6\u533a\uff0c\u901f\u5ea6\u4f1a\u6bd4gmtime_r\u6162\uff0c \u53ef\u4ee5\u5728\u8c03\u7528gmtime_r\u524d\u624b\u52a8\u52a0\u4e0a\u65f6\u533a\u504f\u79fb\u79d2\u6570(eg \u5317\u4eac\u65f6\u95f4: 8*60*60) struct tm { int tm_sec; /* Seconds (0-60) */ int tm_min; /* Minutes (0-59) */ int tm_hour; /* Hours (0-23) */ int tm_mday; /* Day of the month (1-31) */ int tm_mon; /* Month (0-11) */ int tm_year; /* Year - 1900 */ int tm_wday; /* Day of the week (0-6, Sunday = 0) */ int tm_yday; /* Day in the year (0-365, 1 Jan = 0) */ int tm_isdst; /* Daylight saving time */ }; time_t *timep \u4e3a\u65e5\u5386\u65f6\u95f4(calendar time), \u65e5\u5386\u65f6\u95f4\u6307\u8ddd\u79bb1970-01-01 00:00:00 +0000 (UTC)\u7684\u79d2\u6570 time_t local_time = time(NULL); struct tm stime; //tm\u7ed3\u6784\u6307\u9488 localtime_r(&local_time, &stime); //\u83b7\u53d6\u5f53\u5730\u65e5\u671f\u548c\u65f6\u95f4 // \u7ebf\u7a0b\u4e0d\u5b89\u5168 #include <time.h> time_t local_time = time(NULL); struct tm* stime = localtime(&local_time);","title":"\u83b7\u53d6\u5f53\u524d\u65f6\u95f4"},{"location":"cpp/2019-04-22-time/#stdlocaltime","text":"std::localtime is not thread-safe because it uses a static buffer (shared between threads) localtime_r \uff08\u7ebf\u7a0b\u5b89\u5168)","title":"std::localtime (\u975e\u7ebf\u7a0b\u5b89\u5168)"},{"location":"cpp/2019-04-22-time/#_2","text":"size_t strftime(char *s, size_t max, const char *format, const struct tm *tm); char *strptime(const char *s, const char *format, struct tm *tm);","title":"\u65f6\u95f4\u683c\u5f0f\u5316"},{"location":"cpp/2019-04-23-thrift/","text":"layout: post title: \"title\" subtitle: \"thrift\" date: 2019-04-23 16:24:35 author: \"soaringsoul\" header-img: \"img/posts/default_post.jpg\" catalog: true tags: - tag thrift \u4f7f\u7528 .thrift thrift -r --gen cpp .thrift \u4f1a\u5728gen-cpp\u751f\u62104\u4e2a\u6587\u4ef6 _constants.h _constants.cpp _types.h _types.cpp \u5f53 .thrift\u6587\u4ef6\u4e2d\u5305\u542bservice\u65f6\uff0c\u4f1a\u751f\u6210\u989d\u5916\u7684\u6587\u4ef6 thrift \u63a5\u53e3 service - \u5b9a\u4e49rpc\u8c03\u7528\u63a5\u53e3 \u7c7b\u578b \u57fa\u672c\u7c7b\u578b\uff08\u4e0d\u652f\u6301\u65e0\u7b26\u53f7\u7c7b\u578b\uff0c \u5bb9\u5668\u7c7b\u578b\uff1a list\uff0c set\uff0c map option \u548c required option \u8bbe\u7f6e\u7684\u5b57\u6bb5\uff0c \u53d1\u9001\u65b9\u8d4b\u503c\u65f6\u9700\u8981\u4f7f\u7528__set_xxx()\u51fd\u6570\u6765\u8d4b\u503c\uff0c\u5426\u5219\u4e0d\u80fd\u88ab\u63a5\u6536\u65b9\u63a5\u6536\u5230 https://wiki.apache.org/thrift/ThriftUsageC++ * TNonblockingServer with a thread pool is the c++ alternative of the JAVA THsHaServer; * TNonblockingServer withOUT a thread pool is the c++ alternative of the JAVA TNonblockingServer; thrift \u7684client \u4e0d\u662f\u7ebf\u7a0b\u5b89\u5168\u7684 TNonblockingServer with a thread pool one thread - network I/O thread pool for request processing thrift \u7ec4\u4ef6 server\uff1a thrift\u63d0\u4f9b\u7684\u51e0\u4e2a\u670d\u52a1\u5668\u6a21\u578b\uff0c\u5305\u62ecnonblocking server\uff08\u591a\u7ebf\u7a0b\u975e\u963b\u585eIO\uff09, thread poll server\uff08\u591a\u7ebf\u7a0b\u963b\u585eIO\uff09\u7b49 concurrency\uff1a\u4e3b\u8981\u662fthrift\u5c01\u88c5\u7684\u5bf9\u7ebf\u7a0b\u7684\u521b\u5efa\u3001\u76d1\u63a7\u3001\u7ba1\u7406\u7b49\u7684\u652f\u6301\u3002 processor\uff1a\u5bf9task\u7684\u5177\u4f53\u4e1a\u52a1\u903b\u8f91\u5904\u7406\uff0c\u4e0eIDL\u65b9\u6cd5\u5b9a\u4e49\u81ea\u52a8\u751f\u6210\u7684\u4ee3\u7801\u76f8\u5173 protocol\uff1a\u5bf9IDL\u6570\u636e\u5e8f\u5217\u5316/\u53cd\u5e8f\u5217\u5316\u5904\u7406\uff0c\u4e0eIDL\u5bf9\u8c61\u5b9a\u4e49\u81ea\u52a8\u751f\u6210\u7684\u4ee3\u7801\u76f8\u5173 transport\uff1a\u901a\u4fe1\u534f\u8bae\u4f20\u8f93\u5c42\uff0c\u6d89\u53ca\u5230TCP\uff0cHTTP\u7b49\u534f\u8bae\uff0cPIPE\u65b9\u5f0f\u901a\u4fe1\uff0cSSL\u534f\u8bae\u7b49","title":"2019 04 23 thrift"},{"location":"cpp/2019-04-23-thrift/#thrift","text":".thrift thrift -r --gen cpp .thrift \u4f1a\u5728gen-cpp\u751f\u62104\u4e2a\u6587\u4ef6 _constants.h _constants.cpp _types.h _types.cpp \u5f53 .thrift\u6587\u4ef6\u4e2d\u5305\u542bservice\u65f6\uff0c\u4f1a\u751f\u6210\u989d\u5916\u7684\u6587\u4ef6","title":"thrift \u4f7f\u7528"},{"location":"cpp/2019-04-23-thrift/#thrift_1","text":"service - \u5b9a\u4e49rpc\u8c03\u7528\u63a5\u53e3","title":"thrift \u63a5\u53e3"},{"location":"cpp/2019-04-23-thrift/#_1","text":"\u57fa\u672c\u7c7b\u578b\uff08\u4e0d\u652f\u6301\u65e0\u7b26\u53f7\u7c7b\u578b\uff0c \u5bb9\u5668\u7c7b\u578b\uff1a list\uff0c set\uff0c map option \u548c required option \u8bbe\u7f6e\u7684\u5b57\u6bb5\uff0c \u53d1\u9001\u65b9\u8d4b\u503c\u65f6\u9700\u8981\u4f7f\u7528__set_xxx()\u51fd\u6570\u6765\u8d4b\u503c\uff0c\u5426\u5219\u4e0d\u80fd\u88ab\u63a5\u6536\u65b9\u63a5\u6536\u5230 https://wiki.apache.org/thrift/ThriftUsageC++ * TNonblockingServer with a thread pool is the c++ alternative of the JAVA THsHaServer; * TNonblockingServer withOUT a thread pool is the c++ alternative of the JAVA TNonblockingServer; thrift \u7684client \u4e0d\u662f\u7ebf\u7a0b\u5b89\u5168\u7684","title":"\u7c7b\u578b"},{"location":"cpp/2019-04-23-thrift/#tnonblockingserver-with-a-thread-pool","text":"one thread - network I/O thread pool for request processing","title":"TNonblockingServer with a thread pool"},{"location":"cpp/2019-04-23-thrift/#thrift_2","text":"server\uff1a thrift\u63d0\u4f9b\u7684\u51e0\u4e2a\u670d\u52a1\u5668\u6a21\u578b\uff0c\u5305\u62ecnonblocking server\uff08\u591a\u7ebf\u7a0b\u975e\u963b\u585eIO\uff09, thread poll server\uff08\u591a\u7ebf\u7a0b\u963b\u585eIO\uff09\u7b49 concurrency\uff1a\u4e3b\u8981\u662fthrift\u5c01\u88c5\u7684\u5bf9\u7ebf\u7a0b\u7684\u521b\u5efa\u3001\u76d1\u63a7\u3001\u7ba1\u7406\u7b49\u7684\u652f\u6301\u3002 processor\uff1a\u5bf9task\u7684\u5177\u4f53\u4e1a\u52a1\u903b\u8f91\u5904\u7406\uff0c\u4e0eIDL\u65b9\u6cd5\u5b9a\u4e49\u81ea\u52a8\u751f\u6210\u7684\u4ee3\u7801\u76f8\u5173 protocol\uff1a\u5bf9IDL\u6570\u636e\u5e8f\u5217\u5316/\u53cd\u5e8f\u5217\u5316\u5904\u7406\uff0c\u4e0eIDL\u5bf9\u8c61\u5b9a\u4e49\u81ea\u52a8\u751f\u6210\u7684\u4ee3\u7801\u76f8\u5173 transport\uff1a\u901a\u4fe1\u534f\u8bae\u4f20\u8f93\u5c42\uff0c\u6d89\u53ca\u5230TCP\uff0cHTTP\u7b49\u534f\u8bae\uff0cPIPE\u65b9\u5f0f\u901a\u4fe1\uff0cSSL\u534f\u8bae\u7b49","title":"thrift \u7ec4\u4ef6"},{"location":"cpp/2019-04-29-multi thread/","text":"layout: post title: \"title\" subtitle: \"multi thread\" date: 2019-04-29 11:40:28 author: \"soaringsoul\" header-img: \"img/posts/default_post.jpg\" catalog: true tags: - tag \u539f\u5b50\u6027 (\u907f\u514d\u4e2d\u95f4\u6001\u7684\u5b58\u5728\uff0c\u6240\u6709\u7ebf\u7a0b\u770b\u5230\u539f\u5b50\u64cd\u4f5c\u524d\u7684\u72b6\u6001\u6216\u8005\u662f\u64cd\u4f5c\u5b8c\u6210\u540e\u7684\u72b6\u6001) \u53ef\u89c1\u6027 (\u7531\u4e8ecpu\u7f13\u5b58\u7684\u5b58\u5728\uff0c\u4e00\u4e2a\u7ebf\u7a0b\u7684\u4fee\u6539\uff0c\u5176\u4ed6\u7ebf\u7a0b\u4e0d\u80fd\u53ca\u65f6\u770b\u5230\u4fee\u6539\u7ed3\u679c) http://www.droidsec.cn/%E5%B8%B8%E8%A7%81android-native%E5%B4%A9%E6%BA%83%E5%8F%8A%E9%94%99%E8%AF%AF%E5%8E%9F%E5%9B%A0/ \u5199\u7a7a\u6307\u9488 int* p = 0; //\u7a7a\u6307\u9488 *p = 1; //\u5199\u7a7a\u6307\u9488\u6307\u5411\u7684\u5185\u5b58\uff0c\u4ea7\u751fSIGSEGV\u4fe1\u53f7\uff0c\u9020\u6210Crash 0x0\u5730\u5740\u9875\u9762\u65e0\u5199\u6743\u9650\uff0c \u89e6\u53d1SIGSEGV\u6bb5\u9519\u8bef \u5199\u91ce\u6307\u9488 int* p; //\u91ce\u6307\u9488\uff0c\u672a\u521d\u59cb\u5316\uff0c\u5176\u6307\u5411\u7684\u5730\u5740\u901a\u5e38\u662f\u968f\u673a\u7684 *p = 1; //\u5199\u91ce\u6307\u9488\u6307\u5411\u7684\u5185\u5b58\uff0c\u6709\u53ef\u80fd\u4e0d\u4f1a\u9a6c\u4e0aCrash\uff0c\u800c\u662f\u7834\u574f\u4e86\u522b\u5904\u7684\u5185\u5b58 \u91ce\u6307\u9488\u6307\u5411\u7684\u662f\u4e00\u4e2a\u65e0\u6548\u7684\u5730\u5740\uff0c\u8be5\u5730\u5740\u5982\u679c\u662f\u4e0d\u53ef\u8bfb\u4e0d\u53ef\u5199\u7684\uff0c\u90a3\u4e48\u4f1a\u9a6c\u4e0aCrash(\u5185\u6838\u7ed9\u8fdb\u7a0b\u53d1\u9001\u6bb5\u9519\u8bef\u4fe1\u53f7SIGSEGV)\uff0c\u8fd9\u65f6bug\u4f1a\u5f88\u5feb\u88ab\u53d1\u73b0\u3002 \u5982\u679c\u8bbf\u95ee\u7684\u5730\u5740\u4e3a\u53ef\u5199\uff0c\u800c\u4e14\u901a\u8fc7\u91ce\u6307\u9488\u4fee\u6539\u4e86\u8be5\u5904\u7684\u5185\u5b58\uff0c\u90a3\u4e48\u5f88\u6709\u53ef\u80fd\u4f1a\u7b49\u4e00\u6bb5\u65f6\u95f4(\u5176\u5b83\u7684\u4ee3\u7801\u4f7f\u7528\u4e86\u8be5\u5904\u7684\u5185\u5b58\u540e)\u624d\u53d1\u751fCrash\u3002\u8fd9\u65f6\u67e5\u770bCrash\u65f6\u663e\u793a\u7684\u8c03\u7528\u6808\uff0c\u548c\u91ce\u6307\u9488\u6240\u5728\u7684\u4ee3\u7801\u90e8\u5206\uff0c\u6709\u53ef\u80fd\u57fa\u672c\u4e0a\u6ca1\u6709\u4efb\u4f55\u5173\u8054\u3002 \u6570\u7ec4\u8d8a\u754c \u6d6e\u70b9\u5f02\u5e38(SIGFPE), \u5982\u9664\u96f6\u9519\u8bef \u7f13\u51b2\u533a\u6ea2\u51fa char szBuffer[10]; // szBuffer \u5728\u6808\u4e0a\u5206\u914d\u5185\u5b58 //\u7531\u4e8e\u51fd\u6570\u6808\u662f\u4ece\u9ad8\u5730\u5740\u5f80\u4f4e\u5730\u5740\u521b\u5efa\uff0c\u800csprintf\u662f\u4ece\u4f4e\u5730\u5740\u5f80\u9ad8\u5730\u5740\u6253\u5370\u5b57\u7b26\uff0c //\u5982\u679c\u8d85\u51fa\u4e86\u7f13\u51b2\u533a\u7684\u5927\u5c0f\uff0c\u51fd\u6570\u7684\u6808\u5e27\u4f1a\u88ab\u7834\u574f\uff0c\u5728\u51fd\u6570\u8fd4\u56de\u65f6\u4f1a\u8df3\u8f6c\u5230\u672a\u77e5\u7684\u5730\u5740\u4e0a\uff0c //\u57fa\u672c\u4e0a\u90fd\u4f1a\u9020\u6210\u8bbf\u95ee\u5f02\u5e38\uff0c\u4ece\u800c\u4ea7\u751fSIGABRT\u6216SIGSEGV\uff0c\u9020\u6210Crash sprintf(szBuffer, \"Stack Buffer Overrun!111111111111111\" \"111111111111111111111\"); \u5982\u679ccore\u6587\u4ef6\u548c\u53ef\u6267\u884c\u6587\u4ef6\u662f\u5339\u914d\u7684\uff0c\u4f46\u662f\u8c03\u7528\u6808\u662f\u9519\u4e71\u7684\uff0c\u90a3\u4e48\u5f88\u5927\u7684\u53ef\u80fd\u6027\u662f\u53d1\u751f\u4e86\u7f13\u51b2\u533a\u6ea2\u51fa\u3002 \u7ebf\u7a0b\u505c\u6b62 \u901a\u77e5\u7ebf\u7a0b\u505c\u6b62\u4e00\u822c\u901a\u8fc7\u6539\u53d8\u6807\u5fd7\u4f4d\u6765\u5b9e\u73b0\uff0c\u88ab\u505c\u6b62\u7684\u7ebf\u7a0b\u9700\u8981\u5468\u671f\u6027\u7684\u68c0\u6d4b\u8be5\u6807\u5fd7\u4f4d\uff0c\u4e3b\u52a8\u8fdb\u884c\u9000\u51fa","title":"2019 04 29 multi thread"},{"location":"cpp/2019-04-29-multi thread/#_3","text":"int* p = 0; //\u7a7a\u6307\u9488 *p = 1; //\u5199\u7a7a\u6307\u9488\u6307\u5411\u7684\u5185\u5b58\uff0c\u4ea7\u751fSIGSEGV\u4fe1\u53f7\uff0c\u9020\u6210Crash 0x0\u5730\u5740\u9875\u9762\u65e0\u5199\u6743\u9650\uff0c \u89e6\u53d1SIGSEGV\u6bb5\u9519\u8bef","title":"\u5199\u7a7a\u6307\u9488"},{"location":"cpp/2019-04-29-multi thread/#_4","text":"int* p; //\u91ce\u6307\u9488\uff0c\u672a\u521d\u59cb\u5316\uff0c\u5176\u6307\u5411\u7684\u5730\u5740\u901a\u5e38\u662f\u968f\u673a\u7684 *p = 1; //\u5199\u91ce\u6307\u9488\u6307\u5411\u7684\u5185\u5b58\uff0c\u6709\u53ef\u80fd\u4e0d\u4f1a\u9a6c\u4e0aCrash\uff0c\u800c\u662f\u7834\u574f\u4e86\u522b\u5904\u7684\u5185\u5b58 \u91ce\u6307\u9488\u6307\u5411\u7684\u662f\u4e00\u4e2a\u65e0\u6548\u7684\u5730\u5740\uff0c\u8be5\u5730\u5740\u5982\u679c\u662f\u4e0d\u53ef\u8bfb\u4e0d\u53ef\u5199\u7684\uff0c\u90a3\u4e48\u4f1a\u9a6c\u4e0aCrash(\u5185\u6838\u7ed9\u8fdb\u7a0b\u53d1\u9001\u6bb5\u9519\u8bef\u4fe1\u53f7SIGSEGV)\uff0c\u8fd9\u65f6bug\u4f1a\u5f88\u5feb\u88ab\u53d1\u73b0\u3002 \u5982\u679c\u8bbf\u95ee\u7684\u5730\u5740\u4e3a\u53ef\u5199\uff0c\u800c\u4e14\u901a\u8fc7\u91ce\u6307\u9488\u4fee\u6539\u4e86\u8be5\u5904\u7684\u5185\u5b58\uff0c\u90a3\u4e48\u5f88\u6709\u53ef\u80fd\u4f1a\u7b49\u4e00\u6bb5\u65f6\u95f4(\u5176\u5b83\u7684\u4ee3\u7801\u4f7f\u7528\u4e86\u8be5\u5904\u7684\u5185\u5b58\u540e)\u624d\u53d1\u751fCrash\u3002\u8fd9\u65f6\u67e5\u770bCrash\u65f6\u663e\u793a\u7684\u8c03\u7528\u6808\uff0c\u548c\u91ce\u6307\u9488\u6240\u5728\u7684\u4ee3\u7801\u90e8\u5206\uff0c\u6709\u53ef\u80fd\u57fa\u672c\u4e0a\u6ca1\u6709\u4efb\u4f55\u5173\u8054\u3002","title":"\u5199\u91ce\u6307\u9488"},{"location":"cpp/2019-04-29-multi thread/#_5","text":"","title":"\u6570\u7ec4\u8d8a\u754c"},{"location":"cpp/2019-04-29-multi thread/#sigfpe","text":"","title":"\u6d6e\u70b9\u5f02\u5e38(SIGFPE), \u5982\u9664\u96f6\u9519\u8bef"},{"location":"cpp/2019-04-29-multi thread/#_6","text":"char szBuffer[10]; // szBuffer \u5728\u6808\u4e0a\u5206\u914d\u5185\u5b58 //\u7531\u4e8e\u51fd\u6570\u6808\u662f\u4ece\u9ad8\u5730\u5740\u5f80\u4f4e\u5730\u5740\u521b\u5efa\uff0c\u800csprintf\u662f\u4ece\u4f4e\u5730\u5740\u5f80\u9ad8\u5730\u5740\u6253\u5370\u5b57\u7b26\uff0c //\u5982\u679c\u8d85\u51fa\u4e86\u7f13\u51b2\u533a\u7684\u5927\u5c0f\uff0c\u51fd\u6570\u7684\u6808\u5e27\u4f1a\u88ab\u7834\u574f\uff0c\u5728\u51fd\u6570\u8fd4\u56de\u65f6\u4f1a\u8df3\u8f6c\u5230\u672a\u77e5\u7684\u5730\u5740\u4e0a\uff0c //\u57fa\u672c\u4e0a\u90fd\u4f1a\u9020\u6210\u8bbf\u95ee\u5f02\u5e38\uff0c\u4ece\u800c\u4ea7\u751fSIGABRT\u6216SIGSEGV\uff0c\u9020\u6210Crash sprintf(szBuffer, \"Stack Buffer Overrun!111111111111111\" \"111111111111111111111\"); \u5982\u679ccore\u6587\u4ef6\u548c\u53ef\u6267\u884c\u6587\u4ef6\u662f\u5339\u914d\u7684\uff0c\u4f46\u662f\u8c03\u7528\u6808\u662f\u9519\u4e71\u7684\uff0c\u90a3\u4e48\u5f88\u5927\u7684\u53ef\u80fd\u6027\u662f\u53d1\u751f\u4e86\u7f13\u51b2\u533a\u6ea2\u51fa\u3002","title":"\u7f13\u51b2\u533a\u6ea2\u51fa"},{"location":"cpp/2019-04-29-multi thread/#_7","text":"\u901a\u77e5\u7ebf\u7a0b\u505c\u6b62\u4e00\u822c\u901a\u8fc7\u6539\u53d8\u6807\u5fd7\u4f4d\u6765\u5b9e\u73b0\uff0c\u88ab\u505c\u6b62\u7684\u7ebf\u7a0b\u9700\u8981\u5468\u671f\u6027\u7684\u68c0\u6d4b\u8be5\u6807\u5fd7\u4f4d\uff0c\u4e3b\u52a8\u8fdb\u884c\u9000\u51fa","title":"\u7ebf\u7a0b\u505c\u6b62"},{"location":"cpp/2019-05-07-ptmalloc/","text":"layout: post title: \"title\" subtitle: \"ptmalloc\" date: 2019-05-07 09:17:52 author: \"none\" header-img: \"img/posts/default_post.jpg\" catalog: true tags: - tag https://sploitfun.wordpress.com/2015/02/10/understanding-glibc-malloc/ main thread: main arena (sbrk alloc) thread: thread arena (mmap alloc) thread arena \u7684\u6570\u91cf\u548c\u64cd\u4f5c\u7cfb\u7edf\u4f4d\u6570\u548ccpu\u6838\u6570\u6709\u5173\uff0c \u7ebf\u7a0b\u592a\u591a\u65f6\u9700\u8981\u7ade\u4e89\u4f7f\u7528thread arena malloc_state\uff1aArena Header\uff0c Arena header contains information about bins, top chunk, last remainder chunk heap_info\uff1a \u4e00\u4e2athread arena\u53ef\u4ee5\u6709\u591a\u4e2aheap\uff0c \u6bcf\u4e2aheap\u7531heap_info\u6765\u6807\u8bc6\uff1b Main arena\u6ca1\u6709\u591a\u4e2aheap\uff0c\u6ca1\u6709heap_info malloc_chunk\uff1a\u4e00\u4e2aheap\u7531\u591a\u4e2amalloc_chunk\u6784\u6210 \u524d\u4e00\u4e2achunk(\u4f4e\u5730\u5740)\uff0c \u540e\u4e00\u4e2achunk(\u9ad8\u5730\u5740) /* addressing -- note that bin_at(0) does not exist */ #define bin_at(m, i) \\ (mbinptr) (((char *) &((m)->bins[((i) - 1) * 2])) \\ - offsetof (struct malloc_chunk, fd)) /* The otherwise unindexable 1-bin is used to hold unsorted chunks. */ #define unsorted_chunks(M) (bin_at (M, 1)) \u5730\u5740\u8f6c\u6362 MALLOC_ALIGN_MASK malloc\u7684chunk\u5757\u5927\u5c0f\u5e94\u8be5\u8fdb\u884c\u5bf9\u9f50(malloc_chunk\u7684size\u5b57\u6bb5\u4f4e\u4e09\u4f4d\u4e0d\u53ef\u7528\uff0c\u56e0\u6b64\u9700\u8981\u5bf9\u9f50) fastbin fastbin \u7531\u591a\u4e2abin\u6784\u6210\uff0c\u6bcf\u4e2abin\u662f\u4e00\u4e2a\u94fe\u8868\uff0c\u5c06\u76f8\u540c\u5927\u5c0f\u7684chunk\u4e32\u8d77\u6765 idx = fastbin_index (nb); //\u4ece\u9700\u8981\u5206\u914d\u7684\u5927\u5c0f\u83b7\u5f97\u76f8\u5e94\u7684bin\u7d22\u5f15 \u4ecefastbin\u627e\u5230\u53ef\u5206\u914d\u7684malloc chunk\u540e\uff0c \u4f1a\u68c0\u67e5\u8be5malloc chunk\u7684header\u4fe1\u606f\uff08chunk \u7684size) \u662f\u5426\u4e3abin\u7684\u5927\u5c0f\uff0c \u5982\u679c\u4e0d\u662f\u8bf4\u660e\u8be5malloc chunk\u88ab\u5176\u4ed6\u5730\u65b9\u5199\u8fc7\uff0c \u89e6\u53d1\u5185\u5b58\u7834\u574f\"malloc(): memory corruption (fast)\" if (__builtin_expect (fastbin_index (chunksize (victim)) != idx, 0)) { errstr = \"malloc(): memory corruption (fast)\"; errout: malloc_printerr (check_action, errstr, chunk2mem (victim)); return NULL; } \u6d41\u7a0b malloc.c __libc_malloc void *weak_variable (*__malloc_hook) (size_t __size, const void *) = malloc_hook_ini; hook.c static void * malloc_hook_ini (size_t sz, const void *caller) { __malloc_hook = NULL; ptmalloc_init (); return __libc_malloc (sz); } arena.c ptmalloc_init arena_lookup (ar_ptr); // \u627e\u5230\u4e00\u4e2a\u53ef\u7528\u7684arena\uff0c\u5e76\u52a0\u9501 victim = _int_malloc (ar_ptr, bytes); // \u4ece\u8be5arena\u4e2d\u5bfb\u627emalloc chunk _int_malloc checked_request2size (bytes, nb); // \u5206\u914d\u5185\u5b58\u5927\u5c0f\u8f6c\u6362 if ((unsigned long) (nb) <= (unsigned long) (get_max_fast ())) // \u4ecefastbin\u4e2d\u5206\u914d\u5185\u5b58\uff0c if (in_smallbin_range (nb)) // \u4ecesmallbin\u4e2d\u5206\u914d\u5185\u5b58","title":"2019 05 07 ptmalloc"},{"location":"cpp/2019-05-07-ptmalloc/#_1","text":"MALLOC_ALIGN_MASK malloc\u7684chunk\u5757\u5927\u5c0f\u5e94\u8be5\u8fdb\u884c\u5bf9\u9f50(malloc_chunk\u7684size\u5b57\u6bb5\u4f4e\u4e09\u4f4d\u4e0d\u53ef\u7528\uff0c\u56e0\u6b64\u9700\u8981\u5bf9\u9f50)","title":"\u5730\u5740\u8f6c\u6362"},{"location":"cpp/2019-05-07-ptmalloc/#fastbin","text":"fastbin \u7531\u591a\u4e2abin\u6784\u6210\uff0c\u6bcf\u4e2abin\u662f\u4e00\u4e2a\u94fe\u8868\uff0c\u5c06\u76f8\u540c\u5927\u5c0f\u7684chunk\u4e32\u8d77\u6765 idx = fastbin_index (nb); //\u4ece\u9700\u8981\u5206\u914d\u7684\u5927\u5c0f\u83b7\u5f97\u76f8\u5e94\u7684bin\u7d22\u5f15 \u4ecefastbin\u627e\u5230\u53ef\u5206\u914d\u7684malloc chunk\u540e\uff0c \u4f1a\u68c0\u67e5\u8be5malloc chunk\u7684header\u4fe1\u606f\uff08chunk \u7684size) \u662f\u5426\u4e3abin\u7684\u5927\u5c0f\uff0c \u5982\u679c\u4e0d\u662f\u8bf4\u660e\u8be5malloc chunk\u88ab\u5176\u4ed6\u5730\u65b9\u5199\u8fc7\uff0c \u89e6\u53d1\u5185\u5b58\u7834\u574f\"malloc(): memory corruption (fast)\" if (__builtin_expect (fastbin_index (chunksize (victim)) != idx, 0)) { errstr = \"malloc(): memory corruption (fast)\"; errout: malloc_printerr (check_action, errstr, chunk2mem (victim)); return NULL; } \u6d41\u7a0b malloc.c __libc_malloc void *weak_variable (*__malloc_hook) (size_t __size, const void *) = malloc_hook_ini; hook.c static void * malloc_hook_ini (size_t sz, const void *caller) { __malloc_hook = NULL; ptmalloc_init (); return __libc_malloc (sz); } arena.c ptmalloc_init arena_lookup (ar_ptr); // \u627e\u5230\u4e00\u4e2a\u53ef\u7528\u7684arena\uff0c\u5e76\u52a0\u9501 victim = _int_malloc (ar_ptr, bytes); // \u4ece\u8be5arena\u4e2d\u5bfb\u627emalloc chunk _int_malloc checked_request2size (bytes, nb); // \u5206\u914d\u5185\u5b58\u5927\u5c0f\u8f6c\u6362 if ((unsigned long) (nb) <= (unsigned long) (get_max_fast ())) // \u4ecefastbin\u4e2d\u5206\u914d\u5185\u5b58\uff0c if (in_smallbin_range (nb)) // \u4ecesmallbin\u4e2d\u5206\u914d\u5185\u5b58","title":"fastbin"},{"location":"cpp/2019-05-10-inotify/","text":"layout: post title: \"title\" subtitle: \"inotify\" date: 2019-05-10 15:33:57 author: \"none\" header-img: \"img/posts/default_post.jpg\" catalog: true tags: - tag https://github.com/rvoicilas/inotify-tools/ fd = open(\"dir/myfile\", O_RDWR); Generates IN_OPEN events for both dir and dir/myfile. read(fd, buf, count); Generates IN_ACCESS events for both dir and dir/myfile. write(fd, buf, count); Generates IN_MODIFY events for both dir and dir/myfile. fchmod(fd, mode); Generates IN_ATTRIB events for both dir and dir/myfile. close(fd); Generates IN_CLOSE_WRITE events for both dir and dir/myfile.","title":"2019 05 10 inotify"},{"location":"cpp/2019-05-20-boost/","text":"layout: post title: \"boost\" subtitle: \"boost\" date: 2019-05-20 16:27:34 author: \"none\" header-img: \"img/posts/default_post.jpg\" catalog: true tags: - tag \u65e0\u9501\u7ed3\u6784 boost::lockfree::queue\uff1a \u652f\u6301\u591a\u4e2a\u751f\u4ea7\u8005\u548c\u591a\u4e2a\u6d88\u8d39\u8005\u7ebf\u7a0b\u7684\u65e0\u9501\u961f\u5217\u3002 boost::lockfree::stack\uff1a \u652f\u6301\u591a\u4e2a\u751f\u4ea7\u8005\u548c\u591a\u4e2a\u6d88\u8d39\u8005\u7ebf\u7a0b\u7684\u65e0\u9501\u6808\u3002 boost::lockfree::spsc_queue \u4ec5\u652f\u6301\u5355\u4e2a\u751f\u4ea7\u8005\u548c\u5355\u4e2a\u6d88\u8d39\u8005\u7ebf\u7a0b\u7684\u65e0\u9501\u961f\u5217\u3002\u76f8\u6bd4boost::lockfree::queue\uff0c\u5176\u6548\u7387\u66f4\u9ad8\u3002","title":"2019 05 20 boost"},{"location":"cpp/2019-05-20-boost/#_1","text":"boost::lockfree::queue\uff1a \u652f\u6301\u591a\u4e2a\u751f\u4ea7\u8005\u548c\u591a\u4e2a\u6d88\u8d39\u8005\u7ebf\u7a0b\u7684\u65e0\u9501\u961f\u5217\u3002 boost::lockfree::stack\uff1a \u652f\u6301\u591a\u4e2a\u751f\u4ea7\u8005\u548c\u591a\u4e2a\u6d88\u8d39\u8005\u7ebf\u7a0b\u7684\u65e0\u9501\u6808\u3002 boost::lockfree::spsc_queue \u4ec5\u652f\u6301\u5355\u4e2a\u751f\u4ea7\u8005\u548c\u5355\u4e2a\u6d88\u8d39\u8005\u7ebf\u7a0b\u7684\u65e0\u9501\u961f\u5217\u3002\u76f8\u6bd4boost::lockfree::queue\uff0c\u5176\u6548\u7387\u66f4\u9ad8\u3002","title":"\u65e0\u9501\u7ed3\u6784"},{"location":"cpp/2019-05-20-smart_ptr/","text":"layout: post title: \"smart_ptr\" subtitle: \"smart_ptr\" date: 2019-05-20 11:42:43 author: \"none\" header-img: \"img/posts/default_post.jpg\" catalog: true tags: - tag std::unique_ptr \u72ec\u5360\u8d44\u6e90\u7ba1\u7406 std::unique_ptr \u4e0d\u53ef\u62f7\u8d1d\uff0c\u4f46\u53ef\u4ee5\u79fb\u52a8 std::unique_ptr<int> pInt(new int(5)); std::shared_ptr \u5171\u4eab\u8d44\u6e90\u7ba1\u7406 std::shared_ptr<T> sp = std::make_shared<T>();","title":"2019 05 20 smart ptr"},{"location":"cpp/2019-05-20-smart_ptr/#stdunique_ptr","text":"\u72ec\u5360\u8d44\u6e90\u7ba1\u7406 std::unique_ptr \u4e0d\u53ef\u62f7\u8d1d\uff0c\u4f46\u53ef\u4ee5\u79fb\u52a8 std::unique_ptr<int> pInt(new int(5));","title":"std::unique_ptr"},{"location":"cpp/2019-05-20-smart_ptr/#stdshared_ptr","text":"\u5171\u4eab\u8d44\u6e90\u7ba1\u7406 std::shared_ptr<T> sp = std::make_shared<T>();","title":"std::shared_ptr"},{"location":"cpp/2019-05-21-google/","text":"layout: post title: \"google\" subtitle: \"google\" date: 2019-05-21 09:35:11 author: \"none\" header-img: \"img/posts/default_post.jpg\" catalog: true tags: - tag gtest gtest https://github.com/google/googletest \u7f16\u8bd1gtest git clone https://github.com/google/googletest.git cd googletest mkdir mybuild && cd mybuild cmake ../googletest && make \u62f7\u8d1d\u5934\u6587\u4ef6\u548c\u9759\u6001\u5e93\u6587\u4ef6 \u5934\u6587\u4ef6\u8def\u5f84\uff1a googletest/googletest/include/gtest \u9759\u6001\u5e93\u8def\u5f84\uff1a googletest/mybuild/libgtest.a \u7b80\u5355\u4f7f\u7528 include/gtest/ lib/libgtest.a test.cpp #include <gtest/gtest.h> int foobar(void) { return 1; } TEST(foobar, test) { ASSERT_EQ(1, foobar()); } int main(int argc, char *argv[]) { testing::InitGoogleTest(&argc, argv); return RUN_ALL_TESTS(); } \u7f16\u8bd1 g++ test.cpp -Iinclude lib/libgtest.a -lpthread \u8fd0\u884c ./a.out \u591a\u6587\u4ef6\u6d4b\u8bd5 \u5728\u5355\u72ec\u7684\u4e00\u4e2a\u6587\u4ef6\u58f0\u660emain\u51fd\u6570\uff0c \u5728\u5176\u4ed6\u5355\u72ec\u7684\u6587\u4ef6\u4e2d\u4e2d\u5b9a\u4e49\u6d4b\u8bd5\u7c7b\uff0c \u5c06\u8fd9\u4e9b\u7c7b\u94fe\u63a5\u5230main\u76ee\u6807\u6587\u4ef6\u540e\uff0cgtest\u80fd\u81ea\u52a8\u6355\u6349\u5230\u6240\u6709\u5b9a\u4e49\u7684\u6d4b\u8bd5\u7c7b \u6d4b\u8bd5\u73af\u5883 1 \u5168\u5c40\u6d4b\u8bd5\u73af\u5883 1) \u7ee7\u627fclass GlobalEnvent: public testing::Environment, \u5b9e\u73b0SetUp() \u548c TearDown() 2) RUN_ALL_TESTS()\u4e4b\u524d\u6dfb\u52a0testing::AddGlobalTestEnvironment(new GlobalEnvent); 2 \u6d4b\u8bd5\u5957\u4ef6 1) \u7ee7\u627ftesting::Test\u7c7b, \u5b9e\u73b0\u9759\u6001\u65b9\u6cd5SetUpTestCase\u548cTearDownTestCase 2) SetUpTestCase\u5728\u6d4b\u8bd5\u5957\u4ef6\u4e2d\u7684\u7b2c\u4e00\u4e2a\u6d4b\u8bd5\u7528\u4f8b\u8fd0\u884c\u524d\u8c03\u7528\uff0cTearDownTestCase\u5728\u6700\u540e\u4e00\u4e2a\u6d4b\u8bd5\u7528\u4f8b\u8fd0\u884c\u540e\u8c03\u7528 3 \u6d4b\u8bd5\u6848\u4f8b 1) \u7ee7\u627ftesting::Test\u7c7b, \u5b9e\u73b0\u65b9\u6cd5SetUp\u548cTearDown TEST_F\u4e0eTEST TEST_F \u4e2d\u7684F\u8868\u793aFixture EXPECT_EQ(val1, val2) \u8fd0\u884c # \u5217\u51fa\u6240\u6709\u5355\u5143\u6d4b\u8bd5 --gtest_list_tests # \u8fc7\u6ee4\u6761\u4ef6 --gtest_filter=Test_Cases1*","title":"2019 05 21 google"},{"location":"cpp/2019-05-21-google/#gtest","text":"gtest https://github.com/google/googletest \u7f16\u8bd1gtest git clone https://github.com/google/googletest.git cd googletest mkdir mybuild && cd mybuild cmake ../googletest && make \u62f7\u8d1d\u5934\u6587\u4ef6\u548c\u9759\u6001\u5e93\u6587\u4ef6 \u5934\u6587\u4ef6\u8def\u5f84\uff1a googletest/googletest/include/gtest \u9759\u6001\u5e93\u8def\u5f84\uff1a googletest/mybuild/libgtest.a","title":"gtest"},{"location":"cpp/2019-05-21-google/#_1","text":"include/gtest/ lib/libgtest.a test.cpp #include <gtest/gtest.h> int foobar(void) { return 1; } TEST(foobar, test) { ASSERT_EQ(1, foobar()); } int main(int argc, char *argv[]) { testing::InitGoogleTest(&argc, argv); return RUN_ALL_TESTS(); } \u7f16\u8bd1 g++ test.cpp -Iinclude lib/libgtest.a -lpthread \u8fd0\u884c ./a.out","title":"\u7b80\u5355\u4f7f\u7528"},{"location":"cpp/2019-05-21-google/#_2","text":"\u5728\u5355\u72ec\u7684\u4e00\u4e2a\u6587\u4ef6\u58f0\u660emain\u51fd\u6570\uff0c \u5728\u5176\u4ed6\u5355\u72ec\u7684\u6587\u4ef6\u4e2d\u4e2d\u5b9a\u4e49\u6d4b\u8bd5\u7c7b\uff0c \u5c06\u8fd9\u4e9b\u7c7b\u94fe\u63a5\u5230main\u76ee\u6807\u6587\u4ef6\u540e\uff0cgtest\u80fd\u81ea\u52a8\u6355\u6349\u5230\u6240\u6709\u5b9a\u4e49\u7684\u6d4b\u8bd5\u7c7b","title":"\u591a\u6587\u4ef6\u6d4b\u8bd5"},{"location":"cpp/2019-05-21-google/#_3","text":"1 \u5168\u5c40\u6d4b\u8bd5\u73af\u5883 1) \u7ee7\u627fclass GlobalEnvent: public testing::Environment, \u5b9e\u73b0SetUp() \u548c TearDown() 2) RUN_ALL_TESTS()\u4e4b\u524d\u6dfb\u52a0testing::AddGlobalTestEnvironment(new GlobalEnvent); 2 \u6d4b\u8bd5\u5957\u4ef6 1) \u7ee7\u627ftesting::Test\u7c7b, \u5b9e\u73b0\u9759\u6001\u65b9\u6cd5SetUpTestCase\u548cTearDownTestCase 2) SetUpTestCase\u5728\u6d4b\u8bd5\u5957\u4ef6\u4e2d\u7684\u7b2c\u4e00\u4e2a\u6d4b\u8bd5\u7528\u4f8b\u8fd0\u884c\u524d\u8c03\u7528\uff0cTearDownTestCase\u5728\u6700\u540e\u4e00\u4e2a\u6d4b\u8bd5\u7528\u4f8b\u8fd0\u884c\u540e\u8c03\u7528 3 \u6d4b\u8bd5\u6848\u4f8b 1) \u7ee7\u627ftesting::Test\u7c7b, \u5b9e\u73b0\u65b9\u6cd5SetUp\u548cTearDown","title":"\u6d4b\u8bd5\u73af\u5883"},{"location":"cpp/2019-05-21-google/#test_ftest","text":"TEST_F \u4e2d\u7684F\u8868\u793aFixture EXPECT_EQ(val1, val2)","title":"TEST_F\u4e0eTEST"},{"location":"cpp/2019-05-21-google/#_4","text":"# \u5217\u51fa\u6240\u6709\u5355\u5143\u6d4b\u8bd5 --gtest_list_tests # \u8fc7\u6ee4\u6761\u4ef6 --gtest_filter=Test_Cases1*","title":"\u8fd0\u884c"},{"location":"cpp/2019-06-10-stl/","text":"layout: post title: \"stl\" subtitle: \"stl\" date: 2019-06-10 20:30:33 author: \"none\" header-img: \"img/posts/default_post.jpg\" catalog: true tags: - tag vector push_back \u548c emplace_back emplace_back\u4f1a\u539f\u5730\u5bf9\u53c2\u6570\u8fdb\u884c\u6784\u9020\uff0c push_back\u8981\u4e48\u4f1a\u62f7\u8d1d\u53c2\u6570\uff0c\u8981\u4e48\u4f1a\u6784\u9020\u540e\u9700\u8981\u79fb\u52a8\u64cd\u4f5c clear clear \u540evector\u7684size=0, \u4f46capacity\u4e0d\u53d8 \u5982\u4f55\u6539\u53d8vector\u7684capacity vector<T>().swap(var) var.shrink_to_fit() \u6587\u4ef6\u8bfb\u5199 \u4e0d\u8981\u4f7f\u7528eof\u8fdb\u884c\u5224\u65ad\uff0c\u4f1a\u5bfc\u81f4\u5faa\u73af\u591a\u4e00\u6b21 #include <string> #include <fstream> int main() { std::ifstream in_file(\"doc_id.txt\"); if(!in_file.is_open()) return -1; std::string line; //while(!in_file.eof()) { while(in_file >> line) { std::getline(in_file, line); } }","title":"2019 06 10 stl"},{"location":"cpp/2019-06-10-stl/#vector","text":"","title":"vector"},{"location":"cpp/2019-06-10-stl/#push_back-emplace_back","text":"emplace_back\u4f1a\u539f\u5730\u5bf9\u53c2\u6570\u8fdb\u884c\u6784\u9020\uff0c push_back\u8981\u4e48\u4f1a\u62f7\u8d1d\u53c2\u6570\uff0c\u8981\u4e48\u4f1a\u6784\u9020\u540e\u9700\u8981\u79fb\u52a8\u64cd\u4f5c","title":"push_back \u548c emplace_back"},{"location":"cpp/2019-06-10-stl/#clear","text":"clear \u540evector\u7684size=0, \u4f46capacity\u4e0d\u53d8 \u5982\u4f55\u6539\u53d8vector\u7684capacity vector<T>().swap(var) var.shrink_to_fit()","title":"clear"},{"location":"cpp/2019-06-10-stl/#_1","text":"\u4e0d\u8981\u4f7f\u7528eof\u8fdb\u884c\u5224\u65ad\uff0c\u4f1a\u5bfc\u81f4\u5faa\u73af\u591a\u4e00\u6b21 #include <string> #include <fstream> int main() { std::ifstream in_file(\"doc_id.txt\"); if(!in_file.is_open()) return -1; std::string line; //while(!in_file.eof()) { while(in_file >> line) { std::getline(in_file, line); } }","title":"\u6587\u4ef6\u8bfb\u5199"},{"location":"ctr/2019-02-17-xdeepfm/","text":"\u8bba\u6587Paper xDeepFM: Combining Explicit and Implicit Feature Interactions for Recommender Systems \u8bba\u6587\u94fe\u63a5\uff1ahttps://arxiv.org/abs/1803.05170 \u8f93\u5165\uff1a m*D\u7684\u77e9\u9635\uff0c \u4e3am\u4e2a\u7279\u5f81\uff0c\u6bcf\u4e2a\u7279\u5f81\u4e3aD\u7ef4\u5411\u91cf CIN: \u53c2\u6570W\u7684shape\u4e3a(1, h_prev*m, h)\uff0c h\u4e3a\u9690\u5c42\u8282\u70b9\u4e2a\u6570\uff0c h_prev\u4e3a\u524d\u4e00\u4e2a\u9690\u5c42\u7684\u8282\u70b9\u4e2a\u6570\uff0c m\u4e2a\u539f\u59cb\u8f93\u5165\u7684\u7279\u5f81\u4e2a\u6570 \u9690\u5c42\u8f93\u51fa\uff1a h*D\u7684\u77e9\u9635\uff0c \u4e3ah\u4e2a\u9690\u8282\u70b9\uff0c \u6bcf\u4e2a\u9690\u8282\u70b9\u4e3aD\u7ef4\u5411\u91cf \u8f93\u5165\u5c42shape\uff1a (batch_size, field_size, embedding_size) \u8f93\u5165\u5c42\u7684split\uff1a embedding_size \u4e2a\u53d8\u91cf\uff0c\u6bcf\u4e2a\u4e3a(batch_size, field_size, 1) \u524d\u4e00\u4e2a\u9690\u5c42\u8f93\u51fa\u7684split: embedding_size\u4e2a\u53d8\u91cf\uff0c \u6bcf\u4e2a\u4e3a(batch_size, h_prev, 1) matmul: \u8f93\u5165\u5c42split \u4e0e \u524d\u4e00\u4e2a\u9690\u5c42\u8f93\u51fa\u7684split \u8fdb\u884cmatmul\uff0c matmul\u65f6\u524d\u4e00\u4e2a\u9690\u5c42\u8f93\u51fa\u7684split\uff0c \u8f93\u51fa\u4e3a(embedding_size, batch_size, field_size, h_prev) reshape\uff1a (embedding_size, batch_size, field_size, h_prev) =\u300b (embedding_size, batch_size, field_size * h_prev) transpose: (embedding_size, batch_size, field_size * h_prev) =\u300b (batch_size, embedding_size, field_size * h_prev) conv1d => conv2d \u8f93\u5165\uff1a(batch_size, embedding_size, field_size * h_prev) => (batch_size, 1, embedding_size, field_size*h_prev) filter: (filter_width=1, field_size * h_prev, h) => (1, filter_width=1, field_size*h_prev, h) \u8f93\u51fa\uff1a(batch_size, embedding_size, h) =>","title":"xdeepfm"},{"location":"ctr/2019-02-17-xdeepfm/#paper","text":"xDeepFM: Combining Explicit and Implicit Feature Interactions for Recommender Systems \u8bba\u6587\u94fe\u63a5\uff1ahttps://arxiv.org/abs/1803.05170","title":"\u8bba\u6587Paper"},{"location":"domain algo/2019-01-08-bandit/","text":"https://chuansongme.com/n/362337751839 Thompson sampling beta\u5206\u5e03\uff0c\u53c2\u6570$\\alpha,\\beta$ \u5f53\u4e2a\u4f53\u7684\u6837\u672c\u6570\u636e\u5f88\u5c0f\u65f6\uff0c\u4f7f\u7528\u603b\u4f53\u7684\u6837\u672c\u6570\u636e\u4f5c\u4e3a\u4e2a\u4f53\u7684\u521d\u59cb\u503c \u4f8b\u5982n\u4e2a\u68d2\u7403\u8fd0\u52a8\u5458\u5171\u51fb\u740310000\u6b21\uff0c\u5171\u51fb\u4e2d2700\u6b21 \u5f53\u6709\u4e00\u4e2a\u65b0\u7684\u68d2\u7403\u8fd0\u52a8\u5458\u51fa\u73b0\u65f6\uff0c \u5176\u5171\u51fb\u74035\u6b21\uff0c\u5171\u96c6\u4e2d2\u6b21\uff0c \u6211\u4eec\u8ba4\u4e3a\u8fd9\u4e2a\u68d2\u7403\u8fd0\u52a8\u5458\u7684\u521d\u59cb\u72b6\u6001\u4e3a\u68d2\u7403\u8fd0\u52a8\u5458\u7684\u5e73\u5747\u6c34\u5e73\uff0c \u56e0\u6b64\u53ef\u4ee5\u5f53\u505a\u8be5\u68d2\u7403\u8fd0\u52a8\u5458\u5171\u51fb\u740310005\u6b21\uff0c\u5171\u51fb\u4e2d2702\u6b21 \u5f53\u8fd9\u4e2a\u65b0\u7684\u68d2\u7403\u8fd0\u52a8\u5458\u6570\u636e\u8db3\u591f\u591a\u65f6\uff0c Upper Confidence Bound","title":"bandit"},{"location":"domain algo/2019-01-08-bandit/#thompson-sampling","text":"beta\u5206\u5e03\uff0c\u53c2\u6570$\\alpha,\\beta$ \u5f53\u4e2a\u4f53\u7684\u6837\u672c\u6570\u636e\u5f88\u5c0f\u65f6\uff0c\u4f7f\u7528\u603b\u4f53\u7684\u6837\u672c\u6570\u636e\u4f5c\u4e3a\u4e2a\u4f53\u7684\u521d\u59cb\u503c \u4f8b\u5982n\u4e2a\u68d2\u7403\u8fd0\u52a8\u5458\u5171\u51fb\u740310000\u6b21\uff0c\u5171\u51fb\u4e2d2700\u6b21 \u5f53\u6709\u4e00\u4e2a\u65b0\u7684\u68d2\u7403\u8fd0\u52a8\u5458\u51fa\u73b0\u65f6\uff0c \u5176\u5171\u51fb\u74035\u6b21\uff0c\u5171\u96c6\u4e2d2\u6b21\uff0c \u6211\u4eec\u8ba4\u4e3a\u8fd9\u4e2a\u68d2\u7403\u8fd0\u52a8\u5458\u7684\u521d\u59cb\u72b6\u6001\u4e3a\u68d2\u7403\u8fd0\u52a8\u5458\u7684\u5e73\u5747\u6c34\u5e73\uff0c \u56e0\u6b64\u53ef\u4ee5\u5f53\u505a\u8be5\u68d2\u7403\u8fd0\u52a8\u5458\u5171\u51fb\u740310005\u6b21\uff0c\u5171\u51fb\u4e2d2702\u6b21 \u5f53\u8fd9\u4e2a\u65b0\u7684\u68d2\u7403\u8fd0\u52a8\u5458\u6570\u636e\u8db3\u591f\u591a\u65f6\uff0c","title":"Thompson sampling"},{"location":"domain algo/2019-01-08-bandit/#upper-confidence-bound","text":"","title":"Upper Confidence Bound"},{"location":"gcc/2019-04-18-ldd/","text":"\u7a0b\u5e8f\u8fd0\u884c\u65f6\u5230\u5e95\u4f7f\u7528\u54ea\u4e2a\u4f4d\u7f6e\u7684\u52a8\u6001\u94fe\u63a5\u5e93 LD_LIBRARY_PATH\u4f1a\u5e94\u5f71\u54cdldd\u547d\u4ee4\u7684\u8f93\u51fa\u7ed3\u679c\uff0c ldd\u8f93\u51fa\u7684\u662f\u7a0b\u5e8f\u8fd0\u884c\u548c\u7f16\u8bd1\u65f6\u7684\u641c\u7d22\u8def\u5f84\uff0c\u52a1\u5fc5\u4fdd\u6301\u7f16\u8bd1\u65f6\u548c\u8fd0\u884c\u65f6\u52a8\u6001\u5e93\u4f7f\u7528\u7684\u662f\u540c\u4e00\u4e2a \u5426\u5219\u5bb9\u6613\u5bfc\u81f4undefined symbol:\u9519\u8bef ldd \u67e5\u770b\u6587\u4ef6\u94fe\u63a5\u4e86\u54ea\u4e9b\u52a8\u6001\u94fe\u63a5\u5e93\u53ca\u5176\u94fe\u63a5\u8def\u5f84 ldd \u663e\u793a\u51fa\u7684\u52a8\u6001\u94fe\u63a5\u5e93\u8def\u5f84\u4e00\u822c\u662f\u5728\u7cfb\u7edf\u8def\u5f84\u4e2d\u67e5\u627e\u52a8\u6001\u94fe\u63a5\u5e93\u6587\u4ef6\u540d\u5339\u914d\u5230\u7684\u8def\u5f84\uff0c \u5982\u679c\u7a0b\u5e8f\u5728\u4f7f\u7528gcc\u65f6\u7f16\u8bd1\u6307\u5b9a\u4e86rpath\u7b49\u53c2\u6570\uff0c\u5c06\u663e\u793a\u7a0b\u5e8f\u94fe\u63a5\u5e93\u7f16\u8bd1\u65f6\u7684\u94fe\u63a5\u5730\u5740 \u67e5\u770blibc.so.6 \u548clibstdc++.so.6\u52a8\u6001\u94fe\u63a5\u5e93\u652f\u6301\u7684GLIBC \u548cGLIBCXX\u7248\u672c strings /lib/x86_64-linux-gnu/libc.so.6 | grep GLIBC gcc\u4f7f\u7528\u7684GLIBC \u7248\u672c\u662f\u5728\u7f16\u8bd1\u65f6\u51b3\u5b9a\u7684\uff0c \u8fd9\u4e2aGLIBC\u7248\u672c\u4e00\u822c\u662f\u7f16\u8bd1gcc\u65f6\u4f7f\u7528\u7684GLIBC\u7248\u672c\u3002 \u7528gcc\u7f16\u8bd1\u51fa\u6765\u7684\u7a0b\u5e8f\u4e5f\u4f1a\u4f7f\u7528\u8fd9\u4e2aGLIBC\u7248\u672c gcc\u548cGLIBC\u7248\u672c\u5bf9\u7167\u5173\u7cfb https://gcc.gnu.org/onlinedocs/libstdc++/manual/abi.html \u5f53\u5728\u65e7\u7cfb\u7edf\u4e0a\u5b89\u88c5\u7248\u672c\u8f83\u65b0\u7684gcc\u540e\uff0c \u4f7f\u7528\u7248\u672c\u8f83\u65b0\u7684gcc\u7f16\u8bd1\u51fa\u7684\u7a0b\u5e8f\u4e5f\u4f1a\u4f7f\u7528\u8f83\u65b0\u7248\u672c\u7684GLIBC\u7248\u672c\uff0c\u5982\u679c\u6ca1\u6709\u5c06\u7cfb\u7edf\u7684\u52a8\u6001\u94fe\u63a5\u5e93\u66f4\u65b0\u5230\u5339\u914d\u7684GLIBC\u7248\u672c\uff0c\u7531\u4e8e\u7a0b\u5e8f\u8fd0\u884c\u65f6\u4f1a\u9ed8\u8ba4\u52a0\u8f7d\u7cfb\u7edf\u8def\u5f84\u4e0b\u7684\u65e7\u52a8\u6001\u94fe\u63a5\u5e93\uff0c\u5bfc\u81f4\u627e\u4e0d\u5230\u65b0\u7248\u672c\u7684GLIBC\u3002 \u89e3\u51b3\u65b9\u6cd5\uff0c \u65b9\u6cd51\uff1a \u628a\u7cfb\u7edf\u7684\u52a8\u6001\u94fe\u63a5\u5e93\uff0c\u4f7f\u7528\u5305\u542b\u65b0\u7248\u672cGLIBC\u7684\u52a8\u6001\u94fe\u63a5\u5e93\u66ff\u6362\u6389 \u65b9\u6cd52\uff1a \u5728LD_LIBRARY_PATH\u7684\u524d\u8fb9\u6dfb\u52a0\u65b0\u7248\u672cGLIBC\u7684\u52a8\u6001\u94fe\u63a5\u5e93\u6240\u5728\u7684\u8def\u5f84 \u65b9\u6cd53\uff1a \u4f7f\u7528\u7cfb\u7edf\u52a8\u6001\u94fe\u63a5\u5e93\u5bf9\u5e94\u7684\u7cfb\u7edf\u9ed8\u8ba4gcc\u8fdb\u884c\u7f16\u8bd1\uff0c\u800c\u4e0d\u662f\u65b0\u7248\u672cgcc \u8bbe\u7f6eLD_LIBRARY_PATH\uff0c\u518d\u8fd0\u884cldd, \u5c31\u80fd\u770b\u5230\u7a0b\u5e8f\u8fd0\u884c\u65f6\u4f1a\u52a0\u8f7d\u54ea\u4e2a\u4f4d\u7f6e\u7684\u94fe\u63a5\u5e93 LD_LIBRARY_PATH=/usr/local/lib64:/usr/local/lib:./lib ldd lib/libtensorflow_cc.so \u6709\u7684\u65f6\u5019\u8bbe\u7f6e\u4e86LD_LIBRARY_PATH\uff0c\u5374\u6ca1\u6709\u5f71\u54cd\u5230 ldconfig -p","title":"\ufffd\ufffd\ufffd\ufffd"},{"location":"gcc/2019-04-19-gdb/","text":"title soaringsoul 2019-04-19 16:00:23 symbol table -g set are debugging symbols ELF linking symbols # core debug -g build backtrace(bt) \u67e5\u770b\u8c03\u7528\u6808\u4fe1\u606f frame \u67e5\u770b\u6808\u5e27 print std::shared_ptr ad_account; print ((AdAccount*)ad_account)->cache_flag \u67e5\u770b\u5171\u4eab\u94fe\u63a5\u5e93\u662f\u5426\u6709\u7b26\u53f7\u8868 info sharedlibrary ~/.gdbinit\u4e2d\u8bbe\u7f6e set verbose on\uff0c \u5f53\u542f\u52a8gdb\u65f6\u8f93\u51fa\u4fe1\u606f\u4f1a\u6253\u5370\u662f\u5426\u627e\u5230\u4e86\u5171\u4eab\u5e93\u7684\u7b26\u53f7\u8868 Reading symbols from /lib/x86_64-linux-gnu/libc.so.6...(no debugging symbols found)...done \u67e5\u770b\u5206\u79bb\u7b26\u53f7\u8868\u52a0\u8f7d\u8def\u5f84 show debug-file-directory set debug-file-directory <dir> \u67e5\u770blibc\u7248\u672c ls -l /lib/x86_64-linux-gnu/libc.so.6 \u591a\u7ebf\u7a0b info threads thread \u5207\u6362\u5230\u76ee\u6807\u7ebf\u7a0b \u8c03\u8bd5\u4fe1\u606f\u8f93\u51fa\u5230\u6587\u4ef6 set logging file thread.txt set logging on thread apply all bt set logging off \u6253\u5370\u5185\u5b58 x/6000sb \u6253\u53706000\u5b57\u8282\uff0c s\u8868\u793a\u6309\u5b57\u7b26\u4e32\u6253\u5370\uff0c b\u8868\u793a\u5b57\u8282 Debugging Information in Separate Files /usr/lib/debug Pretty printing (gdb) python execfile(\"printers.py\") Python scripting is not supported in this copy of GDB \u91cd\u65b0\u7f16\u8bd1gdb http://tromey.com/blog/?p=494 part1 http://tromey.com/blog/?p=524 part2 http://tromey.com/blog/?p=546 Libheap https://github.com/cloudburst/libheap/blob/master/docs/UserGuide.md chap https://github.com/vmware/chap/blob/master/USERGUIDE.md \u6027\u80fd\u5206\u6790 gnu Gprof https://sourceware.org/binutils/docs/gprof/index.html google gperftools bin objdump # \u67e5\u770b\u7b26\u53f7\u8868 objdump -t <bin> SYMBOL TABLE: 0000000000400238 l d .interp 0000000000000000 .interp 0000000000400254 l d .note.ABI-tag 0000000000000000 .note.ABI-tag 0000000000400278 l d .hash 0000000000000000 .hash 0000000000409208 l d .dynsym 0000000000000000 .dynsym 0000000000426ef0 l d .dynstr 0000000000000000 .dynstr 00000000004673ea l d .gnu.version 0000000000000000 .gnu.version # \u7b2c\u4e00\u4e2a\u57df\u4e3a\u7b26\u53f7\u5730\u5740, eg: 0000000000400238 # \u7b2c\u4e8c\u4e2a\u57df\u4e3a\u7b26\u53f7\u7684flag\uff0c\u7528\u591a\u4e2a\u5b57\u7b26\u8868\u793a\uff0ceg: l d # \u7b2c\u4e09\u4e2a\u57df\u4e3a\u7b26\u53f7\u6240\u5728\u7684section, eg: .interp # \u7b2c\u56db\u4e2a\u57df\u4e3a\u7b26\u53f7\u7684\u5bf9\u9f50\u6216\u8005\u5927\u5c0f # \u7b2c\u4e94\u4e2a\u57df\u4e3a\u7b26\u53f7\u7684\u540d\u79f0 readelf addr2line \u4ee3\u7801\u6bb5\u4f4d\u4e8e\u4f4e\u5730\u5740\u5185\u5b58\uff0c .so\u5171\u4eab\u94fe\u63a5\u5e93\u4f4d\u4e8e\u9ad8\u5730\u5740\u5185\u5b58\uff0c \u5171\u4eab\u5e93\u4ee3\u7801\u5728\u7269\u7406\u5185\u5b58\u4e2d\u53ea\u4f1a\u88ab\u88c5\u8f7d\u4e00\u6b21\uff0c \u4e0d\u540c\u8fdb\u7a0b\u5c06\u865a\u62df\u5730\u5740\u6620\u5c04\u5230\u76f8\u540c\u7684\u7269\u7406\u5730\u5740\u5b9e\u73b0\u5171\u4eab\uff0c \u5171\u4eab\u5e93\u4e2d\u5b58\u5728\u5168\u5c40\u53d8\u91cf\u65f6\uff0c\u901a\u8fc7copy on write\u6a21\u5f0f\u62f7\u8d1d\u53d7\u5f71\u54cd\u7684\u9875\u9762\u5230\u65b0\u7684\u7269\u7406\u5185\u5b58\uff0c\u5c06\u865a\u62df\u5730\u5740\u91cd\u65b0\u6620\u5c04\u5230\u65b0\u7684\u7269\u7406\u5730\u5740\u4e0a valgrind Invalid read of size 1 \u8868\u660e\u975e\u6cd5\u5185\u5b58\u8bbf\u95ee Address 0xf5bc3f0 is 0 bytes inside a block of size 33 free'd \u8868\u660e\u5185\u5b58\u4e4b\u524d\u662f\u5982\u4f55\u88ab\u91ca\u653e\u7684 Block was alloc'd at \u8868\u660e\u5185\u5b58\u4e4b\u524d\u662f\u5982\u4f55\u88ab\u5206\u914d\u7684 Warning: set address range perms: \u89e6\u53d1\u793a\u4f8b\uff1a mprotect\uff0c mmap\uff0c munmap undefined \u2013 most likely a new allocation noaccess \u2013 relates to deallocation \u5185\u5b58\u6cc4\u9732 https://unix.stackexchange.com/questions/36450/how-can-i-find-a-memory-leak-of-a-running-process 1 Find out the PID of the process which causing memory leak. 2 capture the /proc/PID/smaps and save into some file like BeforeMemInc.txt. 3 wait till memory gets increased. 4 capture again /proc/PID/smaps and save it has afterMemInc.txt 5 find the difference between first smaps and 2nd smaps, e. g. with diff -u beforeMemInc.txt afterMemInc.txt 6 note down the address range where memory got increased, for example: beforeMemInc.txt afterMemInc.txt --------------------------------------------------- 2b3289290000-2b3289343000 2b3289290000-2b3289343000 #ADDRESS Shared_Clean: 0 kB Shared_Clean: 0 kB Shared_Dirty: 0 kB Shared_Dirty: 0 kB Private_Clean: 0 kB Private_Clean: 0 kB Private_Dirty: 28 kB Private_Dirty: 36 kB Referenced: 28 kB Referenced: 36 kB Anonymous: 28 kB Anonymous: 36 kB #INCREASE MEM AnonHugePages: 0 kB AnonHugePages: 0 kB Swap: 0 kB Swap: 0 kB KernelPageSize: 4 kB KernelPageSize: 4 kB MMUPageSize: 4 kB MMUPageSize: 4 kB Locked: 0 kB Locked: 0 kB VmFlags: rd wr mr mw me ac VmFlags: rd wr mr mw me ac 7 use GDB to dump memory on running process or get the coredump using gcore -o process 8 I used gdb on running process to dump the memory to some file. gdb -p PID dump memory ./dump_outputfile.dump 0x2b3289290000 0x2b3289343000 9 now, use strings command or hexdump -C to print the dump_outputfile.dump 10 You get readable form where you can locate those strings into your source code.","title":"2019 04 19 gdb"},{"location":"gcc/2019-04-19-gdb/#symbol-table","text":"-g set are debugging symbols ELF linking symbols # core debug -g build backtrace(bt) \u67e5\u770b\u8c03\u7528\u6808\u4fe1\u606f frame \u67e5\u770b\u6808\u5e27 print std::shared_ptr ad_account; print ((AdAccount*)ad_account)->cache_flag \u67e5\u770b\u5171\u4eab\u94fe\u63a5\u5e93\u662f\u5426\u6709\u7b26\u53f7\u8868 info sharedlibrary ~/.gdbinit\u4e2d\u8bbe\u7f6e set verbose on\uff0c \u5f53\u542f\u52a8gdb\u65f6\u8f93\u51fa\u4fe1\u606f\u4f1a\u6253\u5370\u662f\u5426\u627e\u5230\u4e86\u5171\u4eab\u5e93\u7684\u7b26\u53f7\u8868 Reading symbols from /lib/x86_64-linux-gnu/libc.so.6...(no debugging symbols found)...done \u67e5\u770b\u5206\u79bb\u7b26\u53f7\u8868\u52a0\u8f7d\u8def\u5f84 show debug-file-directory set debug-file-directory <dir>","title":"symbol table"},{"location":"gcc/2019-04-19-gdb/#libc","text":"ls -l /lib/x86_64-linux-gnu/libc.so.6","title":"\u67e5\u770blibc\u7248\u672c"},{"location":"gcc/2019-04-19-gdb/#_1","text":"info threads thread \u5207\u6362\u5230\u76ee\u6807\u7ebf\u7a0b","title":"\u591a\u7ebf\u7a0b"},{"location":"gcc/2019-04-19-gdb/#_2","text":"set logging file thread.txt set logging on thread apply all bt set logging off","title":"\u8c03\u8bd5\u4fe1\u606f\u8f93\u51fa\u5230\u6587\u4ef6"},{"location":"gcc/2019-04-19-gdb/#_3","text":"x/6000sb \u6253\u53706000\u5b57\u8282\uff0c s\u8868\u793a\u6309\u5b57\u7b26\u4e32\u6253\u5370\uff0c b\u8868\u793a\u5b57\u8282","title":"\u6253\u5370\u5185\u5b58"},{"location":"gcc/2019-04-19-gdb/#debugging-information-in-separate-files","text":"/usr/lib/debug","title":"Debugging Information in Separate Files"},{"location":"gcc/2019-04-19-gdb/#pretty-printing","text":"(gdb) python execfile(\"printers.py\") Python scripting is not supported in this copy of GDB \u91cd\u65b0\u7f16\u8bd1gdb http://tromey.com/blog/?p=494 part1 http://tromey.com/blog/?p=524 part2 http://tromey.com/blog/?p=546","title":"Pretty printing"},{"location":"gcc/2019-04-19-gdb/#libheap","text":"https://github.com/cloudburst/libheap/blob/master/docs/UserGuide.md","title":"Libheap"},{"location":"gcc/2019-04-19-gdb/#chap","text":"https://github.com/vmware/chap/blob/master/USERGUIDE.md","title":"chap"},{"location":"gcc/2019-04-19-gdb/#_4","text":"","title":"\u6027\u80fd\u5206\u6790"},{"location":"gcc/2019-04-19-gdb/#gnu-gprof","text":"https://sourceware.org/binutils/docs/gprof/index.html","title":"gnu Gprof"},{"location":"gcc/2019-04-19-gdb/#google-gperftools","text":"","title":"google gperftools"},{"location":"gcc/2019-04-19-gdb/#bin","text":"objdump # \u67e5\u770b\u7b26\u53f7\u8868 objdump -t <bin> SYMBOL TABLE: 0000000000400238 l d .interp 0000000000000000 .interp 0000000000400254 l d .note.ABI-tag 0000000000000000 .note.ABI-tag 0000000000400278 l d .hash 0000000000000000 .hash 0000000000409208 l d .dynsym 0000000000000000 .dynsym 0000000000426ef0 l d .dynstr 0000000000000000 .dynstr 00000000004673ea l d .gnu.version 0000000000000000 .gnu.version # \u7b2c\u4e00\u4e2a\u57df\u4e3a\u7b26\u53f7\u5730\u5740, eg: 0000000000400238 # \u7b2c\u4e8c\u4e2a\u57df\u4e3a\u7b26\u53f7\u7684flag\uff0c\u7528\u591a\u4e2a\u5b57\u7b26\u8868\u793a\uff0ceg: l d # \u7b2c\u4e09\u4e2a\u57df\u4e3a\u7b26\u53f7\u6240\u5728\u7684section, eg: .interp # \u7b2c\u56db\u4e2a\u57df\u4e3a\u7b26\u53f7\u7684\u5bf9\u9f50\u6216\u8005\u5927\u5c0f # \u7b2c\u4e94\u4e2a\u57df\u4e3a\u7b26\u53f7\u7684\u540d\u79f0 readelf addr2line \u4ee3\u7801\u6bb5\u4f4d\u4e8e\u4f4e\u5730\u5740\u5185\u5b58\uff0c .so\u5171\u4eab\u94fe\u63a5\u5e93\u4f4d\u4e8e\u9ad8\u5730\u5740\u5185\u5b58\uff0c \u5171\u4eab\u5e93\u4ee3\u7801\u5728\u7269\u7406\u5185\u5b58\u4e2d\u53ea\u4f1a\u88ab\u88c5\u8f7d\u4e00\u6b21\uff0c \u4e0d\u540c\u8fdb\u7a0b\u5c06\u865a\u62df\u5730\u5740\u6620\u5c04\u5230\u76f8\u540c\u7684\u7269\u7406\u5730\u5740\u5b9e\u73b0\u5171\u4eab\uff0c \u5171\u4eab\u5e93\u4e2d\u5b58\u5728\u5168\u5c40\u53d8\u91cf\u65f6\uff0c\u901a\u8fc7copy on write\u6a21\u5f0f\u62f7\u8d1d\u53d7\u5f71\u54cd\u7684\u9875\u9762\u5230\u65b0\u7684\u7269\u7406\u5185\u5b58\uff0c\u5c06\u865a\u62df\u5730\u5740\u91cd\u65b0\u6620\u5c04\u5230\u65b0\u7684\u7269\u7406\u5730\u5740\u4e0a","title":"bin"},{"location":"gcc/2019-04-19-gdb/#valgrind","text":"Invalid read of size 1 \u8868\u660e\u975e\u6cd5\u5185\u5b58\u8bbf\u95ee Address 0xf5bc3f0 is 0 bytes inside a block of size 33 free'd \u8868\u660e\u5185\u5b58\u4e4b\u524d\u662f\u5982\u4f55\u88ab\u91ca\u653e\u7684 Block was alloc'd at \u8868\u660e\u5185\u5b58\u4e4b\u524d\u662f\u5982\u4f55\u88ab\u5206\u914d\u7684 Warning: set address range perms: \u89e6\u53d1\u793a\u4f8b\uff1a mprotect\uff0c mmap\uff0c munmap undefined \u2013 most likely a new allocation noaccess \u2013 relates to deallocation","title":"valgrind"},{"location":"gcc/2019-04-19-gdb/#_5","text":"https://unix.stackexchange.com/questions/36450/how-can-i-find-a-memory-leak-of-a-running-process 1 Find out the PID of the process which causing memory leak. 2 capture the /proc/PID/smaps and save into some file like BeforeMemInc.txt. 3 wait till memory gets increased. 4 capture again /proc/PID/smaps and save it has afterMemInc.txt 5 find the difference between first smaps and 2nd smaps, e. g. with diff -u beforeMemInc.txt afterMemInc.txt 6 note down the address range where memory got increased, for example: beforeMemInc.txt afterMemInc.txt --------------------------------------------------- 2b3289290000-2b3289343000 2b3289290000-2b3289343000 #ADDRESS Shared_Clean: 0 kB Shared_Clean: 0 kB Shared_Dirty: 0 kB Shared_Dirty: 0 kB Private_Clean: 0 kB Private_Clean: 0 kB Private_Dirty: 28 kB Private_Dirty: 36 kB Referenced: 28 kB Referenced: 36 kB Anonymous: 28 kB Anonymous: 36 kB #INCREASE MEM AnonHugePages: 0 kB AnonHugePages: 0 kB Swap: 0 kB Swap: 0 kB KernelPageSize: 4 kB KernelPageSize: 4 kB MMUPageSize: 4 kB MMUPageSize: 4 kB Locked: 0 kB Locked: 0 kB VmFlags: rd wr mr mw me ac VmFlags: rd wr mr mw me ac 7 use GDB to dump memory on running process or get the coredump using gcore -o process 8 I used gdb on running process to dump the memory to some file. gdb -p PID dump memory ./dump_outputfile.dump 0x2b3289290000 0x2b3289343000 9 now, use strings command or hexdump -C to print the dump_outputfile.dump 10 You get readable form where you can locate those strings into your source code.","title":"\u5185\u5b58\u6cc4\u9732"},{"location":"hack/2019-06-12-sql inject/","text":"layout: post title: \"sql inject\" subtitle: \"sql inject\" date: 2019-06-12 16:56:15 author: \"none\" header-img: \"img/posts/default_post.jpg\" catalog: true tags: - tag \u540e\u53f0\u767b\u5f55 http://www.shiyanbar.com/ctf/2036 php \u5904\u7406password\u7684\u4ee3\u7801\u5982\u4e0b\uff1a <!-- $password=$_POST['password']; $sql = \"SELECT * FROM admin WHERE username = 'admin' and password = '\".md5($password,true).\"'\"; $result=mysqli_query($link,$sql); if(mysqli_num_rows($result)>0){ echo 'flag is :'.$flag; } else{ echo '\u5bc6\u7801\u9519\u8bef!'; } --> $sql = \"SELECT * FROM admin WHERE username = 'admin' and password = '\".md5($password,true).\"'\"; \u8be5\u8bed\u53e5\u6784\u5efasql\u67e5\u8be2\uff0c php\u7684.\u64cd\u4f5c\u7b26\u8868\u793a\u5b57\u7b26\u4e32\u62fc\u63a5, \u5b57\u7b26\u4e32\u7531\u4e0b\u9762\u4e09\u4e2a\u90e8\u5206\u6784\u6210 1) \"SELECT * FROM admin WHERE username = 'admin' and password = '\" 2) md5($password,true) 3) \"'\" md5($password,true) \u51fd\u6570\uff0c MD5\u62a5\u6587\u6458\u8981\u5c06\u4ee516\u5b57\u8282\u957f\u5ea6\u7684\u539f\u59cb\u4e8c\u8fdb\u5236\u683c\u5f0f\u8fd4\u56de\uff0c \u7136\u540e\u88ab\u8f6c\u6362\u6210\u5b57\u7b26\u4e32 \u5bfb\u627e$password\u8f93\u5165\uff0c\u4f7f\u5f97md5\u8fd4\u56de\u5b57\u7b26\u4e32\u5b8c\u6210sql\u6ce8\u5165 <?php $password = \"ffifdyop\"; echo md5($password,true); ?> \u8f93\u51fa\uff1a 'or'6\ufffd]\ufffd\ufffd!r,\ufffd\ufffdb\u001c \u767b\u9646\u4e00\u4e0b\u597d\u5417?? http://www.shiyanbar.com/ctf/1942 username:'=' password:'=' create table users(username char(20), password char(20)); insert into users values(\"admin\", \"admin\"); select * from users where username=''='' and password=''=''; # username='' \u7684\u7ed3\u679c\u4e3a0\uff0c 0=''\u6bd4\u8f83\u65f6\uff0c\u5b57\u7b26\u4e32\u88ab\u8f6c\u4e3aint\u65f6\u53d8\u4e3a0\uff0c 0=0\u7ed3\u679c\u4e3atrue","title":"2019 06 12 sql inject"},{"location":"hack/2019-06-12-sql inject/#_1","text":"http://www.shiyanbar.com/ctf/2036 php \u5904\u7406password\u7684\u4ee3\u7801\u5982\u4e0b\uff1a <!-- $password=$_POST['password']; $sql = \"SELECT * FROM admin WHERE username = 'admin' and password = '\".md5($password,true).\"'\"; $result=mysqli_query($link,$sql); if(mysqli_num_rows($result)>0){ echo 'flag is :'.$flag; } else{ echo '\u5bc6\u7801\u9519\u8bef!'; } --> $sql = \"SELECT * FROM admin WHERE username = 'admin' and password = '\".md5($password,true).\"'\"; \u8be5\u8bed\u53e5\u6784\u5efasql\u67e5\u8be2\uff0c php\u7684.\u64cd\u4f5c\u7b26\u8868\u793a\u5b57\u7b26\u4e32\u62fc\u63a5, \u5b57\u7b26\u4e32\u7531\u4e0b\u9762\u4e09\u4e2a\u90e8\u5206\u6784\u6210 1) \"SELECT * FROM admin WHERE username = 'admin' and password = '\" 2) md5($password,true) 3) \"'\" md5($password,true) \u51fd\u6570\uff0c MD5\u62a5\u6587\u6458\u8981\u5c06\u4ee516\u5b57\u8282\u957f\u5ea6\u7684\u539f\u59cb\u4e8c\u8fdb\u5236\u683c\u5f0f\u8fd4\u56de\uff0c \u7136\u540e\u88ab\u8f6c\u6362\u6210\u5b57\u7b26\u4e32 \u5bfb\u627e$password\u8f93\u5165\uff0c\u4f7f\u5f97md5\u8fd4\u56de\u5b57\u7b26\u4e32\u5b8c\u6210sql\u6ce8\u5165 <?php $password = \"ffifdyop\"; echo md5($password,true); ?> \u8f93\u51fa\uff1a 'or'6\ufffd]\ufffd\ufffd!r,\ufffd\ufffdb","title":"\u540e\u53f0\u767b\u5f55"},{"location":"hack/2019-06-12-sql inject/#_2","text":"http://www.shiyanbar.com/ctf/1942 username:'=' password:'=' create table users(username char(20), password char(20)); insert into users values(\"admin\", \"admin\"); select * from users where username=''='' and password=''=''; # username='' \u7684\u7ed3\u679c\u4e3a0\uff0c 0=''\u6bd4\u8f83\u65f6\uff0c\u5b57\u7b26\u4e32\u88ab\u8f6c\u4e3aint\u65f6\u53d8\u4e3a0\uff0c 0=0\u7ed3\u679c\u4e3atrue","title":"\u767b\u9646\u4e00\u4e0b\u597d\u5417??"},{"location":"illusion/2019-06-26-illusion/","text":"layout: post title: \"illusion\" subtitle: \"illusion\" date: 2019-06-26 16:27:45 author: \"none\" header-img: \"img/posts/default_post.jpg\" catalog: true tags: - tag Checker shadow illusion \u9a6c\u8d6b\u5e26\u6548\u5e94\uff08Mach band effect\uff09 https://zhuanlan.zhihu.com/p/25720633","title":"2019 06 26 illusion"},{"location":"illusion/2019-06-26-illusion/#checker-shadow-illusion","text":"\u9a6c\u8d6b\u5e26\u6548\u5e94\uff08Mach band effect\uff09 https://zhuanlan.zhihu.com/p/25720633","title":"Checker shadow illusion"},{"location":"java/2019-05-13-reflection/","text":"layout: post title: \"reflection\" subtitle: \"reflection\" date: 2019-05-13 17:39:58 author: \"none\" header-img: \"img/posts/default_post.jpg\" catalog: true tags: - tag \u52a8\u6001\u52a0\u8f7d\u7c7b\u6587\u4ef6\u548c\u6784\u5efa\u5bf9\u8c61 Class<?> class1 = null class1 = Class.forName(\"com.b510.hongten.test.reflex.Person\"); Person person = (Person) class1.newInstance(); Method getMethod public Method getDeclaredMethod(String name, Class<?>... parameterTypes) throws NoSuchMethodException, SecurityException name: \u65b9\u6cd5\u7684\u540d\u79f0 parameterTypes\uff1a\u65b9\u6cd5\u7684\u53c2\u6570\u7c7b\u578b Field getDeclaredField invoke","title":"2019 05 13 reflection"},{"location":"java/2019-05-13-reflection/#_1","text":"Class<?> class1 = null class1 = Class.forName(\"com.b510.hongten.test.reflex.Person\"); Person person = (Person) class1.newInstance(); Method getMethod public Method getDeclaredMethod(String name, Class<?>... parameterTypes) throws NoSuchMethodException, SecurityException name: \u65b9\u6cd5\u7684\u540d\u79f0 parameterTypes\uff1a\u65b9\u6cd5\u7684\u53c2\u6570\u7c7b\u578b Field getDeclaredField invoke","title":"\u52a8\u6001\u52a0\u8f7d\u7c7b\u6587\u4ef6\u548c\u6784\u5efa\u5bf9\u8c61"},{"location":"jekyll/2018-11-19-jekyll blog/","text":"\u76ee\u5f55\u7ed3\u6784 _includes: html, \u53ef\u4ee5\u4f7f\u7528site\u53ef\u8bbf\u95ee_config.yml\u4e2d\u5b9a\u4e49\u7684\u503c _posts\uff1a \u5b58\u653e\u6587\u7ae0\uff0c\u5982markdown\u6587\u6863 _site\uff1a Jekyll\u8f6c\u6362\u751f\u6210\u540e\u7684\u7f51\u7ad9 archive.html - \u7d22\u5f15\u6587\u7ae0\u5217\u8868 _layouts/post.html \u6e32\u67d3\u6587\u7ae0\u9875\u9762 _posts \u76ee\u5f55\u4e0b\u7684\u7f51\u7ad9\u901a\u8fc7front-matter\u5f15\u7528_layouts/post.html --- layout: post --- _layouts/post.html \u4e2d\u53ef\u4ee5\u901a\u8fc7page\u5168\u5c40\u53d8\u91cf\u5f15\u7528\u6587\u7ae0\u7684front-matter \u5206\u9875 \u63d2\u4ef6 _config.yml paginate: 10 paginator liquid \u5bf9\u8c61\u5c5e\u6027 \u6570\u5b66\u516c\u5f0f \u914d\u7f6e\u6587\u4ef6 _config.yml page-mathjax: true markdown: kramdown kramdown: input: GFM syntax_highlighter_opts: span: line_numbers: false block: line_numbers: true start_line: 1 _layouts/post.html {% raw %} {% if site.page-mathjax %} {% include mathjax_support.html %} {% endif %} {% endraw %} _includes/mathjax_support.html <script type=\"text/x-mathjax-config\"> MathJax.Hub.Config({ TeX: { equationNumbers: { autoNumber: \"AMS\" } }, SVG: { scale: 90 }, tex2jax: { inlineMath: [ ['$','$'] ], displayMath: [ ['$$','$$'] ], processEscapes: true, } }); </script> <script type=\"text/javascript\" src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-AMS-MML_SVG\"> </script>","title":"jekyll blog"},{"location":"jekyll/2018-11-19-jekyll blog/#_1","text":"_includes: html, \u53ef\u4ee5\u4f7f\u7528site\u53ef\u8bbf\u95ee_config.yml\u4e2d\u5b9a\u4e49\u7684\u503c _posts\uff1a \u5b58\u653e\u6587\u7ae0\uff0c\u5982markdown\u6587\u6863 _site\uff1a Jekyll\u8f6c\u6362\u751f\u6210\u540e\u7684\u7f51\u7ad9 archive.html - \u7d22\u5f15\u6587\u7ae0\u5217\u8868 _layouts/post.html \u6e32\u67d3\u6587\u7ae0\u9875\u9762 _posts \u76ee\u5f55\u4e0b\u7684\u7f51\u7ad9\u901a\u8fc7front-matter\u5f15\u7528_layouts/post.html --- layout: post --- _layouts/post.html \u4e2d\u53ef\u4ee5\u901a\u8fc7page\u5168\u5c40\u53d8\u91cf\u5f15\u7528\u6587\u7ae0\u7684front-matter","title":"\u76ee\u5f55\u7ed3\u6784"},{"location":"jekyll/2018-11-19-jekyll blog/#_2","text":"","title":"\u5206\u9875"},{"location":"jekyll/2018-11-19-jekyll blog/#_3","text":"_config.yml paginate: 10","title":"\u63d2\u4ef6"},{"location":"jekyll/2018-11-19-jekyll blog/#paginator-liquid","text":"","title":"paginator  liquid \u5bf9\u8c61\u5c5e\u6027"},{"location":"jekyll/2018-11-19-jekyll blog/#_4","text":"\u914d\u7f6e\u6587\u4ef6 _config.yml page-mathjax: true markdown: kramdown kramdown: input: GFM syntax_highlighter_opts: span: line_numbers: false block: line_numbers: true start_line: 1 _layouts/post.html {% raw %} {% if site.page-mathjax %} {% include mathjax_support.html %} {% endif %} {% endraw %} _includes/mathjax_support.html <script type=\"text/x-mathjax-config\"> MathJax.Hub.Config({ TeX: { equationNumbers: { autoNumber: \"AMS\" } }, SVG: { scale: 90 }, tex2jax: { inlineMath: [ ['$','$'] ], displayMath: [ ['$$','$$'] ], processEscapes: true, } }); </script> <script type=\"text/javascript\" src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-AMS-MML_SVG\"> </script>","title":"\u6570\u5b66\u516c\u5f0f"},{"location":"jekyll/mkdocs/","text":"","title":"Mkdocs"},{"location":"linux/2018-12-29-shell/","text":"grep # \u67e5\u627e\u591a\u4e2a\u5b57\u6bb5 grep -P \"field1|field2|field3\" <file> \u547d\u4ee4\u7ed3\u679c\u4f5c\u4e3a\u5176\u4ed6\u547d\u4ee4\u7684\u6587\u4ef6\u8f93\u5165 set -u set -e data_file=$1 # count from one line_num=$2 echo \"==================\" echo \"line_num=$line_num\" echo \"==================\" row_data=`sed -n \"${line_num}p;d\" $data_file` col_data=`awk -F\"\\t\" '{for(i=1;i<=NF;i++) print $i}' <(echo \"$row_data\")` schema=`grep -v \"#\" conf/schema.yaml | grep -v \"^$\"` paste <(echo \"$schema\") <(echo \"$col_data\") sed -n \"${start_line_num},${end_line_num}p\" \u63d0\u53d6\u4e00\u4e2a\u6587\u4ef6\u4e2d\u7b2cline_num\u884c\uff0c \u884c\u53f7\u4ece1\u5f00\u59cb\u8ba1\u6570 echo \"$schema\" \u548c echo $schema \u7684\u533a\u522b\uff0c\u53d8\u91cf\u5e26\u5f15\u53f7\u65f6\uff0c\u53d8\u91cf\u4e2d\u7684newline\u7b26\u53f7\u4e0d\u4f1a\u4e22\u5931 sed \u4ece\u6587\u4ef6\u7684\u7b2cn\u884c\u5f00\u59cb\u8f93\u51fa sed -n '2,$p' file \u6587\u4ef6\u8fc7\u6ee4 \u5ffd\u7565\u67d0\u4e2a\u6a21\u5f0f\u7684\u540e\u51e0\u884c \u5ffd\u7565thread.txt\u6587\u4ef6\u4e2d\uff0c\u5305\u542bpthread_cond_wait\u5b57\u7b26\u4e32\u7684\u884c\u548c\u5176\u968f\u540e\u7684\u884c\uff0c\u5171\u8ba18\u884c awk -v nlines=8 '/. pthread_cond_wait. / {for (i=0; i<nlines; i++) {getline}; next} 1' thread.txt find # \u5ffd\u7565./test\u76ee\u5f55 find . -name \"*.cpp\" -not -path \"./test*\" # \u67e5\u627e\u5927\u6587\u4ef6 find . -type f -size +800M find . -type f -size +300M -exec ls -l {} \\; exec \u548c xargs # -exec \u5c06\u6240\u6709\u5339\u914d\u7ed3\u679c\u540c\u65f6\u4f20\u9012\u7ed9\u547d\u4ee4 find . -type f -size +300M -exec ls -l {} \\; # xargs \u53ef\u4ee5\u63a7\u5236\u4f20\u9012\u7ed9\u547d\u4ee4\u7684\u53c2\u6570 find . -type f -size +300M | xargs ls -l \u6b63\u5219\u8868\u8fbe\u5f0f . \u5355\u4e2a\u4efb\u610f\u5b57\u7b26 ? \u5339\u914d0\u4e2a\u62161\u4e2a \u673a\u5668\u7684\u542f\u52a8\u65f6\u95f4\u70b9 who -b \u67e5\u770b\u673a\u5668\u5386\u53f2\u767b\u5f55\u7528\u6237 who /var/log/wtmp \u673a\u5668\u7684\u7528\u6237\u767b\u5f55\u5386\u53f2 \u5185\u5b58 \u5185\u5b58\u4f7f\u7528\u60c5\u51b5 free -h total used free shared buffers cached Mem: 252G 248G 3.7G 1.1G 169M 187G -/+ buffers/cache: 60G 191G Swap: 8.0G 4.1G 3.9G \u7b2c\u4e8c\u884c\u7684\uff08-/+ buffers/cache:\uff09\u8868\u793a\u5728\u7b2c\u4e00\u884cused\u548cfree\u5217\u57fa\u7840\u4e0a\u51cf\u53bb\u548c\u52a0\u4e0abuffers/cache\u7684\u4f7f\u7528 cached\u662fcpu\u4e0e\u5185\u5b58\u95f4\u7684\uff0c \u8bfb\u7f13\u51b2 buffers\u662f\u5185\u5b58\u4e0e\u78c1\u76d8\u95f4\u7684\uff0c\u90fd\u662f\u4e3a\u4e86\u89e3\u51b3\u901f\u5ea6\u4e0d\u5bf9\u7b49\u7684\u95ee\u9898 sync \u5c06buffers\u5199\u5165\u78c1\u76d8 \u7cfb\u7edf\u72b6\u6001 https://github.com/sysstat/sysstat \u8fdb\u7a0b\u7684\u4e0a\u4e0b\u6587\u5207\u6362 pidstat -w -p <pid> 02:51:58 PM UID PID cswch/s nvcswch/s Command 02:51:58 PM 1018 75278 0.75 0.00 rankserver # \u6bcf\u79d2\u5237\u65b0\u8f93\u51fa\u4e0a\u4e0b\u6587\u5207\u6362\u60c5\u51b5 pidstat -w 1 -p 41242 02:57:36 PM UID PID cswch/s nvcswch/s Command 02:57:37 PM 1020 41242 534.00 0.00 rankserver 02:57:38 PM 1020 41242 512.00 0.00 rankserver 02:57:39 PM 1020 41242 554.00 0.00 rankserver # \u7ebf\u7a0b\u7684\u6bcf\u79d2\u4e0a\u4e0b\u6587\u5207\u6362\u60c5\u51b5 pidstat -wt 1 -p <pid> cswch/s\u662f\u4e3b\u52a8\u5730\u4e0a\u4e0b\u6587\u5207\u6362\uff0cnvcswch/s\u662f\u88ab\u52a8\u6267\u884c\u4e0a\u4e0b\u6587\u5207\u6362\u7684\u6b21\u6570\u3002 \u8fdb\u7a0b \u67e5\u770b\u8fdb\u7a0b\u7684\u7ebf\u7a0b ps -T -p [pid] PID SPID TTY TIME CMD 185260 185260 ? 00:00:04 rankserver_qa top -H -p [pid] \u8fdb\u7a0b\u7684\u7f51\u7edc\u8fde\u63a5\u548c\u7aef\u53e3 \u8fdb\u7a0b\u6253\u5f00\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26 lsof -p [pid] \u7f51\u7edc netstat -nap | grep [pid] # \u67e5\u770b\u673a\u5668\u6b63\u5728listen\u7684\u7aef\u53e3 netstat -tlp -p \u663e\u793a\u8fdb\u7a0b\u540d\u79f0\u4fe1\u606f -a \u663e\u793a\u6240\u6709\u8fde\u63a5(LISTEN\uff0cCONNECTED\uff0c ESTABLISHED) -l \u53ea\u663e\u793alisten\u72b6\u6001\u7684\u8fde\u63a5 -n \u4e0d\u663e\u793a\u57df\u540d\u800c\u662f\u663e\u793aip \u78c1\u76d8 \u67e5\u770b\u786c\u76d8\u79cd\u7c7b lsblk -d -o name,rota rota=1 \u8868\u793a\u786c\u76d8\u53ef\u65cb\u8f6c\uff0c\u6240\u4ee5\u4e3a\u673a\u68b0\u786c\u76d8 tps\uff1a\u6bcf\u79d2I/O\u6b21\u6570=[(\u0394rd_ios+\u0394wr_ios)/\u0394t] r/s\uff1a\u6bcf\u79d2\u8bfb\u64cd\u4f5c\u7684\u6b21\u6570=[\u0394rd_ios/\u0394t] w/s\uff1a\u6bcf\u79d2\u5199\u64cd\u4f5c\u7684\u6b21\u6570=[\u0394wr_ios/\u0394t] await\uff1a\u6bcf\u4e2aI/O\u5e73\u5747\u6240\u9700\u7684\u65f6\u95f4=[\u0394rd_ticks+\u0394wr_ticks]/[\u0394rd_ios+\u0394wr_ios] \uff08\u4e0d\u4ec5\u5305\u62ec\u786c\u76d8\u8bbe\u5907\u5904\u7406I/O\u7684\u65f6\u95f4\uff0c\u8fd8\u5305\u62ec\u4e86\u5728kernel\u961f\u5217\u4e2d\u7b49\u5f85\u7684\u65f6\u95f4\u3002\uff09 util\uff1a \u786c\u76d8\u8bbe\u5907\u7684\u7e41\u5fd9\u6bd4\u7387\uff08\u8be5\u8bbe\u5907\u6709I/O\uff08\u5373\u975e\u7a7a\u95f2\uff09\u7684\u65f6\u95f4\u6bd4\u7387\uff09[\u0394io_ticks/\u0394t] iostat -dxk 2 2 /proc/ /io \u8fdb\u7a0b\u7684io\u7d2f\u8ba1\u4fe1\u606f \u5305\u7ba1\u7406 \u67e5\u627e\u5305 apt-cache search [package] \u67e5\u770b\u5305\u7684\u72b6\u6001\uff0c\u662f\u5426\u5b89\u88c5\uff0c\u7248\u672c\u4fe1\u606f\u7b49 dpkg -s python-dev \u7528\u6237\u548c\u7ec4 \u67e5\u770b\u5f53\u524d\u7528\u6237 whoami \u7528\u6237\u5c5e\u4e8e\u54ea\u51e0\u4e2a\u7528\u6237\u7ec4 groups","title":"shell"},{"location":"linux/2018-12-29-shell/#grep","text":"# \u67e5\u627e\u591a\u4e2a\u5b57\u6bb5 grep -P \"field1|field2|field3\" <file>","title":"grep"},{"location":"linux/2018-12-29-shell/#_1","text":"set -u set -e data_file=$1 # count from one line_num=$2 echo \"==================\" echo \"line_num=$line_num\" echo \"==================\" row_data=`sed -n \"${line_num}p;d\" $data_file` col_data=`awk -F\"\\t\" '{for(i=1;i<=NF;i++) print $i}' <(echo \"$row_data\")` schema=`grep -v \"#\" conf/schema.yaml | grep -v \"^$\"` paste <(echo \"$schema\") <(echo \"$col_data\") sed -n \"${start_line_num},${end_line_num}p\" \u63d0\u53d6\u4e00\u4e2a\u6587\u4ef6\u4e2d\u7b2cline_num\u884c\uff0c \u884c\u53f7\u4ece1\u5f00\u59cb\u8ba1\u6570 echo \"$schema\" \u548c echo $schema \u7684\u533a\u522b\uff0c\u53d8\u91cf\u5e26\u5f15\u53f7\u65f6\uff0c\u53d8\u91cf\u4e2d\u7684newline\u7b26\u53f7\u4e0d\u4f1a\u4e22\u5931","title":"\u547d\u4ee4\u7ed3\u679c\u4f5c\u4e3a\u5176\u4ed6\u547d\u4ee4\u7684\u6587\u4ef6\u8f93\u5165"},{"location":"linux/2018-12-29-shell/#sed","text":"\u4ece\u6587\u4ef6\u7684\u7b2cn\u884c\u5f00\u59cb\u8f93\u51fa sed -n '2,$p' file","title":"sed"},{"location":"linux/2018-12-29-shell/#_2","text":"","title":"\u6587\u4ef6\u8fc7\u6ee4"},{"location":"linux/2018-12-29-shell/#_3","text":"\u5ffd\u7565thread.txt\u6587\u4ef6\u4e2d\uff0c\u5305\u542bpthread_cond_wait\u5b57\u7b26\u4e32\u7684\u884c\u548c\u5176\u968f\u540e\u7684\u884c\uff0c\u5171\u8ba18\u884c awk -v nlines=8 '/. pthread_cond_wait. / {for (i=0; i<nlines; i++) {getline}; next} 1' thread.txt","title":"\u5ffd\u7565\u67d0\u4e2a\u6a21\u5f0f\u7684\u540e\u51e0\u884c"},{"location":"linux/2018-12-29-shell/#find","text":"# \u5ffd\u7565./test\u76ee\u5f55 find . -name \"*.cpp\" -not -path \"./test*\" # \u67e5\u627e\u5927\u6587\u4ef6 find . -type f -size +800M find . -type f -size +300M -exec ls -l {} \\; exec \u548c xargs # -exec \u5c06\u6240\u6709\u5339\u914d\u7ed3\u679c\u540c\u65f6\u4f20\u9012\u7ed9\u547d\u4ee4 find . -type f -size +300M -exec ls -l {} \\; # xargs \u53ef\u4ee5\u63a7\u5236\u4f20\u9012\u7ed9\u547d\u4ee4\u7684\u53c2\u6570 find . -type f -size +300M | xargs ls -l","title":"find"},{"location":"linux/2018-12-29-shell/#_4","text":". \u5355\u4e2a\u4efb\u610f\u5b57\u7b26 ? \u5339\u914d0\u4e2a\u62161\u4e2a","title":"\u6b63\u5219\u8868\u8fbe\u5f0f"},{"location":"linux/2018-12-29-shell/#_5","text":"who -b","title":"\u673a\u5668\u7684\u542f\u52a8\u65f6\u95f4\u70b9"},{"location":"linux/2018-12-29-shell/#_6","text":"who /var/log/wtmp \u673a\u5668\u7684\u7528\u6237\u767b\u5f55\u5386\u53f2","title":"\u67e5\u770b\u673a\u5668\u5386\u53f2\u767b\u5f55\u7528\u6237"},{"location":"linux/2018-12-29-shell/#_7","text":"","title":"\u5185\u5b58"},{"location":"linux/2018-12-29-shell/#_8","text":"free -h total used free shared buffers cached Mem: 252G 248G 3.7G 1.1G 169M 187G -/+ buffers/cache: 60G 191G Swap: 8.0G 4.1G 3.9G \u7b2c\u4e8c\u884c\u7684\uff08-/+ buffers/cache:\uff09\u8868\u793a\u5728\u7b2c\u4e00\u884cused\u548cfree\u5217\u57fa\u7840\u4e0a\u51cf\u53bb\u548c\u52a0\u4e0abuffers/cache\u7684\u4f7f\u7528 cached\u662fcpu\u4e0e\u5185\u5b58\u95f4\u7684\uff0c \u8bfb\u7f13\u51b2 buffers\u662f\u5185\u5b58\u4e0e\u78c1\u76d8\u95f4\u7684\uff0c\u90fd\u662f\u4e3a\u4e86\u89e3\u51b3\u901f\u5ea6\u4e0d\u5bf9\u7b49\u7684\u95ee\u9898 sync \u5c06buffers\u5199\u5165\u78c1\u76d8","title":"\u5185\u5b58\u4f7f\u7528\u60c5\u51b5"},{"location":"linux/2018-12-29-shell/#_9","text":"https://github.com/sysstat/sysstat","title":"\u7cfb\u7edf\u72b6\u6001"},{"location":"linux/2018-12-29-shell/#_10","text":"pidstat -w -p <pid> 02:51:58 PM UID PID cswch/s nvcswch/s Command 02:51:58 PM 1018 75278 0.75 0.00 rankserver # \u6bcf\u79d2\u5237\u65b0\u8f93\u51fa\u4e0a\u4e0b\u6587\u5207\u6362\u60c5\u51b5 pidstat -w 1 -p 41242 02:57:36 PM UID PID cswch/s nvcswch/s Command 02:57:37 PM 1020 41242 534.00 0.00 rankserver 02:57:38 PM 1020 41242 512.00 0.00 rankserver 02:57:39 PM 1020 41242 554.00 0.00 rankserver # \u7ebf\u7a0b\u7684\u6bcf\u79d2\u4e0a\u4e0b\u6587\u5207\u6362\u60c5\u51b5 pidstat -wt 1 -p <pid> cswch/s\u662f\u4e3b\u52a8\u5730\u4e0a\u4e0b\u6587\u5207\u6362\uff0cnvcswch/s\u662f\u88ab\u52a8\u6267\u884c\u4e0a\u4e0b\u6587\u5207\u6362\u7684\u6b21\u6570\u3002","title":"\u8fdb\u7a0b\u7684\u4e0a\u4e0b\u6587\u5207\u6362"},{"location":"linux/2018-12-29-shell/#_11","text":"","title":"\u8fdb\u7a0b"},{"location":"linux/2018-12-29-shell/#_12","text":"ps -T -p [pid] PID SPID TTY TIME CMD 185260 185260 ? 00:00:04 rankserver_qa top -H -p [pid]","title":"\u67e5\u770b\u8fdb\u7a0b\u7684\u7ebf\u7a0b"},{"location":"linux/2018-12-29-shell/#_13","text":"\u8fdb\u7a0b\u6253\u5f00\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26 lsof -p [pid]","title":"\u8fdb\u7a0b\u7684\u7f51\u7edc\u8fde\u63a5\u548c\u7aef\u53e3"},{"location":"linux/2018-12-29-shell/#_14","text":"netstat -nap | grep [pid] # \u67e5\u770b\u673a\u5668\u6b63\u5728listen\u7684\u7aef\u53e3 netstat -tlp -p \u663e\u793a\u8fdb\u7a0b\u540d\u79f0\u4fe1\u606f -a \u663e\u793a\u6240\u6709\u8fde\u63a5(LISTEN\uff0cCONNECTED\uff0c ESTABLISHED) -l \u53ea\u663e\u793alisten\u72b6\u6001\u7684\u8fde\u63a5 -n \u4e0d\u663e\u793a\u57df\u540d\u800c\u662f\u663e\u793aip","title":"\u7f51\u7edc"},{"location":"linux/2018-12-29-shell/#_15","text":"\u67e5\u770b\u786c\u76d8\u79cd\u7c7b lsblk -d -o name,rota rota=1 \u8868\u793a\u786c\u76d8\u53ef\u65cb\u8f6c\uff0c\u6240\u4ee5\u4e3a\u673a\u68b0\u786c\u76d8 tps\uff1a\u6bcf\u79d2I/O\u6b21\u6570=[(\u0394rd_ios+\u0394wr_ios)/\u0394t] r/s\uff1a\u6bcf\u79d2\u8bfb\u64cd\u4f5c\u7684\u6b21\u6570=[\u0394rd_ios/\u0394t] w/s\uff1a\u6bcf\u79d2\u5199\u64cd\u4f5c\u7684\u6b21\u6570=[\u0394wr_ios/\u0394t] await\uff1a\u6bcf\u4e2aI/O\u5e73\u5747\u6240\u9700\u7684\u65f6\u95f4=[\u0394rd_ticks+\u0394wr_ticks]/[\u0394rd_ios+\u0394wr_ios] \uff08\u4e0d\u4ec5\u5305\u62ec\u786c\u76d8\u8bbe\u5907\u5904\u7406I/O\u7684\u65f6\u95f4\uff0c\u8fd8\u5305\u62ec\u4e86\u5728kernel\u961f\u5217\u4e2d\u7b49\u5f85\u7684\u65f6\u95f4\u3002\uff09 util\uff1a \u786c\u76d8\u8bbe\u5907\u7684\u7e41\u5fd9\u6bd4\u7387\uff08\u8be5\u8bbe\u5907\u6709I/O\uff08\u5373\u975e\u7a7a\u95f2\uff09\u7684\u65f6\u95f4\u6bd4\u7387\uff09[\u0394io_ticks/\u0394t] iostat -dxk 2 2 /proc/ /io \u8fdb\u7a0b\u7684io\u7d2f\u8ba1\u4fe1\u606f","title":"\u78c1\u76d8"},{"location":"linux/2018-12-29-shell/#_16","text":"\u67e5\u627e\u5305 apt-cache search [package] \u67e5\u770b\u5305\u7684\u72b6\u6001\uff0c\u662f\u5426\u5b89\u88c5\uff0c\u7248\u672c\u4fe1\u606f\u7b49 dpkg -s python-dev","title":"\u5305\u7ba1\u7406"},{"location":"linux/2018-12-29-shell/#_17","text":"","title":"\u7528\u6237\u548c\u7ec4"},{"location":"linux/2018-12-29-shell/#_18","text":"whoami","title":"\u67e5\u770b\u5f53\u524d\u7528\u6237"},{"location":"linux/2018-12-29-shell/#_19","text":"groups","title":"\u7528\u6237\u5c5e\u4e8e\u54ea\u51e0\u4e2a\u7528\u6237\u7ec4"},{"location":"linux/2019-05-05-route/","text":"layout: post title: \"title\" subtitle: \"route\" date: 2019-05-05 10:49:32 author: \"none\" header-img: \"img/posts/default_post.jpg\" catalog: true tags: - tag \u67e5\u770b\u7f51\u7edc\u4fe1\u606f windows ipconfig /all tracert dns \u67e5\u8be2\uff0c \u4f7f\u7528\u7684\u54ea\u4e2adns\u670d\u52a1\u5668\uff0c\u67e5\u5230\u7684\u5730\u5740\u662f\u591a\u5c11 nslookup openvpn route-nopull \u5f53\u5ba2\u6237\u7aef\u52a0\u5165\u8fd9\u4e2a\u53c2\u6570\u540e,openvpn \u8fde\u63a5\u540e\u4e0d\u4f1a\u6dfb\u52a0\u8def\u7531,\u4e5f\u5c31\u662f\u4e0d\u4f1a\u6709\u4efb\u4f55\u7f51\u7edc\u8bf7\u6c42\u8d70openvpn. vpn_gateway \u548c net_gateway \u672a\u8bbe\u7f6eroute-nopull\u65f6\u7684\u8f93\u51fa\u65e5\u5fd7\uff0c \u5f53openvpn\u5efa\u7acb\u8fde\u63a5\u65f6\uff0c\u670d\u52a1\u7aef\u53ef\u4ee5\u5411\u5ba2\u6237\u7aefpush\u9759\u6001\u8def\u7531\u6761\u76ee \u6307\u5b9adns\u670d\u52a1\u5668\u8fdb\u884c\u67e5\u8be2 nslookup www.google.com 10.238.0.100 \u5411dns\u670d\u52a1\u566810.238.0.100\u67e5\u8be2google\u7684ip \u5ffd\u7565\u670d\u52a1\u5668\u63a8\u9001\u7684\u67d0\u4e9b\u8bbe\u7f6e pull-filter ignore \"dhcp-option\" \u7f51\u5173(Gateway) \u63a5\u53e3(Interface): \u672c\u5730\u8ba1\u7b97\u673a\u7528\u4e8e\u53d1\u9001\u6570\u636e\u5305\u7684\u7f51\u7edc\u63a5\u53e3 route route add 10.238.0.0 mask 255.255.0.0 10.236.128.1 route add 172.217.0.0 mask 255.255.0.0 10.236.128.1 route delete 172.217.0.0","title":"2019 05 05 route"},{"location":"linux/2019-05-05-route/#_1","text":"windows ipconfig /all tracert dns \u67e5\u8be2\uff0c \u4f7f\u7528\u7684\u54ea\u4e2adns\u670d\u52a1\u5668\uff0c\u67e5\u5230\u7684\u5730\u5740\u662f\u591a\u5c11 nslookup","title":"\u67e5\u770b\u7f51\u7edc\u4fe1\u606f"},{"location":"linux/2019-05-05-route/#openvpn","text":"route-nopull \u5f53\u5ba2\u6237\u7aef\u52a0\u5165\u8fd9\u4e2a\u53c2\u6570\u540e,openvpn \u8fde\u63a5\u540e\u4e0d\u4f1a\u6dfb\u52a0\u8def\u7531,\u4e5f\u5c31\u662f\u4e0d\u4f1a\u6709\u4efb\u4f55\u7f51\u7edc\u8bf7\u6c42\u8d70openvpn. vpn_gateway \u548c net_gateway \u672a\u8bbe\u7f6eroute-nopull\u65f6\u7684\u8f93\u51fa\u65e5\u5fd7\uff0c \u5f53openvpn\u5efa\u7acb\u8fde\u63a5\u65f6\uff0c\u670d\u52a1\u7aef\u53ef\u4ee5\u5411\u5ba2\u6237\u7aefpush\u9759\u6001\u8def\u7531\u6761\u76ee","title":"openvpn"},{"location":"linux/2019-05-05-route/#dns","text":"nslookup www.google.com 10.238.0.100 \u5411dns\u670d\u52a1\u566810.238.0.100\u67e5\u8be2google\u7684ip \u5ffd\u7565\u670d\u52a1\u5668\u63a8\u9001\u7684\u67d0\u4e9b\u8bbe\u7f6e pull-filter ignore \"dhcp-option\" \u7f51\u5173(Gateway) \u63a5\u53e3(Interface): \u672c\u5730\u8ba1\u7b97\u673a\u7528\u4e8e\u53d1\u9001\u6570\u636e\u5305\u7684\u7f51\u7edc\u63a5\u53e3","title":"\u6307\u5b9adns\u670d\u52a1\u5668\u8fdb\u884c\u67e5\u8be2"},{"location":"linux/2019-05-05-route/#route","text":"route add 10.238.0.0 mask 255.255.0.0 10.236.128.1 route add 172.217.0.0 mask 255.255.0.0 10.236.128.1 route delete 172.217.0.0","title":"route"},{"location":"linux/2019-05-17-vim/","text":"layout: post title: \"vim\" subtitle: \"vim\" date: 2019-05-17 16:37:23 author: \"none\" header-img: \"img/posts/default_post.jpg\" catalog: true tags: - tag vim \u4f7f\u7528 \u884c\u5c3e\u8ffd\u52a0\uff1a s/$/,/gg \u6362\u884c\u7b26 ctrl-v + ctrl-m vim \u914d\u7f6e syntax on #\u8bed\u6cd5\u9ad8\u4eae","title":"2019 05 17 vim"},{"location":"linux/2019-05-17-vim/#vim","text":"\u884c\u5c3e\u8ffd\u52a0\uff1a s/$/,/gg \u6362\u884c\u7b26 ctrl-v + ctrl-m","title":"vim \u4f7f\u7528"},{"location":"linux/2019-05-17-vim/#vim_1","text":"syntax on #\u8bed\u6cd5\u9ad8\u4eae","title":"vim \u914d\u7f6e"},{"location":"linux/2019-05-18-network/","text":"layout: post title: \"network\" subtitle: \"network\" date: 2019-05-18 10:24:12 author: \"none\" header-img: \"img/posts/default_post.jpg\" catalog: true tags: - tag \u7aef\u53e3\u53f7 \u6700\u5927\u4e3a65535\uff0c \u7aef\u53e3\u53f7\u53ea\u662f\u4e2a\u6570\u5b57\uff0c\u53ef\u4ee5\u88ab\u4e0d\u540c\u7684socket\u8fde\u63a5\u590d\u7528 \u4e00\u4e2a\u8fdb\u7a0b\u7684\u6700\u5927\u8fde\u63a5\u6570 1 \u8fdb\u7a0b\u53ef\u4ee5\u6253\u5f00\u7684\u6587\u4ef6\u6570\u91cf\u9650\u5236(ulimit -n) 2 \u7f51\u7edc\u8fde\u63a5 \u7f51\u7edc\u534f\u8bae\uff0c\u6e90ip\uff0c\u6e90\u7aef\u53e3\uff08port\uff09\uff0c \u76ee\u7684\u5730\u5740\uff0c\u76ee\u7684\u7aef\u53e3 socket\u7f16\u7a0b \u670d\u52a1\u7aef \u521b\u5efa\u5957\u63a5\u5b57 int socket(int domain, int type, int protocol); \u7ed1\u5b9a\u670d\u52a1\u5668ip\u548c\u7aef\u53e3\u53f7 int bind(int socket, const struct sockaddr *address, socklen_t address_len); \u76d1\u542c\u5ba2\u6237\u7aef\u8fde\u63a5\uff0c backlog\u8bbe\u7f6e\u8fde\u63a5\u961f\u5217\u7684\u5927\u5c0f int listen(int socket, int backlog); \u63a5\u53d7\u5ba2\u6237\u7aef\u8fde\u63a5\uff0c\u8fd4\u56de\u4e0e\u5ba2\u6237\u7aef\u4f20\u8f93\u7684\u63a5\u53e3\uff0c\u901a\u8fc7\u53c2\u6570\u8fd4\u56de\u5ba2\u6237\u7aef\u7684ip\u548c\u7aef\u53e3 int accept(int socket, struct sockaddr restrict address, socklen_t restrict address_len); accept\u901a\u5e38\u653e\u5728\u5faa\u73af\u4e2d\u8fdb\u884c\u8c03\u7528\uff0c accept\u4e0d\u662f\u7ebf\u7a0b\u5b89\u5168\u7684\uff0c\u5f53\u6ca1\u6709\u5ba2\u6237\u7aef\u8fde\u63a5\u65f6\uff0caccept\u4f1a\u88ab\u963b\u585e \u5ba2\u6237\u7aef \u521b\u5efa\u5957\u63a5\u5b57 int socket(int domain, int type, int protocol); \u8fde\u63a5\u5230\u670d\u52a1\u5668\uff0c\u8fd4\u56de int connect(int socket, const struct sockaddr *address, socklen_t address_len);","title":"2019 05 18 network"},{"location":"linux/2019-05-18-network/#_1","text":"\u6700\u5927\u4e3a65535\uff0c \u7aef\u53e3\u53f7\u53ea\u662f\u4e2a\u6570\u5b57\uff0c\u53ef\u4ee5\u88ab\u4e0d\u540c\u7684socket\u8fde\u63a5\u590d\u7528","title":"\u7aef\u53e3\u53f7"},{"location":"linux/2019-05-18-network/#_2","text":"1 \u8fdb\u7a0b\u53ef\u4ee5\u6253\u5f00\u7684\u6587\u4ef6\u6570\u91cf\u9650\u5236(ulimit -n) 2","title":"\u4e00\u4e2a\u8fdb\u7a0b\u7684\u6700\u5927\u8fde\u63a5\u6570"},{"location":"linux/2019-05-18-network/#_3","text":"\u7f51\u7edc\u534f\u8bae\uff0c\u6e90ip\uff0c\u6e90\u7aef\u53e3\uff08port\uff09\uff0c \u76ee\u7684\u5730\u5740\uff0c\u76ee\u7684\u7aef\u53e3","title":"\u7f51\u7edc\u8fde\u63a5"},{"location":"linux/2019-05-18-network/#socket","text":"","title":"socket\u7f16\u7a0b"},{"location":"linux/2019-05-18-network/#_4","text":"\u521b\u5efa\u5957\u63a5\u5b57 int socket(int domain, int type, int protocol); \u7ed1\u5b9a\u670d\u52a1\u5668ip\u548c\u7aef\u53e3\u53f7 int bind(int socket, const struct sockaddr *address, socklen_t address_len); \u76d1\u542c\u5ba2\u6237\u7aef\u8fde\u63a5\uff0c backlog\u8bbe\u7f6e\u8fde\u63a5\u961f\u5217\u7684\u5927\u5c0f int listen(int socket, int backlog); \u63a5\u53d7\u5ba2\u6237\u7aef\u8fde\u63a5\uff0c\u8fd4\u56de\u4e0e\u5ba2\u6237\u7aef\u4f20\u8f93\u7684\u63a5\u53e3\uff0c\u901a\u8fc7\u53c2\u6570\u8fd4\u56de\u5ba2\u6237\u7aef\u7684ip\u548c\u7aef\u53e3 int accept(int socket, struct sockaddr restrict address, socklen_t restrict address_len); accept\u901a\u5e38\u653e\u5728\u5faa\u73af\u4e2d\u8fdb\u884c\u8c03\u7528\uff0c accept\u4e0d\u662f\u7ebf\u7a0b\u5b89\u5168\u7684\uff0c\u5f53\u6ca1\u6709\u5ba2\u6237\u7aef\u8fde\u63a5\u65f6\uff0caccept\u4f1a\u88ab\u963b\u585e","title":"\u670d\u52a1\u7aef"},{"location":"linux/2019-05-18-network/#_5","text":"\u521b\u5efa\u5957\u63a5\u5b57 int socket(int domain, int type, int protocol); \u8fde\u63a5\u5230\u670d\u52a1\u5668\uff0c\u8fd4\u56de int connect(int socket, const struct sockaddr *address, socklen_t address_len);","title":"\u5ba2\u6237\u7aef"},{"location":"linux/2019-05-30-git/","text":"layout: post title: \"git\" subtitle: \"git\" date: 2019-05-30 11:27:25 author: \"none\" header-img: \"img/posts/default_post.jpg\" catalog: true tags: - tag \u8fdc\u7a0b\u5206\u652f \u9012\u5f52clone\u5b50\u4ed3\u5e93\u6e90\u7801 git clone --recurse-submodules \u62c9\u53d6\u8fdc\u7a0b\u5206\u652f\u5e76\u521b\u5efa\u672c\u5730\u5206\u652f git checkout -b <\u672c\u5730\u5206\u652f\u540d> origin/<\u8fdc\u7a0b\u5206\u652f\u540d> \u5c06\u6587\u4ef6\u79fb\u9664add git reset git reset HEAD \u5411\u8fdc\u7a0b\u5206\u652f\u63d0\u4ea4\u4ee3\u7801 git push origin : \u672c\u5730\u5206\u652f\u4e0e\u8fdc\u7a0b\u5206\u652f\u4e0d\u540c\u540d\uff0c \u8bbe\u7f6e\u4e0a\u6e38\u8fdc\u7a0b\u5206\u652f git branch --set-upstream-to=origin/<remote_branch> <local_branch> git clone \u67d0\u4e2a\u76ee\u5f55 git init <repo> cd <repo> git remote add origin <url> git config core.sparsecheckout true echo \"<\u76ee\u5f55/\u76ee\u5f55>\" >> .git/info/sparse-checkout git pull --depth=1 origin master \u8fdc\u7a0b\u4ed3\u5e93 # \u67e5\u8be2\u8fdc\u7a0b\u4ed3\u5e93url git remote -v # \u4fee\u6539\u8fdc\u7a0b\u4ed3\u5e93 git remote set-url origin <url ssh or http> \u5bf9\u6bd4\u5206\u652f git diff branch1 branch2 --stat //\u663e\u793a\u51fa\u6240\u6709\u6709\u5dee\u5f02\u7684\u6587\u4ef6\u5217\u8868 git diff branch1 branch2 \u6587\u4ef6\u540d(\u5e26\u8def\u5f84) //\u663e\u793a\u6307\u5b9a\u6587\u4ef6\u7684\u8be6\u7ec6\u5dee\u5f02 git diff branch1 branch2 //\u663e\u793a\u51fa\u6240\u6709\u6709\u5dee\u5f02\u7684\u6587\u4ef6\u7684\u8be6\u7ec6\u5dee\u5f02 \u5408\u5e76\u5206\u652f \u4f8b\u5982\u5c06branch_b \u5408\u5e76\u5230branch_a\u4e0a\uff1a \u65b9\u6cd5\u4e00\uff1a git merge\u65b9\u5f0f git checkout branch_a git merge branch_b # \u5408\u5e76\u8fdc\u7a0b\u5206\u652f\u5230\u5f53\u524d\u5206\u652f git pull origin <remote-branch> # \u5408\u5e76\u8fdc\u7a0b\u5206\u652f\u5230\u672c\u5730\u6307\u5b9a\u5206\u652f git pull origin <remote-branch>:<local-branch> \u65b9\u6cd5\u4e8c\uff1a git checkout\u65b9\u5f0f\uff0c \u53ef\u4ee5\u6307\u5b9a\u8986\u76d6\u67d0\u4e9b\u6587\u4ef6 \u6216\u8005\u4f7f\u7528checkout\u65b9\u5f0f\u5408\u5e76 git checkout branch_a git checkout branch_b <path> \u63d0\u4ea4\u4ee3\u7801 # \u67e5\u770b\u66f4\u6539\u72b6\u6001 git status # \u63d0\u4ea4\u6240\u6709\u4fee\u6539 git add -A # Changes to be committed: # Untracked files: # \u4ec5\u63d0\u4ea4Changes to be committed:\u72b6\u6001\u7684\u6587\u4ef6 git add -u \u6e05\u7406 # \u6e05\u7406 untracked files, -n\u8868\u793a\u6a21\u62df\u8fd0\u884c git clean -fn","title":"2019 05 30 git"},{"location":"linux/2019-05-30-git/#_1","text":"","title":"\u8fdc\u7a0b\u5206\u652f"},{"location":"linux/2019-05-30-git/#clone","text":"git clone --recurse-submodules \u62c9\u53d6\u8fdc\u7a0b\u5206\u652f\u5e76\u521b\u5efa\u672c\u5730\u5206\u652f git checkout -b <\u672c\u5730\u5206\u652f\u540d> origin/<\u8fdc\u7a0b\u5206\u652f\u540d> \u5c06\u6587\u4ef6\u79fb\u9664add git reset git reset HEAD \u5411\u8fdc\u7a0b\u5206\u652f\u63d0\u4ea4\u4ee3\u7801 git push origin : \u672c\u5730\u5206\u652f\u4e0e\u8fdc\u7a0b\u5206\u652f\u4e0d\u540c\u540d\uff0c \u8bbe\u7f6e\u4e0a\u6e38\u8fdc\u7a0b\u5206\u652f git branch --set-upstream-to=origin/<remote_branch> <local_branch>","title":"\u9012\u5f52clone\u5b50\u4ed3\u5e93\u6e90\u7801"},{"location":"linux/2019-05-30-git/#git-clone","text":"git init <repo> cd <repo> git remote add origin <url> git config core.sparsecheckout true echo \"<\u76ee\u5f55/\u76ee\u5f55>\" >> .git/info/sparse-checkout git pull --depth=1 origin master","title":"git clone \u67d0\u4e2a\u76ee\u5f55"},{"location":"linux/2019-05-30-git/#_2","text":"# \u67e5\u8be2\u8fdc\u7a0b\u4ed3\u5e93url git remote -v # \u4fee\u6539\u8fdc\u7a0b\u4ed3\u5e93 git remote set-url origin <url ssh or http>","title":"\u8fdc\u7a0b\u4ed3\u5e93"},{"location":"linux/2019-05-30-git/#_3","text":"git diff branch1 branch2 --stat //\u663e\u793a\u51fa\u6240\u6709\u6709\u5dee\u5f02\u7684\u6587\u4ef6\u5217\u8868 git diff branch1 branch2 \u6587\u4ef6\u540d(\u5e26\u8def\u5f84) //\u663e\u793a\u6307\u5b9a\u6587\u4ef6\u7684\u8be6\u7ec6\u5dee\u5f02 git diff branch1 branch2 //\u663e\u793a\u51fa\u6240\u6709\u6709\u5dee\u5f02\u7684\u6587\u4ef6\u7684\u8be6\u7ec6\u5dee\u5f02","title":"\u5bf9\u6bd4\u5206\u652f"},{"location":"linux/2019-05-30-git/#_4","text":"\u4f8b\u5982\u5c06branch_b \u5408\u5e76\u5230branch_a\u4e0a\uff1a \u65b9\u6cd5\u4e00\uff1a git merge\u65b9\u5f0f git checkout branch_a git merge branch_b # \u5408\u5e76\u8fdc\u7a0b\u5206\u652f\u5230\u5f53\u524d\u5206\u652f git pull origin <remote-branch> # \u5408\u5e76\u8fdc\u7a0b\u5206\u652f\u5230\u672c\u5730\u6307\u5b9a\u5206\u652f git pull origin <remote-branch>:<local-branch> \u65b9\u6cd5\u4e8c\uff1a git checkout\u65b9\u5f0f\uff0c \u53ef\u4ee5\u6307\u5b9a\u8986\u76d6\u67d0\u4e9b\u6587\u4ef6 \u6216\u8005\u4f7f\u7528checkout\u65b9\u5f0f\u5408\u5e76 git checkout branch_a git checkout branch_b <path>","title":"\u5408\u5e76\u5206\u652f"},{"location":"linux/2019-05-30-git/#_5","text":"# \u67e5\u770b\u66f4\u6539\u72b6\u6001 git status # \u63d0\u4ea4\u6240\u6709\u4fee\u6539 git add -A # Changes to be committed: # Untracked files: # \u4ec5\u63d0\u4ea4Changes to be committed:\u72b6\u6001\u7684\u6587\u4ef6 git add -u","title":"\u63d0\u4ea4\u4ee3\u7801"},{"location":"linux/2019-05-30-git/#_6","text":"# \u6e05\u7406 untracked files, -n\u8868\u793a\u6a21\u62df\u8fd0\u884c git clean -fn","title":"\u6e05\u7406"},{"location":"notes/2018-04-24-leran_markdown/","text":"We believe that writing is about content, about what you want to say \u2013 not about fancy formatting. \u6211\u4eec\u575a\u4fe1\u5199\u4f5c\u5199\u7684\u662f\u5185\u5bb9\uff0c\u6240\u601d\u6240\u60f3\uff0c\u800c\u4e0d\u662f\u82b1\u6837\u683c\u5f0f\u3002 \u2014 Ulysses for Mac vscode markdown \u63d2\u4ef6\uff1a markdown + math \u5b9e\u65f6\u9884\u89c8\uff1a ctrl + shift + v 1.\u6807\u9898 # \u4e00\u7ea7\u6807\u9898, \u4e5f\u53ef\u4ee5\u4f7f\u7528====(\u81f3\u5c11\u4f7f\u7528\u4e24\u4e2a=) ## \u4e8c\u7ea7\u6807\u9898 \u4e5f\u53ef\u4ee5\u4f7f\u7528----(\u81f3\u5c11\u4f7f\u7528\u4e24\u4e2a-) ### \u4e09\u7ea7\u6807\u9898 #### \u56db\u7ea7\u6807\u9898 ##### \u4e94\u7ea7\u6807\u9898 2.\u6bb5\u843d\u548c\u6362\u884c \u7a7a\u884c\u4ee3\u8868\u6bb5\u843d \u82e5\u67d0\u4e00\u884c\u53ea\u5305\u542b\u7a7a\u683c\u548c\u5236\u8868\u7b26\uff0c\u5219\u8be5\u884c\u4e5f\u4f1a\u88ab\u89c6\u4e3a\u7a7a\u884c \u6bb5\u843d\u5185\u53ef\u4ee5\u4f7f\u7528\\ \u6362\u884c 3.\u5f15\u7528 >\u8868\u793a\u5f15\u7528\uff0ceg\uff1a \u8981\u6709\u6700\u6734\u7d20\u7684\u751f\u6d3b\u4e0e\u6700\u7231\u641c\u7d22\u7684\u68a6\u60f3\u3002 \u533a\u5757\u5f15\u7528\u53ef\u4ee5\u5d4c\u5957\uff08\u4f8b\u5982\uff1a\u5f15\u7528\u5185\u7684\u5f15\u7528\uff09\uff0c\u53ea\u8981\u6839\u636e\u5c42\u6b21\u52a0\u4e0a\u4e0d\u540c\u6570\u91cf\u7684 >,eg: \u300a\u8bba\u8bed\u300b\u6709\u4e91\uff1a \"\u6709\u670b\u81ea\u8fdc\u65b9\u6765\uff0c\u4e0d\u4ea6\u4e50\u4e4e\uff1f\" \u5f15\u7528\u7684\u533a\u5757\u5185\u4e5f\u53ef\u4f7f\u7528\u5176\u4ed6\u7684 Markdown \u8bed\u6cd5\uff0c\u5305\u62ec\u6807\u9898\u3001\u5217\u8868\u3001\u4ee3\u7801\u533a\u5757\u7b49\uff0c\u4f46\u662f\u6bcf\u884c\u90fd\u8981\u5728\u524d\u9762\u52a0\u4e0a\u5bf9\u5e94\u7684\u5f15\u7528\u7b26\u53f7\uff0ceg: \u5f00\u59cb\u5f15\u7528 def print_num(num): for i in range(100): print(i) \u4ee3\u7801\u5757\u5f15\u7528\u65b9\u6cd5\uff1a\u4e09\u4e2a\u53cd\u5f15\u53f7(\u53cd\u5f15\u53f7\u4f4d\u4e8e\u952e\u76d81\u7684\u5de6\u8fb9\uff0c\u5373~\u952e)\u6216\u8005\u56db\u4e2a\u7a7a\u683c\u6216\u8005Tab 4.\u5217\u8868 Markdown \u652f\u6301\u6709\u5e8f\u5217\u8868\u548c\u65e0\u5e8f\u5217\u8868\u3002 \u65e0\u5e8f\u5217\u8868\u4f7f\u7528\u661f\u53f7\u3001\u52a0\u53f7\u6216\u662f\u51cf\u53f7\u4f5c\u4e3a\u5217\u8868\u6807\u8bb0 \u6709\u5e8f\u5217\u8868\u5219\u4f7f\u7528\u6570\u5b57\u63a5\u7740\u4e00\u4e2a\u82f1\u6587\u53e5\u70b9\uff1a \u5217\u8868\u9879\u76ee\u53ef\u4ee5\u5305\u542b\u591a\u4e2a\u6bb5\u843d\uff0c\u6bcf\u4e2a\u9879\u76ee\u4e0b\u7684\u6bb5\u843d\u90fd\u5fc5\u987b\u7f29\u8fdb 4 \u4e2a\u7a7a\u683c\u6216\u662f 1 \u4e2a\u5236\u8868\u7b26 5.\u94fe\u63a5 Markdown \u652f\u6301\u4e24\u79cd\u5f62\u5f0f\u7684\u94fe\u63a5\u8bed\u6cd5\uff1a \u884c\u5185\u5f0f\u548c\u53c2\u8003\u5f0f\u4e24\u79cd\u5f62\u5f0f\u3002\u4e0d\u7ba1\u662f\u54ea\u4e00\u79cd\uff0c\u94fe\u63a5\u6587\u5b57\u90fd\u662f\u7528 [\u65b9\u62ec\u53f7] \u6765\u6807\u8bb0 \u884c\u5185\u5f0f\uff1a\u53ea\u8981\u5728\u65b9\u5757\u62ec\u53f7\u540e\u9762\u7d27\u63a5\u7740\u5706\u62ec\u53f7\u5e76\u63d2\u5165\u7f51\u5740\u94fe\u63a5\u5373\u53ef\uff0c \u5982\u679c\u4f60\u8fd8\u60f3\u8981\u52a0\u4e0a\u94fe\u63a5\u7684 title \u6587\u5b57\uff0c\u53ea\u8981\u5728\u7f51\u5740\u540e\u9762\uff0c\u7528\u53cc\u5f15\u53f7\u628a title \u6587\u5b57\u5305\u8d77\u6765\u5373\u53ef\uff0c\u4f8b\u5982\uff1a [\u591c\u96e8\u5fae\u5bd2\u7684\u535a\u5ba2](https://xugongli.github.io) [\u591c\u96e8\u5fae\u5bd2\u7684\u535a\u5ba2](https://xugongli.github.io, \"Soaringsoul's Blog\") \u6548\u679c\u5982\u4e0b\uff1a \u591c\u96e8\u5fae\u5bd2\u7684\u535a\u5ba2 \u591c\u96e8\u5fae\u5bd2\u7684\u535a\u5ba2 \u4e5f\u53ef\u4ee5\u4f7f\u7528\u76f8\u5bf9\u8def\u5f84\uff1a eg: [\u7d20\u5e74\u9526\u65f6](/life) [\u8bfb\u4e66\u7b14\u8bb0](/booknotes) \u6548\u679c\u5982\u4e0b\uff1a \u7d20\u5e74\u9526\u65f6 \u8bfb\u4e66\u7b14\u8bb0 \u53c2\u8003\u5f0f\uff1a \u94fe\u63a5\u6587\u5b57\u7684\u62ec\u53f7\u540e\u9762\u518d\u63a5\u4e0a\u53e6\u4e00\u4e2a\u65b9\u62ec\u53f7,\u800c\u5728\u7b2c\u4e8c\u4e2a\u65b9\u62ec\u53f7\u91cc\u9762\u8981\u586b\u5165\u7528\u4ee5\u8fa8\u8bc6\u94fe\u63a5\u7684\u6807\u8bb0\uff0c \u63a5\u7740\uff0c\u5728\u6587\u4ef6\u7684\u4efb\u610f\u5904\uff0c\u4f60\u53ef\u4ee5\u628a\u8fd9\u4e2a\u6807\u8bb0\u7684\u94fe\u63a5\u5185\u5bb9\u5b9a\u4e49\u51fa\u6765\uff1aeg: \u8fd9\u662f[\u591c\u96e8\u5fae\u5bd2][id]\u7684\u535a\u5ba2 [id]: https://xugongli.github.io \"\u591c\u96e8\u5fae\u5bd2\u7684\u535a\u5ba2\" \u6548\u679c\u5982\u4e0b\uff1a \u8fd9\u662f[\u591c\u96e8\u5fae\u5bd2][id]\u7684\u535a\u5ba2 [id]: https://xugongli.github.io \"\u591c\u96e8\u5fae\u5bd2\u7684\u535a\u5ba2\" 6.\u5f3a\u8c03 \u5c06 *\u6587\u5b57* \u53d8\u6210\u659c\u4f53 \u5c06 _\u6587\u5b57_ \u53d8\u6210\u659c\u4f53 \u5c06 \u6587\u5b57 \u53d8\u6210\u659c\u4f53 \u5c06**\u6587\u5b57**\u53d8\u6210\u52a0\u7c97 \u5c06__\u6587\u5b57__\u53d8\u6210\u52a0\u7c97 \u5c06 \u6587\u5b57 \u53d8\u6210\u52a0\u7c97 7.\u6570\u5b66\u516c\u5f0f \u884c\u5185\u6570\u5b66\u516c\u5f0f $a \\ne 0$ \u884c\u5185\u6570\u5b66\u516c\u5f0f$a \\ne 0$ \u6570\u636e\u516c\u5f0f $$a \\ne 0$$ a \\ne 0 \u5206\u5f0f $$ a = \\frac{\\hat{A}}{2} $$ a = \\frac{\\hat{A}}{2}","title":"Markdown\u5b66\u4e60\u7b14\u8bb0"},{"location":"notes/2018-04-24-leran_markdown/#vscode-markdown","text":"\u63d2\u4ef6\uff1a markdown + math \u5b9e\u65f6\u9884\u89c8\uff1a ctrl + shift + v","title":"vscode markdown"},{"location":"notes/2018-04-24-leran_markdown/#1","text":"# \u4e00\u7ea7\u6807\u9898, \u4e5f\u53ef\u4ee5\u4f7f\u7528====(\u81f3\u5c11\u4f7f\u7528\u4e24\u4e2a=) ## \u4e8c\u7ea7\u6807\u9898 \u4e5f\u53ef\u4ee5\u4f7f\u7528----(\u81f3\u5c11\u4f7f\u7528\u4e24\u4e2a-) ### \u4e09\u7ea7\u6807\u9898 #### \u56db\u7ea7\u6807\u9898 ##### \u4e94\u7ea7\u6807\u9898","title":"1.\u6807\u9898"},{"location":"notes/2018-04-24-leran_markdown/#2","text":"\u7a7a\u884c\u4ee3\u8868\u6bb5\u843d \u82e5\u67d0\u4e00\u884c\u53ea\u5305\u542b\u7a7a\u683c\u548c\u5236\u8868\u7b26\uff0c\u5219\u8be5\u884c\u4e5f\u4f1a\u88ab\u89c6\u4e3a\u7a7a\u884c \u6bb5\u843d\u5185\u53ef\u4ee5\u4f7f\u7528\\ \u6362\u884c","title":"2.\u6bb5\u843d\u548c\u6362\u884c"},{"location":"notes/2018-04-24-leran_markdown/#3","text":">\u8868\u793a\u5f15\u7528\uff0ceg\uff1a \u8981\u6709\u6700\u6734\u7d20\u7684\u751f\u6d3b\u4e0e\u6700\u7231\u641c\u7d22\u7684\u68a6\u60f3\u3002 \u533a\u5757\u5f15\u7528\u53ef\u4ee5\u5d4c\u5957\uff08\u4f8b\u5982\uff1a\u5f15\u7528\u5185\u7684\u5f15\u7528\uff09\uff0c\u53ea\u8981\u6839\u636e\u5c42\u6b21\u52a0\u4e0a\u4e0d\u540c\u6570\u91cf\u7684 >,eg: \u300a\u8bba\u8bed\u300b\u6709\u4e91\uff1a \"\u6709\u670b\u81ea\u8fdc\u65b9\u6765\uff0c\u4e0d\u4ea6\u4e50\u4e4e\uff1f\" \u5f15\u7528\u7684\u533a\u5757\u5185\u4e5f\u53ef\u4f7f\u7528\u5176\u4ed6\u7684 Markdown \u8bed\u6cd5\uff0c\u5305\u62ec\u6807\u9898\u3001\u5217\u8868\u3001\u4ee3\u7801\u533a\u5757\u7b49\uff0c\u4f46\u662f\u6bcf\u884c\u90fd\u8981\u5728\u524d\u9762\u52a0\u4e0a\u5bf9\u5e94\u7684\u5f15\u7528\u7b26\u53f7\uff0ceg: \u5f00\u59cb\u5f15\u7528 def print_num(num): for i in range(100): print(i) \u4ee3\u7801\u5757\u5f15\u7528\u65b9\u6cd5\uff1a\u4e09\u4e2a\u53cd\u5f15\u53f7(\u53cd\u5f15\u53f7\u4f4d\u4e8e\u952e\u76d81\u7684\u5de6\u8fb9\uff0c\u5373~\u952e)\u6216\u8005\u56db\u4e2a\u7a7a\u683c\u6216\u8005Tab","title":"3.\u5f15\u7528"},{"location":"notes/2018-04-24-leran_markdown/#4","text":"Markdown \u652f\u6301\u6709\u5e8f\u5217\u8868\u548c\u65e0\u5e8f\u5217\u8868\u3002 \u65e0\u5e8f\u5217\u8868\u4f7f\u7528\u661f\u53f7\u3001\u52a0\u53f7\u6216\u662f\u51cf\u53f7\u4f5c\u4e3a\u5217\u8868\u6807\u8bb0 \u6709\u5e8f\u5217\u8868\u5219\u4f7f\u7528\u6570\u5b57\u63a5\u7740\u4e00\u4e2a\u82f1\u6587\u53e5\u70b9\uff1a \u5217\u8868\u9879\u76ee\u53ef\u4ee5\u5305\u542b\u591a\u4e2a\u6bb5\u843d\uff0c\u6bcf\u4e2a\u9879\u76ee\u4e0b\u7684\u6bb5\u843d\u90fd\u5fc5\u987b\u7f29\u8fdb 4 \u4e2a\u7a7a\u683c\u6216\u662f 1 \u4e2a\u5236\u8868\u7b26","title":"4.\u5217\u8868"},{"location":"notes/2018-04-24-leran_markdown/#5","text":"Markdown \u652f\u6301\u4e24\u79cd\u5f62\u5f0f\u7684\u94fe\u63a5\u8bed\u6cd5\uff1a \u884c\u5185\u5f0f\u548c\u53c2\u8003\u5f0f\u4e24\u79cd\u5f62\u5f0f\u3002\u4e0d\u7ba1\u662f\u54ea\u4e00\u79cd\uff0c\u94fe\u63a5\u6587\u5b57\u90fd\u662f\u7528 [\u65b9\u62ec\u53f7] \u6765\u6807\u8bb0 \u884c\u5185\u5f0f\uff1a\u53ea\u8981\u5728\u65b9\u5757\u62ec\u53f7\u540e\u9762\u7d27\u63a5\u7740\u5706\u62ec\u53f7\u5e76\u63d2\u5165\u7f51\u5740\u94fe\u63a5\u5373\u53ef\uff0c \u5982\u679c\u4f60\u8fd8\u60f3\u8981\u52a0\u4e0a\u94fe\u63a5\u7684 title \u6587\u5b57\uff0c\u53ea\u8981\u5728\u7f51\u5740\u540e\u9762\uff0c\u7528\u53cc\u5f15\u53f7\u628a title \u6587\u5b57\u5305\u8d77\u6765\u5373\u53ef\uff0c\u4f8b\u5982\uff1a [\u591c\u96e8\u5fae\u5bd2\u7684\u535a\u5ba2](https://xugongli.github.io) [\u591c\u96e8\u5fae\u5bd2\u7684\u535a\u5ba2](https://xugongli.github.io, \"Soaringsoul's Blog\") \u6548\u679c\u5982\u4e0b\uff1a \u591c\u96e8\u5fae\u5bd2\u7684\u535a\u5ba2 \u591c\u96e8\u5fae\u5bd2\u7684\u535a\u5ba2 \u4e5f\u53ef\u4ee5\u4f7f\u7528\u76f8\u5bf9\u8def\u5f84\uff1a eg: [\u7d20\u5e74\u9526\u65f6](/life) [\u8bfb\u4e66\u7b14\u8bb0](/booknotes) \u6548\u679c\u5982\u4e0b\uff1a \u7d20\u5e74\u9526\u65f6 \u8bfb\u4e66\u7b14\u8bb0 \u53c2\u8003\u5f0f\uff1a \u94fe\u63a5\u6587\u5b57\u7684\u62ec\u53f7\u540e\u9762\u518d\u63a5\u4e0a\u53e6\u4e00\u4e2a\u65b9\u62ec\u53f7,\u800c\u5728\u7b2c\u4e8c\u4e2a\u65b9\u62ec\u53f7\u91cc\u9762\u8981\u586b\u5165\u7528\u4ee5\u8fa8\u8bc6\u94fe\u63a5\u7684\u6807\u8bb0\uff0c \u63a5\u7740\uff0c\u5728\u6587\u4ef6\u7684\u4efb\u610f\u5904\uff0c\u4f60\u53ef\u4ee5\u628a\u8fd9\u4e2a\u6807\u8bb0\u7684\u94fe\u63a5\u5185\u5bb9\u5b9a\u4e49\u51fa\u6765\uff1aeg: \u8fd9\u662f[\u591c\u96e8\u5fae\u5bd2][id]\u7684\u535a\u5ba2 [id]: https://xugongli.github.io \"\u591c\u96e8\u5fae\u5bd2\u7684\u535a\u5ba2\" \u6548\u679c\u5982\u4e0b\uff1a \u8fd9\u662f[\u591c\u96e8\u5fae\u5bd2][id]\u7684\u535a\u5ba2 [id]: https://xugongli.github.io \"\u591c\u96e8\u5fae\u5bd2\u7684\u535a\u5ba2\"","title":"5.\u94fe\u63a5"},{"location":"notes/2018-04-24-leran_markdown/#6","text":"\u5c06 *\u6587\u5b57* \u53d8\u6210\u659c\u4f53 \u5c06 _\u6587\u5b57_ \u53d8\u6210\u659c\u4f53 \u5c06 \u6587\u5b57 \u53d8\u6210\u659c\u4f53 \u5c06**\u6587\u5b57**\u53d8\u6210\u52a0\u7c97 \u5c06__\u6587\u5b57__\u53d8\u6210\u52a0\u7c97 \u5c06 \u6587\u5b57 \u53d8\u6210\u52a0\u7c97","title":"6.\u5f3a\u8c03"},{"location":"notes/2018-04-24-leran_markdown/#7","text":"","title":"7.\u6570\u5b66\u516c\u5f0f"},{"location":"notes/2018-04-24-leran_markdown/#_1","text":"$a \\ne 0$ \u884c\u5185\u6570\u5b66\u516c\u5f0f$a \\ne 0$","title":"\u884c\u5185\u6570\u5b66\u516c\u5f0f"},{"location":"notes/2018-04-24-leran_markdown/#_2","text":"$$a \\ne 0$$ a \\ne 0","title":"\u6570\u636e\u516c\u5f0f"},{"location":"notes/2018-04-24-leran_markdown/#_3","text":"$$ a = \\frac{\\hat{A}}{2} $$ a = \\frac{\\hat{A}}{2}","title":"\u5206\u5f0f"},{"location":"python/2019-02-01-pandas/","text":"\u6570\u636e\u8bfb\u53d6 file_name = \"../track2/final_track2_train.txt\" column_names = [\"uid\", \"user_city\", \"item_id\", \"author_id\", \"item_city\", \"channel\", \"finish\", \"like\", \"music_id\", \"device\", \"time\", \"duration_time\"] df = pd.read_csv(file_name, sep='\\t', header=None, names=column_names) \u884c\u5904\u7406\u548c\u5217\u5904\u7406 apply\u51fd\u6570 https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.apply.html axis=0 \uff08\u9ed8\u8ba4\uff09 \uff0c func\u7684\u8f93\u5165\u4e3aDataFrame\u7684\u4e00\u5217\uff0c \u7c7b\u578b\u4e3aSeries\uff0c index\u4e3aDataFrame\u7684\u884c\u7d22\u5f15 axis=1\u65f6\uff0c func\u7684\u8f93\u5165\u4e3aDataFrame\u7684\u4e00\u884c\uff0c \u7c7b\u578b\u4e3aSeries\uff0c index\u4e3aDataFrame\u7684\u5217\u7d22\u5f15 df = pd.DataFrame([[4, 9],] * 3, columns=['A', 'B']) df.apply(lambda x: x.name) # \u83b7\u53d6\u5217\u540d # \u7edf\u8ba1\u6bcf\u5217\u6709\u591a\u5c11\u79cd\u4e0d\u540c\u7684\u53d6\u503c def uniq_count(series): return len(np.unique(series)) df.apply(uniq_count, axis=0) # \u7edf\u8ba1\u6bcf\u5217\u7684\u6700\u5927\u6700\u5c0f\u503c def minMax(x): return pd.Series(index=['min','max'], data=[x.min(),x.max()]) df.apply(minMax) # \u591a\u5217\u5e94\u7528\u540c\u4e00\u4e2a\u51fd\u6570, cols \u4e3alist df[cols] = df[cols].apply(lambda x: x.clip(lower=0)) \u5206\u7ec4\u6c47\u603b # \u6bcf\u4e2a\u7ec4\u6709\u591a\u5c11\u6761\u6570\u636e df.groupby([\"uid\"]).size().reset_index(name='counts') DataFrame.apply \u548c GroupBy.apply \u4e0d\u540c\uff0c - DataFrame.apply \u51fd\u6570\u4f20\u9012\u7ed9\u81ea\u5b9a\u4e49\u51fd\u6570\u7684\u662fSeries\u5bf9\u8c61\uff0c apply\u6709\u81ea\u5df1\u7684\u53c2\u6570 - GroupBy.apply \u51fd\u6570\u4f20\u9012\u7ed9\u81ea\u5b9a\u4e49\u51fd\u6570\u7684\u662fDataFrame\u5bf9\u8c61\uff0c apply\u4f1a\u5c06\u53c2\u6570\u4e5f\u4f20\u9012\u7ed9\u81ea\u5b9a\u4e49\u51fd\u6570 def item_count(df): return len(np.unique(df[\"item_id\"])) user_item_count = df[[\"uid\",\"item_id\"]].groupby([\"uid\"]).apply(item_count) # use apply and return Series, Use the Series index as labels for the new columns eg1: def f(x): d = {} d['a_sum'] = x['a'].sum() d['a_max'] = x['a'].max() d['b_mean'] = x['b'].mean() d['c_d_prodsum'] = (x['c'] * x['d']).sum() return pd.Series(d, index=['a_sum', 'a_max', 'b_mean', 'c_d_prodsum']) df.groupby('group').apply(f) a_sum a_max b_mean c_d_prodsum group 0 0.560541 0.507058 0.418546 0.118106 1 0.187757 0.157958 0.887315 0.276808 eg2: like_info = data[['like']].groupby(['like']).size() def extract_feature(df): d = {} d['user_city_pv'] = len(df['like']) d['user_city_clk'] = sum(df['like']) d['user_city_pvbeta'] = d['user_city_pv'] + like_info[0] + like_info[1] d['user_city_clkbeta'] = d['user_city_pv'] + like_info[1] d['user_city_ctrbeta'] = d['user_city_clkbeta'] / d['user_city_pvbeta'] return pd.Series(d, index=['user_city_pv', 'user_city_clk', 'user_city_pvbeta', 'user_city_clkbeta', 'user_city_ctrbeta']) data[['user_city', 'like']].groupby(['user_city']).apply(extract_feature) \u6570\u636e\u62fc\u63a5 data = data.merge(item_city_data, on=['item_city'], how='left') # \u6309\u884c\u62fc\u63a5 data = pd.concat([data_train, data_test], axis=0) shift","title":"pandas"},{"location":"python/2019-02-01-pandas/#_1","text":"file_name = \"../track2/final_track2_train.txt\" column_names = [\"uid\", \"user_city\", \"item_id\", \"author_id\", \"item_city\", \"channel\", \"finish\", \"like\", \"music_id\", \"device\", \"time\", \"duration_time\"] df = pd.read_csv(file_name, sep='\\t', header=None, names=column_names)","title":"\u6570\u636e\u8bfb\u53d6"},{"location":"python/2019-02-01-pandas/#_2","text":"apply\u51fd\u6570 https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.apply.html axis=0 \uff08\u9ed8\u8ba4\uff09 \uff0c func\u7684\u8f93\u5165\u4e3aDataFrame\u7684\u4e00\u5217\uff0c \u7c7b\u578b\u4e3aSeries\uff0c index\u4e3aDataFrame\u7684\u884c\u7d22\u5f15 axis=1\u65f6\uff0c func\u7684\u8f93\u5165\u4e3aDataFrame\u7684\u4e00\u884c\uff0c \u7c7b\u578b\u4e3aSeries\uff0c index\u4e3aDataFrame\u7684\u5217\u7d22\u5f15 df = pd.DataFrame([[4, 9],] * 3, columns=['A', 'B']) df.apply(lambda x: x.name) # \u83b7\u53d6\u5217\u540d # \u7edf\u8ba1\u6bcf\u5217\u6709\u591a\u5c11\u79cd\u4e0d\u540c\u7684\u53d6\u503c def uniq_count(series): return len(np.unique(series)) df.apply(uniq_count, axis=0) # \u7edf\u8ba1\u6bcf\u5217\u7684\u6700\u5927\u6700\u5c0f\u503c def minMax(x): return pd.Series(index=['min','max'], data=[x.min(),x.max()]) df.apply(minMax) # \u591a\u5217\u5e94\u7528\u540c\u4e00\u4e2a\u51fd\u6570, cols \u4e3alist df[cols] = df[cols].apply(lambda x: x.clip(lower=0))","title":"\u884c\u5904\u7406\u548c\u5217\u5904\u7406"},{"location":"python/2019-02-01-pandas/#_3","text":"# \u6bcf\u4e2a\u7ec4\u6709\u591a\u5c11\u6761\u6570\u636e df.groupby([\"uid\"]).size().reset_index(name='counts') DataFrame.apply \u548c GroupBy.apply \u4e0d\u540c\uff0c - DataFrame.apply \u51fd\u6570\u4f20\u9012\u7ed9\u81ea\u5b9a\u4e49\u51fd\u6570\u7684\u662fSeries\u5bf9\u8c61\uff0c apply\u6709\u81ea\u5df1\u7684\u53c2\u6570 - GroupBy.apply \u51fd\u6570\u4f20\u9012\u7ed9\u81ea\u5b9a\u4e49\u51fd\u6570\u7684\u662fDataFrame\u5bf9\u8c61\uff0c apply\u4f1a\u5c06\u53c2\u6570\u4e5f\u4f20\u9012\u7ed9\u81ea\u5b9a\u4e49\u51fd\u6570 def item_count(df): return len(np.unique(df[\"item_id\"])) user_item_count = df[[\"uid\",\"item_id\"]].groupby([\"uid\"]).apply(item_count) # use apply and return Series, Use the Series index as labels for the new columns eg1: def f(x): d = {} d['a_sum'] = x['a'].sum() d['a_max'] = x['a'].max() d['b_mean'] = x['b'].mean() d['c_d_prodsum'] = (x['c'] * x['d']).sum() return pd.Series(d, index=['a_sum', 'a_max', 'b_mean', 'c_d_prodsum']) df.groupby('group').apply(f) a_sum a_max b_mean c_d_prodsum group 0 0.560541 0.507058 0.418546 0.118106 1 0.187757 0.157958 0.887315 0.276808 eg2: like_info = data[['like']].groupby(['like']).size() def extract_feature(df): d = {} d['user_city_pv'] = len(df['like']) d['user_city_clk'] = sum(df['like']) d['user_city_pvbeta'] = d['user_city_pv'] + like_info[0] + like_info[1] d['user_city_clkbeta'] = d['user_city_pv'] + like_info[1] d['user_city_ctrbeta'] = d['user_city_clkbeta'] / d['user_city_pvbeta'] return pd.Series(d, index=['user_city_pv', 'user_city_clk', 'user_city_pvbeta', 'user_city_clkbeta', 'user_city_ctrbeta']) data[['user_city', 'like']].groupby(['user_city']).apply(extract_feature)","title":"\u5206\u7ec4\u6c47\u603b"},{"location":"python/2019-02-01-pandas/#_4","text":"data = data.merge(item_city_data, on=['item_city'], how='left') # \u6309\u884c\u62fc\u63a5 data = pd.concat([data_train, data_test], axis=0)","title":"\u6570\u636e\u62fc\u63a5"},{"location":"python/2019-02-01-pandas/#shift","text":"","title":"shift"},{"location":"python/2019-05-05-pip/","text":"layout: post title: \"title\" subtitle: \"pip\" date: 2019-05-05 16:11:31 author: \"none\" header-img: \"img/posts/default_post.jpg\" catalog: true tags: - tag \u7528\u6237\u6a21\u5f0f\u5b89\u88c5\u5305 git clone https://github.com/cloudburst/libheap pip install --user ./libheap/ pip show libheap","title":"2019 05 05 pip"},{"location":"python/2019-05-17-os/","text":"layout: post title: \"os\" subtitle: \"os\" date: 2019-05-17 10:39:16 author: \"none\" header-img: \"img/posts/default_post.jpg\" catalog: true tags: - tag \u83b7\u53d6python\u6587\u4ef6\u7684\u7edd\u5bf9\u5730\u5740 os.path.dirname(os.path.abspath( file ))","title":"2019 05 17 os"},{"location":"python/2019-05-17-os/#python","text":"os.path.dirname(os.path.abspath( file ))","title":"\u83b7\u53d6python\u6587\u4ef6\u7684\u7edd\u5bf9\u5730\u5740"},{"location":"python/2019-05-22-mouse_keyboard/","text":"layout: post title: \"mouse_keyboard\" subtitle: \"mouse_keyboard\" date: 2019-05-22 09:31:09 author: \"none\" header-img: \"img/posts/default_post.jpg\" catalog: true tags: - tag \u76d1\u63a7\u548c\u6a21\u62df\u9f20\u6807\u952e\u76d8\u4e8b\u4ef6 pip install pynput \u6a21\u62df\u9f20\u6807\u952e\u76d8 pip install PyAutoGUI \u62f7\u8d1d \u5c06python\u6570\u636e\u4f20\u8f93\u5230\u526a\u5207\u677f #pip install pywin32 import win32clipboard from io import StringIO from io import BytesIO def send_to_clipboard(img): ''' copy PIL Image to clipboard ''' #output = StringIO() output = BytesIO() img.convert(\"RGB\").save(output, \"BMP\") data = output.getvalue()[14:] output.close() win32clipboard.OpenClipboard() win32clipboard.EmptyClipboard() win32clipboard.SetClipboardData(win32clipboard.CF_DIB, data) win32clipboard.CloseClipboard() \u4ece\u526a\u5207\u677f\u83b7\u53d6\u6570\u636e\u5230python\u53d8\u91cf\u4e2d #pip install pywin32 #pip install chardet import win32clipboard import chardet def get_from_clipboard(): win32clipboard.OpenClipboard() copy_text = win32clipboard.GetClipboardData(win32clipboard.CF_TEXT) win32clipboard.CloseClipboard() return copy_text \u8bb0\u5f55\u5668 \u8bb0\u5f55\u7528\u6237\u52a8\u4f5c\u5e8f\u5217\uff0c \u5305\u62ec\u952e\u76d8\u548c\u9f20\u6807","title":"2019 05 22 mouse keyboard"},{"location":"python/2019-05-22-mouse_keyboard/#_1","text":"pip install pynput","title":"\u76d1\u63a7\u548c\u6a21\u62df\u9f20\u6807\u952e\u76d8\u4e8b\u4ef6"},{"location":"python/2019-05-22-mouse_keyboard/#_2","text":"pip install PyAutoGUI","title":"\u6a21\u62df\u9f20\u6807\u952e\u76d8"},{"location":"python/2019-05-22-mouse_keyboard/#_3","text":"\u5c06python\u6570\u636e\u4f20\u8f93\u5230\u526a\u5207\u677f #pip install pywin32 import win32clipboard from io import StringIO from io import BytesIO def send_to_clipboard(img): ''' copy PIL Image to clipboard ''' #output = StringIO() output = BytesIO() img.convert(\"RGB\").save(output, \"BMP\") data = output.getvalue()[14:] output.close() win32clipboard.OpenClipboard() win32clipboard.EmptyClipboard() win32clipboard.SetClipboardData(win32clipboard.CF_DIB, data) win32clipboard.CloseClipboard() \u4ece\u526a\u5207\u677f\u83b7\u53d6\u6570\u636e\u5230python\u53d8\u91cf\u4e2d #pip install pywin32 #pip install chardet import win32clipboard import chardet def get_from_clipboard(): win32clipboard.OpenClipboard() copy_text = win32clipboard.GetClipboardData(win32clipboard.CF_TEXT) win32clipboard.CloseClipboard() return copy_text","title":"\u62f7\u8d1d"},{"location":"python/2019-05-22-mouse_keyboard/#_4","text":"\u8bb0\u5f55\u7528\u6237\u52a8\u4f5c\u5e8f\u5217\uff0c \u5305\u62ec\u952e\u76d8\u548c\u9f20\u6807","title":"\u8bb0\u5f55\u5668"},{"location":"python/2020-03-01-sns/","text":"import matplotlib.pyplot as plt \u8fde\u7eed\u503c\u5206\u5e03 x = np.random.normal(size=100) sns.distplot(x); sns.distplot(df_train0['var_'+str(i+j 16)], label = '0') sns.distplot(df_train1['var_'+str(i+j 16)], label = '1') \u5206\u7ec4\u5bf9\u6bd4 import seaborn as sns, matplotlib.pyplot as plt df_train0 = df_train[ df_train['target']==0 ] df_train1 = df_train[ df_train['target']==1 ] for j in range(13): plt.figure(figsize=(15,18)) for i in range(16): if i+j 16>199: continue plt.subplot(4, 4, i+1) sns.distplot(df_train0['var_'+str(i+j 16)], label = '0') sns.distplot(df_train1['var_'+str(i+j 16)], label = '1') plt.title('var_'+str(i+j 16)) plt.xlabel('') plt.show() class GridPlot(object): def init (self, data, category, subgraph): self.category = pd.unique(data[category]) self.subgraph = subgraph self.data_grouped = {name:group for name, group in data.groupby(category)} def plot_subgraph(self): plt.figure(figsize=(15,18)) for i,g in enumerate(self.subgraph): plt.subplot(4, 4, i+1) for cat in self.category: #print(self.data_grouped[cat][g]) sns.distplot(self.data_grouped[cat][g], label=str(cat)) plt.title(g) plt.show() def distplot_column(data, target, column_list, sub_figsize=(4,4)): ''' data - pandas dataframe target - string. group by target column in each subplot var_list - list. echa var have one subplot ''' data_groups = {name:group for name, group in data.groupby(target)} target_groups = pd.unique(data[target]) plt.figure(figsize=np.multiply(sub_figsize, len(column_list))) for i,col in enumerate(column_list): plt.subplot(sub_figsize[0], sub_figsize[1], i+1) for target_group in target_groups: sns.distplot(data_groups[target_group][col], label=str(target_group)) plt.title(target_group) plt.xlabel('') plt.show() tsne https://github.com/zaburo-ch/Parametric-t-SNE-in-Keras/blob/master/mlp_param_tsne.py","title":"sns"},{"location":"python/2020-03-01-sns/#_1","text":"x = np.random.normal(size=100) sns.distplot(x); sns.distplot(df_train0['var_'+str(i+j 16)], label = '0') sns.distplot(df_train1['var_'+str(i+j 16)], label = '1')","title":"\u8fde\u7eed\u503c\u5206\u5e03"},{"location":"python/2020-03-01-sns/#_2","text":"import seaborn as sns, matplotlib.pyplot as plt df_train0 = df_train[ df_train['target']==0 ] df_train1 = df_train[ df_train['target']==1 ] for j in range(13): plt.figure(figsize=(15,18)) for i in range(16): if i+j 16>199: continue plt.subplot(4, 4, i+1) sns.distplot(df_train0['var_'+str(i+j 16)], label = '0') sns.distplot(df_train1['var_'+str(i+j 16)], label = '1') plt.title('var_'+str(i+j 16)) plt.xlabel('') plt.show() class GridPlot(object): def init (self, data, category, subgraph): self.category = pd.unique(data[category]) self.subgraph = subgraph self.data_grouped = {name:group for name, group in data.groupby(category)} def plot_subgraph(self): plt.figure(figsize=(15,18)) for i,g in enumerate(self.subgraph): plt.subplot(4, 4, i+1) for cat in self.category: #print(self.data_grouped[cat][g]) sns.distplot(self.data_grouped[cat][g], label=str(cat)) plt.title(g) plt.show() def distplot_column(data, target, column_list, sub_figsize=(4,4)): ''' data - pandas dataframe target - string. group by target column in each subplot var_list - list. echa var have one subplot ''' data_groups = {name:group for name, group in data.groupby(target)} target_groups = pd.unique(data[target]) plt.figure(figsize=np.multiply(sub_figsize, len(column_list))) for i,col in enumerate(column_list): plt.subplot(sub_figsize[0], sub_figsize[1], i+1) for target_group in target_groups: sns.distplot(data_groups[target_group][col], label=str(target_group)) plt.title(target_group) plt.xlabel('') plt.show()","title":"\u5206\u7ec4\u5bf9\u6bd4"},{"location":"python/2020-03-01-sns/#tsne","text":"https://github.com/zaburo-ch/Parametric-t-SNE-in-Keras/blob/master/mlp_param_tsne.py","title":"tsne"},{"location":"spark/2018-12-29-pyspark/","text":"pyspark from pyspark.sql import SparkSession, SQLContext from pyspark.sql.types import * import pyspark.sql.functions as f spark = SparkSession\\ .builder\\ .appName(\"AppName\")\\ .getOrCreate() sc = spark.sparkContext sqlconext = SQLContext(sc) \u8bfb\u53d6csv\u6587\u4ef6 #file_name = \"hdfs:///user/ #file_name = \"file:///home/ # method 1: # input_schema = StructType() # for col in column_names: # input_schema.add(StructField(col, StringType(), True)) # method 2: # input_schema = spark.read.schema(\"col0 INT, col2 DOUBLE\") df = spark.read.csv(file_name, schema=input_schema, sep='\\t') \u9009\u62e9\u5217 df = df[['clk', 'site', 'category', 'location', 'ctr']] \u4fee\u6539\u5217 df = df.withColumn('ctr', f.col('ctr')/1000000) # \u589e\u52a0\u5e38\u91cf\u5217 df = df.withColumn('constant', f.lit(10)) \u8fc7\u6ee4\u884c df = df.filter( (f.col('site') == '1') & (f.col('category') == 'FOCUS2') ) \u6392\u5e8f df = df.orderBy([\"age\", \"name\"], ascending=[0, 1]) http://spark.apache.org/docs/2.1.0/api/python/pyspark.sql.html#pyspark.sql.DataFrame.orderBy \u5206\u7ec4\u805a\u5408 df = df.groupBy(['location']).agg( f.count('clk'), f.sum('clk'), f.sum('ctr'), f.sum('ctr')/f.sum('clk')) \u4f7f\u7528pyspark.sql.functions\u91cc\u7684\u805a\u5408\u51fd\u6570 pandas_udf \u5206\u7ec4\u6570\u636e\u4f1a\u8f6c\u5316\u4e3apd.DataFrame\uff0c \u9700\u8981\u6ce8\u610f\u5185\u5b58\u662f\u5426\u653e\u7684\u4e0b\u5206\u7ec4\u6570\u636e\uff0c pandas_udf\u8bbe\u7f6e\u7684\u8fd4\u56de\u7c7b\u578b \u9700\u8981\u4e0e\u51fd\u6570\u8fd4\u56de\u7684pd.DataFrame\u7c7b\u578b\u4e00\u81f4 import pandas as pd from pyspark.sql.types import * from pyspark.sql.functions import pandas_udf, PandasUDFType uid_schema = StructType() uid_schema.add(StructField(\"uid\", LongType(), True)) uid_schema.add(StructField(\"uid_finish_pv\", LongType(), True)) uid_schema.add(StructField(\"uid_finish_clk\", LongType(), True)) print(\"uid schema:\", uid_schema) @f.pandas_udf(uid_schema, f.PandasUDFType.GROUPED_MAP) def uid_extract(pdf): d = {} d['uid'] = [pdf['uid'][0]] d['uid_finish_pv'] = [len(pdf['finish'])] d['uid_finish_clk'] = [sum(pdf['finish'])] df = pd.DataFrame(d, columns=uid_schema.fieldNames()) return df uid_df = data_df.groupby(['uid']).apply(uid_extract) join left_df.join(right_df, [\"request_id\", \"location\"]) RDD \u548c DataFrame \u8f6c\u6362 from pyspark.sql import SparkSession, SQLContext from pyspark.sql.types import * spark = SparkSession\\ .builder\\ .appName(\"StatLocationPctr\")\\ .getOrCreate() sc = spark.sparkContext sqlContext = SQLContext(sc) # DataFrame to RDD df.rdd # RDD to DataFrame input_schema = StructType() input_schema.add(StructField(\"feature\", StringType(), True)) input_schema.add(StructField(\"value\", StringType(), True)) df = sqlContext.createDataFrame(rdd, input_schema) df = sc.parallelize([ (1, \"foo\", 2.0, \"2016-02-16\"), (2, \"bar\", 3.0, \"2016-02-16\") ]).toDF([\"id\", \"x\", \"y\", \"date\"]) \u4fdd\u5b58rdd\u5230\u6587\u4ef6 df.coalesce(1).write.save(output_dir, format=\"csv\", sep='\\t') df.repartition(1).write.save(output_dir, format=\"csv\", sep='\\t') df.rdd.saveAsTextFile(output_dir) rdd.saveAsTextFile(output_dir) rdd.repartition(1).saveAsTextFile(output_dir) # \u6309\u5206\u533a\u5b58\u50a8\u6587\u4ef6 df.write.partitionBy('year', 'month').save(dict_output_dir, format=\"csv\", sep='\\t') \u9700\u8981\u7279\u5b9a\u683c\u5f0f\u7684\u8f93\u51fa\u65f6\uff0c \u53ef\u4ee5\u4f7f\u7528map\u65b9\u6cd5\u5148\u62fc\u63a5\u6210\u7279\u5b9a\u683c\u5f0f\u7684\u5b57\u7b26\u4e32\uff0c\u7136\u540e\u518d\u8f93\u51fa \u5728\u4fdd\u5b58df\u4e4b\u524d\uff0c\u5982\u679c\u5bf9df\u8fdb\u884c\u4e86\u6392\u5e8f\uff0c repartition\u4f1a\u6253\u4e71\u987a\u5e8f\uff0c coalesce\u4e0d\u4f1a pyspark python export SPARK_HOME=~/spark-2.4.0-bin-hadoop2.7 \u6216\u8005\u5728~/spark-2.4.0-bin-hadoop2.7/conf/spark-env.sh \u4e2d\u914d\u7f6eSPARK_HOME\uff0c \u540e\u8005\u4f1a\u8986\u76d6\u524d\u8005 export PATH=~/bin:~/hadoop/bin:~/spark-2.4.0-bin-hadoop2.7/bin:$PATH \u8bbe\u7f6epath\uff0c \u53ef\u4ee5\u627e\u5230spark-submit \u8bbe\u7f6epython \u901a\u8fc7\u73af\u5883\u53d8\u91cf\u8bbe\u7f6e export PYSPARK_PYTHON=/usr/local/bin/python2.7 export PYSPARK_DRIVER_PYTHON=/usr/local/bin/python2.7 export SPARK_YARN_USER_ENV=\"PYSPARK_PYTHON=/usr/local/bin/python2.7\" \u63d0\u4ea4\u7a0b\u5e8f\u65f6\u8bbe\u7f6epython spark-submit \\ --master local \\ --conf \"spark.pyspark.python=/home/appops/Python/bin/python\" \\ --conf \"spark.pyspark.driver.python=/home/appops/Python/bin/python\" \\ jar\u5305 ~/spark-2.4.0-bin-hadoop2.7/jars/ hadoop-lzo-0.4.20.jar","title":"spark"},{"location":"spark/2018-12-29-pyspark/#pyspark","text":"from pyspark.sql import SparkSession, SQLContext from pyspark.sql.types import * import pyspark.sql.functions as f spark = SparkSession\\ .builder\\ .appName(\"AppName\")\\ .getOrCreate() sc = spark.sparkContext sqlconext = SQLContext(sc)","title":"pyspark"},{"location":"spark/2018-12-29-pyspark/#csv","text":"#file_name = \"hdfs:///user/ #file_name = \"file:///home/ # method 1: # input_schema = StructType() # for col in column_names: # input_schema.add(StructField(col, StringType(), True)) # method 2: # input_schema = spark.read.schema(\"col0 INT, col2 DOUBLE\") df = spark.read.csv(file_name, schema=input_schema, sep='\\t')","title":"\u8bfb\u53d6csv\u6587\u4ef6"},{"location":"spark/2018-12-29-pyspark/#_1","text":"df = df[['clk', 'site', 'category', 'location', 'ctr']]","title":"\u9009\u62e9\u5217"},{"location":"spark/2018-12-29-pyspark/#_2","text":"df = df.withColumn('ctr', f.col('ctr')/1000000) # \u589e\u52a0\u5e38\u91cf\u5217 df = df.withColumn('constant', f.lit(10))","title":"\u4fee\u6539\u5217"},{"location":"spark/2018-12-29-pyspark/#_3","text":"df = df.filter( (f.col('site') == '1') & (f.col('category') == 'FOCUS2') )","title":"\u8fc7\u6ee4\u884c"},{"location":"spark/2018-12-29-pyspark/#_4","text":"df = df.orderBy([\"age\", \"name\"], ascending=[0, 1]) http://spark.apache.org/docs/2.1.0/api/python/pyspark.sql.html#pyspark.sql.DataFrame.orderBy","title":"\u6392\u5e8f"},{"location":"spark/2018-12-29-pyspark/#_5","text":"df = df.groupBy(['location']).agg( f.count('clk'), f.sum('clk'), f.sum('ctr'), f.sum('ctr')/f.sum('clk')) \u4f7f\u7528pyspark.sql.functions\u91cc\u7684\u805a\u5408\u51fd\u6570 pandas_udf \u5206\u7ec4\u6570\u636e\u4f1a\u8f6c\u5316\u4e3apd.DataFrame\uff0c \u9700\u8981\u6ce8\u610f\u5185\u5b58\u662f\u5426\u653e\u7684\u4e0b\u5206\u7ec4\u6570\u636e\uff0c pandas_udf\u8bbe\u7f6e\u7684\u8fd4\u56de\u7c7b\u578b \u9700\u8981\u4e0e\u51fd\u6570\u8fd4\u56de\u7684pd.DataFrame\u7c7b\u578b\u4e00\u81f4 import pandas as pd from pyspark.sql.types import * from pyspark.sql.functions import pandas_udf, PandasUDFType uid_schema = StructType() uid_schema.add(StructField(\"uid\", LongType(), True)) uid_schema.add(StructField(\"uid_finish_pv\", LongType(), True)) uid_schema.add(StructField(\"uid_finish_clk\", LongType(), True)) print(\"uid schema:\", uid_schema) @f.pandas_udf(uid_schema, f.PandasUDFType.GROUPED_MAP) def uid_extract(pdf): d = {} d['uid'] = [pdf['uid'][0]] d['uid_finish_pv'] = [len(pdf['finish'])] d['uid_finish_clk'] = [sum(pdf['finish'])] df = pd.DataFrame(d, columns=uid_schema.fieldNames()) return df uid_df = data_df.groupby(['uid']).apply(uid_extract)","title":"\u5206\u7ec4\u805a\u5408"},{"location":"spark/2018-12-29-pyspark/#join","text":"left_df.join(right_df, [\"request_id\", \"location\"])","title":"join"},{"location":"spark/2018-12-29-pyspark/#rdd-dataframe","text":"from pyspark.sql import SparkSession, SQLContext from pyspark.sql.types import * spark = SparkSession\\ .builder\\ .appName(\"StatLocationPctr\")\\ .getOrCreate() sc = spark.sparkContext sqlContext = SQLContext(sc) # DataFrame to RDD df.rdd # RDD to DataFrame input_schema = StructType() input_schema.add(StructField(\"feature\", StringType(), True)) input_schema.add(StructField(\"value\", StringType(), True)) df = sqlContext.createDataFrame(rdd, input_schema) df = sc.parallelize([ (1, \"foo\", 2.0, \"2016-02-16\"), (2, \"bar\", 3.0, \"2016-02-16\") ]).toDF([\"id\", \"x\", \"y\", \"date\"])","title":"RDD \u548c DataFrame \u8f6c\u6362"},{"location":"spark/2018-12-29-pyspark/#rdd","text":"df.coalesce(1).write.save(output_dir, format=\"csv\", sep='\\t') df.repartition(1).write.save(output_dir, format=\"csv\", sep='\\t') df.rdd.saveAsTextFile(output_dir) rdd.saveAsTextFile(output_dir) rdd.repartition(1).saveAsTextFile(output_dir) # \u6309\u5206\u533a\u5b58\u50a8\u6587\u4ef6 df.write.partitionBy('year', 'month').save(dict_output_dir, format=\"csv\", sep='\\t') \u9700\u8981\u7279\u5b9a\u683c\u5f0f\u7684\u8f93\u51fa\u65f6\uff0c \u53ef\u4ee5\u4f7f\u7528map\u65b9\u6cd5\u5148\u62fc\u63a5\u6210\u7279\u5b9a\u683c\u5f0f\u7684\u5b57\u7b26\u4e32\uff0c\u7136\u540e\u518d\u8f93\u51fa \u5728\u4fdd\u5b58df\u4e4b\u524d\uff0c\u5982\u679c\u5bf9df\u8fdb\u884c\u4e86\u6392\u5e8f\uff0c repartition\u4f1a\u6253\u4e71\u987a\u5e8f\uff0c coalesce\u4e0d\u4f1a","title":"\u4fdd\u5b58rdd\u5230\u6587\u4ef6"},{"location":"spark/2018-12-29-pyspark/#pyspark-python","text":"export SPARK_HOME=~/spark-2.4.0-bin-hadoop2.7 \u6216\u8005\u5728~/spark-2.4.0-bin-hadoop2.7/conf/spark-env.sh \u4e2d\u914d\u7f6eSPARK_HOME\uff0c \u540e\u8005\u4f1a\u8986\u76d6\u524d\u8005 export PATH=~/bin:~/hadoop/bin:~/spark-2.4.0-bin-hadoop2.7/bin:$PATH \u8bbe\u7f6epath\uff0c \u53ef\u4ee5\u627e\u5230spark-submit \u8bbe\u7f6epython \u901a\u8fc7\u73af\u5883\u53d8\u91cf\u8bbe\u7f6e export PYSPARK_PYTHON=/usr/local/bin/python2.7 export PYSPARK_DRIVER_PYTHON=/usr/local/bin/python2.7 export SPARK_YARN_USER_ENV=\"PYSPARK_PYTHON=/usr/local/bin/python2.7\" \u63d0\u4ea4\u7a0b\u5e8f\u65f6\u8bbe\u7f6epython spark-submit \\ --master local \\ --conf \"spark.pyspark.python=/home/appops/Python/bin/python\" \\ --conf \"spark.pyspark.driver.python=/home/appops/Python/bin/python\" \\ jar\u5305 ~/spark-2.4.0-bin-hadoop2.7/jars/ hadoop-lzo-0.4.20.jar","title":"pyspark python"},{"location":"web/2019-05-24-electron/","text":"layout: post title: \"electron\" subtitle: \"electron\" date: 2019-05-24 14:55:13 author: \"none\" header-img: \"img/posts/default_post.jpg\" catalog: true tags: - tag zerorpc zerorpc \u4f9d\u8d56node-gyp\uff0c node-gyp\u4e0d\u652f\u6301python3, node-gyp\u4f7f\u7528visual studio\u8fdb\u884c\u7f16\u8bd1\uff0c\u7248\u672c\u95ee\u9898 npm install --vs2015 -g windows-build-tools npm install --python=\"C:\\Program Files\\Python27\\python.exe\" --msvs_version=2015 zerorpc \u6253\u5305 \u6253\u5305\u5de5\u5177 npm install electron-builder --save-dev \u6253\u5305\u914d\u7f6e package.json \"build\": { \"appId\": \"com.xxx.app\", \"mac\": { \"target\": [\"dmg\",\"zip\"] }, \"win\": { \"target\": [\"nsis\",\"zip\"] } }, \"scripts\": { \"dist\": \"electron-builder --win --x64\" }, \u6253\u5305\u547d\u4ee4 npm run dist vscode \u67e5\u770b\u6240\u6709\u5feb\u6377\u952e Ctrl + Shift + p, Open Keyboard Shortcuts \u4ee3\u7801\u6298\u53e0 # \u6298\u53e0 n=0,1,2 ... ctrl+k ctrl+<n> # \u5c55\u5f00 ctrl+k ctrl+j \u6587\u672c\u7f16\u8f91 # \u62ec\u53f7\u8df3\u8f6c Ctrl + Shift + \\ # \u591a\u884c\u7f16\u8f91 alt + shift + \u9f20\u6807\u5de6\u952e\uff08\u62d6\u52a8\uff09 alt + \u9f20\u6807\u5de6\u952e\uff08\u70b9\u9009\uff09 # \u5927\u5c0f\u5199\u8f6c\u6362 ctrl + shift + p, uppercase","title":"2019 05 24 electron"},{"location":"web/2019-05-24-electron/#zerorpc","text":"zerorpc \u4f9d\u8d56node-gyp\uff0c node-gyp\u4e0d\u652f\u6301python3, node-gyp\u4f7f\u7528visual studio\u8fdb\u884c\u7f16\u8bd1\uff0c\u7248\u672c\u95ee\u9898 npm install --vs2015 -g windows-build-tools npm install --python=\"C:\\Program Files\\Python27\\python.exe\" --msvs_version=2015 zerorpc","title":"zerorpc"},{"location":"web/2019-05-24-electron/#_1","text":"","title":"\u6253\u5305"},{"location":"web/2019-05-24-electron/#_2","text":"npm install electron-builder --save-dev","title":"\u6253\u5305\u5de5\u5177"},{"location":"web/2019-05-24-electron/#_3","text":"package.json \"build\": { \"appId\": \"com.xxx.app\", \"mac\": { \"target\": [\"dmg\",\"zip\"] }, \"win\": { \"target\": [\"nsis\",\"zip\"] } }, \"scripts\": { \"dist\": \"electron-builder --win --x64\" },","title":"\u6253\u5305\u914d\u7f6e"},{"location":"web/2019-05-24-electron/#_4","text":"npm run dist","title":"\u6253\u5305\u547d\u4ee4"},{"location":"web/2019-05-24-electron/#vscode","text":"\u67e5\u770b\u6240\u6709\u5feb\u6377\u952e Ctrl + Shift + p, Open Keyboard Shortcuts \u4ee3\u7801\u6298\u53e0 # \u6298\u53e0 n=0,1,2 ... ctrl+k ctrl+<n> # \u5c55\u5f00 ctrl+k ctrl+j \u6587\u672c\u7f16\u8f91 # \u62ec\u53f7\u8df3\u8f6c Ctrl + Shift + \\ # \u591a\u884c\u7f16\u8f91 alt + shift + \u9f20\u6807\u5de6\u952e\uff08\u62d6\u52a8\uff09 alt + \u9f20\u6807\u5de6\u952e\uff08\u70b9\u9009\uff09 # \u5927\u5c0f\u5199\u8f6c\u6362 ctrl + shift + p, uppercase","title":"vscode"},{"location":"web/2019-05-31-d3/","text":"layout: post title: \"d3\" subtitle: \"d3\" date: 2019-05-31 14:27:18 author: \"none\" header-img: \"img/posts/default_post.jpg\" catalog: true tags: - tag https://github.com/d3/d3/blob/master/API.md selection append \u6dfb\u52a0html\u5143\u7d20 attr \u6dfb\u52a0\u6216\u4fee\u6539\u5143\u7d20\u5c5e\u6027 \u4f7f\u7528\u793a\u4f8b d3.select(\"#timeline3\") .append(\"svg\") .attr(\"width\", 500) // \u6dfb\u52a0\u4e86svg\u6807\u7b7e\uff0c\u5e76\u8bbe\u5b9a\u4e86\u5c5e\u6027 <div id=\"timeline3\"> <svg witdth=\"500\"> </svg> </div> update\u3001enter\u3001exit update \u9009\u4e2d\u6709\u6570\u636e\u5bf9\u5e94\u7684\u5143\u7d20 enter \u9009\u4e2d\u6709\u6570\u636e\u4f46\u6ca1\u6709\u7684\u5143\u7d20\uff0c\u53ef\u4ee5append\u6dfb\u52a0\u76f8\u5e94\u7684\u5143\u7d20 exit \u9009\u4e2d\u6ca1\u6709\u6570\u636e\u5bf9\u5e94\u7684\u5143\u7d20\uff0c \u53ef\u4ee5\u4f7f\u7528remove\u5220\u9664\u5143\u7d20 call call\u7684\u53c2\u6570\u4e3a\u51fd\u6570\uff0c \u51fd\u6570\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u4e3aselection // \u51fd\u6570\u5b9a\u4e49 function name(selection, first, last) { selection .attr(\"first-name\", first) .attr(\"last-name\", last); } d3.selectAll(\"div\").call(name, \"John\", \"Snow\"); // This is roughly equivalent to: name(d3.selectAll(\"div\"), \"John\", \"Snow\"); brush Select a one- or two-dimensional region using the mouse or touch https://github.com/d3/d3-brush var x = d3.scale.linear() .domain([timeBegin, timeEnd]) .range([0, w]); var brush = d3.svg.brush() .x(x) .on(\"brush\", display); .(x) <script type=\"text/javascript\"> // lanes \u4e09\u4e2a\u65f6\u95f4\u7ebf var lanes = [\"Chinese\",\"Japanese\",\"Korean\"], laneLength = lanes.length, timeBegin = 0, timeEnd = 2000; // margin // miniHeight, \u6bcf\u4e2a\u65f6\u95f4\u7ebf\u536012\u4e2a\u5355\u4f4d\u9ad8\u5ea6\uff0c var m = [20, 15, 15, 120], //top right bottom left w = 960 - m[1] - m[3], h = 500 - m[0] - m[2], miniHeight = laneLength * 12 + 50, mainHeight = h - miniHeight - 50; // w=960\uff0c miniHeight=3*12+50, mainHeight=500-miniHeight-50 // scales \u5750\u6807\u8f74 (x1, y1) \u4e3amain, (x, y2)\u4e3amini // main \u7684\u5750\u6807\u8f74x1\u5728display\u4e2d\u4f7f\u7528\uff0c mini\u7684x\u5728\u8bbe\u7f6e\u753b\u5237\u65f6\u4f7f\u7528 // y\u8f74\u6620\u5c04\u65f6\u95f4\u7ebf\u7684id var x = d3.scale.linear() .domain([timeBegin, timeEnd]) .range([0, w]); var x1 = d3.scale.linear() .range([0, w]); var y1 = d3.scale.linear() .domain([0, laneLength]) .range([0, mainHeight]); var y2 = d3.scale.linear() .domain([0, laneLength]) .range([0, miniHeight]); // svg\u6807\u7b7e\uff0c width=960\uff0c height=500 var chart = d3.select(\"body\") .append(\"svg\") .attr(\"width\", w + m[1] + m[3]) .attr(\"height\", h + m[0] + m[2]) .attr(\"class\", \"chart\"); // defs \u5b9a\u4e49svg\u7684\u9884\u5b9a\u4e49\u5143\u7d20\uff0c chart.append(\"defs\").append(\"clipPath\") .attr(\"id\", \"clip\") .append(\"rect\") .attr(\"width\", w) .attr(\"height\", mainHeight); // main chart, \u5750\u6807\u7cfbtranslate(120, 20) var main = chart.append(\"g\") .attr(\"transform\", \"translate(\" + m[3] + \",\" + m[0] + \")\") .attr(\"width\", w) .attr(\"height\", mainHeight) .attr(\"class\", \"main\"); // mini chart, \u5750\u6807\u7cfbtranslate(120, 349) var mini = chart.append(\"g\") .attr(\"transform\", \"translate(\" + m[3] + \",\" + (mainHeight + m[0]) + \")\") .attr(\"width\", w) .attr(\"height\", miniHeight) .attr(\"class\", \"mini\"); // items\u7684\u6bcf\u4e2a\u6570\u636e\u4e3a\u5b57\u5178\uff0c // main char \u6839\u636e\u6570\u636e\u6784\u5efaline\uff0c line\u5c06main chart \u4e09\u6761\u65f6\u95f4\u7ebf\u5206\u9694 // \u5206\u5272\u7ebf\u7684\u8d77\u70b9\u4e3a(x1,y1), \u7ec8\u70b9\u4e3a(x2, y2) // m[1]\u4e3aright margin //main lanes and texts main.append(\"g\").selectAll(\".laneLines\") .data(items) .enter().append(\"line\") .attr(\"x1\", m[1]) .attr(\"y1\", function(d) {return y1(d.lane);}) .attr(\"x2\", w) .attr(\"y2\", function(d) {return y1(d.lane);}) .attr(\"stroke\", \"lightgray\") // main chart \u65f6\u95f4\u7ebf\u7684\u540d\u79f0\u6807\u7b7e main.append(\"g\").selectAll(\".laneText\") .data(lanes) .enter().append(\"text\") .text(function(d) {return d;}) .attr(\"x\", -m[1]) .attr(\"y\", function(d, i) {return y1(i + .5);}) .attr(\"dy\", \".5ex\") .attr(\"text-anchor\", \"end\") .attr(\"class\", \"laneText\"); //mini lanes and texts mini.append(\"g\").selectAll(\".laneLines\") .data(items) .enter().append(\"line\") .attr(\"x1\", m[1]) .attr(\"y1\", function(d) {return y2(d.lane);}) .attr(\"x2\", w) .attr(\"y2\", function(d) {return y2(d.lane);}) .attr(\"stroke\", \"lightgray\"); mini.append(\"g\").selectAll(\".laneText\") .data(lanes) .enter().append(\"text\") .text(function(d) {return d;}) .attr(\"x\", -m[1]) .attr(\"y\", function(d, i) {return y2(i + .5);}) .attr(\"dy\", \".5ex\") .attr(\"text-anchor\", \"end\") .attr(\"class\", \"laneText\"); var itemRects = main.append(\"g\") .attr(\"clip-path\", \"url(#clip)\"); // \u77e9\u5f62\u80cc\u666f \u548c \u6587\u5b57\u6807\u7b7e //mini item rects mini.append(\"g\").selectAll(\"miniItems\") .data(items) .enter().append(\"rect\") .attr(\"class\", function(d) {return \"miniItem\" + d.lane;}) .attr(\"x\", function(d) {return x(d.start);}) .attr(\"y\", function(d) {return y2(d.lane + .5) - 5;}) .attr(\"width\", function(d) {return x(d.end - d.start);}) .attr(\"height\", 10); //mini labels mini.append(\"g\").selectAll(\".miniLabels\") .data(items) .enter().append(\"text\") .text(function(d) {return d.id;}) .attr(\"x\", function(d) {return x(d.start);}) .attr(\"y\", function(d) {return y2(d.lane + .5);}) .attr(\"dy\", \".5ex\"); //brush var brush = d3.svg.brush() .x(x) .on(\"brush\", display); // mini chart \u4e0a\u8bbe\u7f6ebrush mini.append(\"g\") .attr(\"class\", \"x brush\") .call(brush) .selectAll(\"rect\") .attr(\"y\", 1) .attr(\"height\", miniHeight - 1); display(); // \u5f53brush\u7684\"brush\"\u4e8b\u4ef6\u53d1\u751f\u662f, \u8c03\u7528\u8be5\u51fd\u6570 function display() { // brush.extent() \u83b7\u53d6\u753b\u5237\u8303\u56f4\uff0c \u8fc7\u6ee4\u6570\u636e var rects, labels, minExtent = brush.extent()[0], maxExtent = brush.extent()[1], visItems = items.filter(function(d) {return d.start < maxExtent && d.end > minExtent;}); mini.select(\".brush\") .call(brush.extent([minExtent, maxExtent])); // \u8bbe\u7f6emain chart\u7684\u6a2a\u5750\u6807\u8f74 x1.domain([minExtent, maxExtent]); //update main item rects // itemRects \u8bbe\u7f6e\u6709clip-path\uff0c rects = itemRects.selectAll(\"rect\") .data(visItems, function(d) { return d.id; }) .attr(\"x\", function(d) {return x1(d.start);}) .attr(\"width\", function(d) {return x1(d.end) - x1(d.start);}); rects.enter().append(\"rect\") .attr(\"class\", function(d) {return \"miniItem\" + d.lane;}) .attr(\"x\", function(d) {return x1(d.start);}) .attr(\"y\", function(d) {return y1(d.lane) + 10;}) .attr(\"width\", function(d) {return x1(d.end) - x1(d.start);}) .attr(\"height\", function(d) {return .8 * y1(1);}); rects.exit().remove(); //update the item labels labels = itemRects.selectAll(\"text\") .data(visItems, function (d) { return d.id; }) .attr(\"x\", function(d) {return x1(Math.max(d.start, minExtent) + 2);}); // d.id \u4e3a\u6587\u672c\u6807\u7b7e labels.enter().append(\"text\") .text(function(d) {return d.id;}) .attr(\"x\", function(d) {return x1(Math.max(d.start, minExtent));}) .attr(\"y\", function(d) {return y1(d.lane + .5);}) .attr(\"text-anchor\", \"start\"); labels.exit().remove(); }","title":"2019 05 31 d3"},{"location":"web/2019-05-31-d3/#selection","text":"append \u6dfb\u52a0html\u5143\u7d20 attr \u6dfb\u52a0\u6216\u4fee\u6539\u5143\u7d20\u5c5e\u6027 \u4f7f\u7528\u793a\u4f8b d3.select(\"#timeline3\") .append(\"svg\") .attr(\"width\", 500) // \u6dfb\u52a0\u4e86svg\u6807\u7b7e\uff0c\u5e76\u8bbe\u5b9a\u4e86\u5c5e\u6027 <div id=\"timeline3\"> <svg witdth=\"500\"> </svg> </div>","title":"selection"},{"location":"web/2019-05-31-d3/#updateenterexit","text":"update \u9009\u4e2d\u6709\u6570\u636e\u5bf9\u5e94\u7684\u5143\u7d20 enter \u9009\u4e2d\u6709\u6570\u636e\u4f46\u6ca1\u6709\u7684\u5143\u7d20\uff0c\u53ef\u4ee5append\u6dfb\u52a0\u76f8\u5e94\u7684\u5143\u7d20 exit \u9009\u4e2d\u6ca1\u6709\u6570\u636e\u5bf9\u5e94\u7684\u5143\u7d20\uff0c \u53ef\u4ee5\u4f7f\u7528remove\u5220\u9664\u5143\u7d20","title":"update\u3001enter\u3001exit"},{"location":"web/2019-05-31-d3/#call","text":"call\u7684\u53c2\u6570\u4e3a\u51fd\u6570\uff0c \u51fd\u6570\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u4e3aselection // \u51fd\u6570\u5b9a\u4e49 function name(selection, first, last) { selection .attr(\"first-name\", first) .attr(\"last-name\", last); } d3.selectAll(\"div\").call(name, \"John\", \"Snow\"); // This is roughly equivalent to: name(d3.selectAll(\"div\"), \"John\", \"Snow\");","title":"call"},{"location":"web/2019-05-31-d3/#brush","text":"Select a one- or two-dimensional region using the mouse or touch https://github.com/d3/d3-brush var x = d3.scale.linear() .domain([timeBegin, timeEnd]) .range([0, w]); var brush = d3.svg.brush() .x(x) .on(\"brush\", display); .(x) <script type=\"text/javascript\"> // lanes \u4e09\u4e2a\u65f6\u95f4\u7ebf var lanes = [\"Chinese\",\"Japanese\",\"Korean\"], laneLength = lanes.length, timeBegin = 0, timeEnd = 2000; // margin // miniHeight, \u6bcf\u4e2a\u65f6\u95f4\u7ebf\u536012\u4e2a\u5355\u4f4d\u9ad8\u5ea6\uff0c var m = [20, 15, 15, 120], //top right bottom left w = 960 - m[1] - m[3], h = 500 - m[0] - m[2], miniHeight = laneLength * 12 + 50, mainHeight = h - miniHeight - 50; // w=960\uff0c miniHeight=3*12+50, mainHeight=500-miniHeight-50 // scales \u5750\u6807\u8f74 (x1, y1) \u4e3amain, (x, y2)\u4e3amini // main \u7684\u5750\u6807\u8f74x1\u5728display\u4e2d\u4f7f\u7528\uff0c mini\u7684x\u5728\u8bbe\u7f6e\u753b\u5237\u65f6\u4f7f\u7528 // y\u8f74\u6620\u5c04\u65f6\u95f4\u7ebf\u7684id var x = d3.scale.linear() .domain([timeBegin, timeEnd]) .range([0, w]); var x1 = d3.scale.linear() .range([0, w]); var y1 = d3.scale.linear() .domain([0, laneLength]) .range([0, mainHeight]); var y2 = d3.scale.linear() .domain([0, laneLength]) .range([0, miniHeight]); // svg\u6807\u7b7e\uff0c width=960\uff0c height=500 var chart = d3.select(\"body\") .append(\"svg\") .attr(\"width\", w + m[1] + m[3]) .attr(\"height\", h + m[0] + m[2]) .attr(\"class\", \"chart\"); // defs \u5b9a\u4e49svg\u7684\u9884\u5b9a\u4e49\u5143\u7d20\uff0c chart.append(\"defs\").append(\"clipPath\") .attr(\"id\", \"clip\") .append(\"rect\") .attr(\"width\", w) .attr(\"height\", mainHeight); // main chart, \u5750\u6807\u7cfbtranslate(120, 20) var main = chart.append(\"g\") .attr(\"transform\", \"translate(\" + m[3] + \",\" + m[0] + \")\") .attr(\"width\", w) .attr(\"height\", mainHeight) .attr(\"class\", \"main\"); // mini chart, \u5750\u6807\u7cfbtranslate(120, 349) var mini = chart.append(\"g\") .attr(\"transform\", \"translate(\" + m[3] + \",\" + (mainHeight + m[0]) + \")\") .attr(\"width\", w) .attr(\"height\", miniHeight) .attr(\"class\", \"mini\"); // items\u7684\u6bcf\u4e2a\u6570\u636e\u4e3a\u5b57\u5178\uff0c // main char \u6839\u636e\u6570\u636e\u6784\u5efaline\uff0c line\u5c06main chart \u4e09\u6761\u65f6\u95f4\u7ebf\u5206\u9694 // \u5206\u5272\u7ebf\u7684\u8d77\u70b9\u4e3a(x1,y1), \u7ec8\u70b9\u4e3a(x2, y2) // m[1]\u4e3aright margin //main lanes and texts main.append(\"g\").selectAll(\".laneLines\") .data(items) .enter().append(\"line\") .attr(\"x1\", m[1]) .attr(\"y1\", function(d) {return y1(d.lane);}) .attr(\"x2\", w) .attr(\"y2\", function(d) {return y1(d.lane);}) .attr(\"stroke\", \"lightgray\") // main chart \u65f6\u95f4\u7ebf\u7684\u540d\u79f0\u6807\u7b7e main.append(\"g\").selectAll(\".laneText\") .data(lanes) .enter().append(\"text\") .text(function(d) {return d;}) .attr(\"x\", -m[1]) .attr(\"y\", function(d, i) {return y1(i + .5);}) .attr(\"dy\", \".5ex\") .attr(\"text-anchor\", \"end\") .attr(\"class\", \"laneText\"); //mini lanes and texts mini.append(\"g\").selectAll(\".laneLines\") .data(items) .enter().append(\"line\") .attr(\"x1\", m[1]) .attr(\"y1\", function(d) {return y2(d.lane);}) .attr(\"x2\", w) .attr(\"y2\", function(d) {return y2(d.lane);}) .attr(\"stroke\", \"lightgray\"); mini.append(\"g\").selectAll(\".laneText\") .data(lanes) .enter().append(\"text\") .text(function(d) {return d;}) .attr(\"x\", -m[1]) .attr(\"y\", function(d, i) {return y2(i + .5);}) .attr(\"dy\", \".5ex\") .attr(\"text-anchor\", \"end\") .attr(\"class\", \"laneText\"); var itemRects = main.append(\"g\") .attr(\"clip-path\", \"url(#clip)\"); // \u77e9\u5f62\u80cc\u666f \u548c \u6587\u5b57\u6807\u7b7e //mini item rects mini.append(\"g\").selectAll(\"miniItems\") .data(items) .enter().append(\"rect\") .attr(\"class\", function(d) {return \"miniItem\" + d.lane;}) .attr(\"x\", function(d) {return x(d.start);}) .attr(\"y\", function(d) {return y2(d.lane + .5) - 5;}) .attr(\"width\", function(d) {return x(d.end - d.start);}) .attr(\"height\", 10); //mini labels mini.append(\"g\").selectAll(\".miniLabels\") .data(items) .enter().append(\"text\") .text(function(d) {return d.id;}) .attr(\"x\", function(d) {return x(d.start);}) .attr(\"y\", function(d) {return y2(d.lane + .5);}) .attr(\"dy\", \".5ex\"); //brush var brush = d3.svg.brush() .x(x) .on(\"brush\", display); // mini chart \u4e0a\u8bbe\u7f6ebrush mini.append(\"g\") .attr(\"class\", \"x brush\") .call(brush) .selectAll(\"rect\") .attr(\"y\", 1) .attr(\"height\", miniHeight - 1); display(); // \u5f53brush\u7684\"brush\"\u4e8b\u4ef6\u53d1\u751f\u662f, \u8c03\u7528\u8be5\u51fd\u6570 function display() { // brush.extent() \u83b7\u53d6\u753b\u5237\u8303\u56f4\uff0c \u8fc7\u6ee4\u6570\u636e var rects, labels, minExtent = brush.extent()[0], maxExtent = brush.extent()[1], visItems = items.filter(function(d) {return d.start < maxExtent && d.end > minExtent;}); mini.select(\".brush\") .call(brush.extent([minExtent, maxExtent])); // \u8bbe\u7f6emain chart\u7684\u6a2a\u5750\u6807\u8f74 x1.domain([minExtent, maxExtent]); //update main item rects // itemRects \u8bbe\u7f6e\u6709clip-path\uff0c rects = itemRects.selectAll(\"rect\") .data(visItems, function(d) { return d.id; }) .attr(\"x\", function(d) {return x1(d.start);}) .attr(\"width\", function(d) {return x1(d.end) - x1(d.start);}); rects.enter().append(\"rect\") .attr(\"class\", function(d) {return \"miniItem\" + d.lane;}) .attr(\"x\", function(d) {return x1(d.start);}) .attr(\"y\", function(d) {return y1(d.lane) + 10;}) .attr(\"width\", function(d) {return x1(d.end) - x1(d.start);}) .attr(\"height\", function(d) {return .8 * y1(1);}); rects.exit().remove(); //update the item labels labels = itemRects.selectAll(\"text\") .data(visItems, function (d) { return d.id; }) .attr(\"x\", function(d) {return x1(Math.max(d.start, minExtent) + 2);}); // d.id \u4e3a\u6587\u672c\u6807\u7b7e labels.enter().append(\"text\") .text(function(d) {return d.id;}) .attr(\"x\", function(d) {return x1(Math.max(d.start, minExtent));}) .attr(\"y\", function(d) {return y1(d.lane + .5);}) .attr(\"text-anchor\", \"start\"); labels.exit().remove(); }","title":"brush"}]}